

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 11 18:32:51 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBIGRAM,global,class=CODE,delta=2
     9                           	psect	stringtext1,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	dataBIGRAM,global,delta=1
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text23,local,class=CODE,merge=1,delta=2
    28                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text30,local,class=CODE,merge=1,delta=2
    31                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	swtext2,local,class=CONST,delta=2
    35                           	psect	text40,local,class=CODE,merge=1,delta=2
    36                           	psect	text41,local,class=CODE,merge=1,delta=2
    37                           	psect	text42,local,class=CODE,merge=1,delta=2
    38                           	psect	text43,local,class=CODE,merge=1,delta=2
    39                           	psect	text53,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text66,local,class=CODE,merge=1,delta=2
    42                           	psect	text67,local,class=CODE,merge=1,delta=2
    43                           	psect	pa_nodes0,global,class=CODE,delta=2
    44                           	dabs	1,0x620,48
    45                           	dabs	1,0x5A0,80
    46                           	dabs	1,0x520,80
    47                           	dabs	1,0x4C0,48
    48                           	dabs	1,0x4A0,32
    49                           	dabs	1,0x420,80
    50                           	dabs	1,0x3A0,80
    51                           	dabs	1,0x330,64
    52                           	dabs	1,0x21F0,0,_envelopeTable
    53                           	dabs	1,0x22F0,0,_waveTable
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 1.45
    57                           ; Generated 16/11/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F1705 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000E                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0013                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  008C                     	;# 
   117  008E                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  010C                     	;# 
   134  010E                     	;# 
   135  0111                     	;# 
   136  0112                     	;# 
   137  0113                     	;# 
   138  0114                     	;# 
   139  0115                     	;# 
   140  0116                     	;# 
   141  0117                     	;# 
   142  0118                     	;# 
   143  0119                     	;# 
   144  011C                     	;# 
   145  018C                     	;# 
   146  018E                     	;# 
   147  0191                     	;# 
   148  0191                     	;# 
   149  0192                     	;# 
   150  0193                     	;# 
   151  0193                     	;# 
   152  0194                     	;# 
   153  0195                     	;# 
   154  0196                     	;# 
   155  0197                     	;# 
   156  0199                     	;# 
   157  0199                     	;# 
   158  0199                     	;# 
   159  019A                     	;# 
   160  019A                     	;# 
   161  019A                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019B                     	;# 
   167  019C                     	;# 
   168  019C                     	;# 
   169  019C                     	;# 
   170  019D                     	;# 
   171  019D                     	;# 
   172  019D                     	;# 
   173  019E                     	;# 
   174  019E                     	;# 
   175  019E                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  019F                     	;# 
   179  019F                     	;# 
   180  019F                     	;# 
   181  020C                     	;# 
   182  020E                     	;# 
   183  0211                     	;# 
   184  0211                     	;# 
   185  0212                     	;# 
   186  0212                     	;# 
   187  0213                     	;# 
   188  0213                     	;# 
   189  0214                     	;# 
   190  0214                     	;# 
   191  0215                     	;# 
   192  0215                     	;# 
   193  0215                     	;# 
   194  0215                     	;# 
   195  0216                     	;# 
   196  0216                     	;# 
   197  0217                     	;# 
   198  0217                     	;# 
   199  028C                     	;# 
   200  028E                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0293                     	;# 
   206  0298                     	;# 
   207  0298                     	;# 
   208  0299                     	;# 
   209  029A                     	;# 
   210  029A                     	;# 
   211  029E                     	;# 
   212  030C                     	;# 
   213  030E                     	;# 
   214  038C                     	;# 
   215  038E                     	;# 
   216  0391                     	;# 
   217  0392                     	;# 
   218  0393                     	;# 
   219  0397                     	;# 
   220  0398                     	;# 
   221  0399                     	;# 
   222  0415                     	;# 
   223  0416                     	;# 
   224  0417                     	;# 
   225  041C                     	;# 
   226  041D                     	;# 
   227  041E                     	;# 
   228  0511                     	;# 
   229  0515                     	;# 
   230  0617                     	;# 
   231  0618                     	;# 
   232  0619                     	;# 
   233  0619                     	;# 
   234  061A                     	;# 
   235  061B                     	;# 
   236  061C                     	;# 
   237  061C                     	;# 
   238  0691                     	;# 
   239  0692                     	;# 
   240  0693                     	;# 
   241  0694                     	;# 
   242  0695                     	;# 
   243  0696                     	;# 
   244  0697                     	;# 
   245  0698                     	;# 
   246  0699                     	;# 
   247  069A                     	;# 
   248  069B                     	;# 
   249  069C                     	;# 
   250  069D                     	;# 
   251  069E                     	;# 
   252  069F                     	;# 
   253  0E0F                     	;# 
   254  0E10                     	;# 
   255  0E11                     	;# 
   256  0E12                     	;# 
   257  0E13                     	;# 
   258  0E14                     	;# 
   259  0E15                     	;# 
   260  0E17                     	;# 
   261  0E20                     	;# 
   262  0E21                     	;# 
   263  0E22                     	;# 
   264  0E24                     	;# 
   265  0E25                     	;# 
   266  0E28                     	;# 
   267  0E29                     	;# 
   268  0E2A                     	;# 
   269  0E2B                     	;# 
   270  0E90                     	;# 
   271  0E91                     	;# 
   272  0E92                     	;# 
   273  0E94                     	;# 
   274  0E95                     	;# 
   275  0EA0                     	;# 
   276  0EA1                     	;# 
   277  0EA2                     	;# 
   278  0EA3                     	;# 
   279  0EA4                     	;# 
   280  0EA5                     	;# 
   281  0F0F                     	;# 
   282  0F10                     	;# 
   283  0F11                     	;# 
   284  0F12                     	;# 
   285  0F13                     	;# 
   286  0F14                     	;# 
   287  0F15                     	;# 
   288  0F16                     	;# 
   289  0F17                     	;# 
   290  0F18                     	;# 
   291  0F19                     	;# 
   292  0F1A                     	;# 
   293  0F1B                     	;# 
   294  0F1C                     	;# 
   295  0F1D                     	;# 
   296  0F1E                     	;# 
   297  0F1F                     	;# 
   298  0F20                     	;# 
   299  0F21                     	;# 
   300  0F22                     	;# 
   301  0F23                     	;# 
   302  0F24                     	;# 
   303  0F25                     	;# 
   304  0F26                     	;# 
   305  0F27                     	;# 
   306  0F28                     	;# 
   307  0F29                     	;# 
   308  0F2A                     	;# 
   309  0F2B                     	;# 
   310  0F2C                     	;# 
   311  0F2D                     	;# 
   312  0F9E                     	;# 
   313  0FE4                     	;# 
   314  0FE5                     	;# 
   315  0FE6                     	;# 
   316  0FE7                     	;# 
   317  0FE8                     	;# 
   318  0FE9                     	;# 
   319  0FEA                     	;# 
   320  0FEB                     	;# 
   321  0FED                     	;# 
   322  0FEE                     	;# 
   323  0FEF                     	;# 
   324  0000                     	;# 
   325  0001                     	;# 
   326  0002                     	;# 
   327  0003                     	;# 
   328  0004                     	;# 
   329  0005                     	;# 
   330  0006                     	;# 
   331  0007                     	;# 
   332  0008                     	;# 
   333  0009                     	;# 
   334  000A                     	;# 
   335  000B                     	;# 
   336  000C                     	;# 
   337  000E                     	;# 
   338  0011                     	;# 
   339  0012                     	;# 
   340  0013                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001B                     	;# 
   349  001C                     	;# 
   350  008C                     	;# 
   351  008E                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0093                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  010C                     	;# 
   368  010E                     	;# 
   369  0111                     	;# 
   370  0112                     	;# 
   371  0113                     	;# 
   372  0114                     	;# 
   373  0115                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  0118                     	;# 
   377  0119                     	;# 
   378  011C                     	;# 
   379  018C                     	;# 
   380  018E                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  0199                     	;# 
   391  0199                     	;# 
   392  0199                     	;# 
   393  019A                     	;# 
   394  019A                     	;# 
   395  019A                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019D                     	;# 
   406  019D                     	;# 
   407  019E                     	;# 
   408  019E                     	;# 
   409  019E                     	;# 
   410  019F                     	;# 
   411  019F                     	;# 
   412  019F                     	;# 
   413  019F                     	;# 
   414  019F                     	;# 
   415  020C                     	;# 
   416  020E                     	;# 
   417  0211                     	;# 
   418  0211                     	;# 
   419  0212                     	;# 
   420  0212                     	;# 
   421  0213                     	;# 
   422  0213                     	;# 
   423  0214                     	;# 
   424  0214                     	;# 
   425  0215                     	;# 
   426  0215                     	;# 
   427  0215                     	;# 
   428  0215                     	;# 
   429  0216                     	;# 
   430  0216                     	;# 
   431  0217                     	;# 
   432  0217                     	;# 
   433  028C                     	;# 
   434  028E                     	;# 
   435  0291                     	;# 
   436  0291                     	;# 
   437  0292                     	;# 
   438  0293                     	;# 
   439  0293                     	;# 
   440  0298                     	;# 
   441  0298                     	;# 
   442  0299                     	;# 
   443  029A                     	;# 
   444  029A                     	;# 
   445  029E                     	;# 
   446  030C                     	;# 
   447  030E                     	;# 
   448  038C                     	;# 
   449  038E                     	;# 
   450  0391                     	;# 
   451  0392                     	;# 
   452  0393                     	;# 
   453  0397                     	;# 
   454  0398                     	;# 
   455  0399                     	;# 
   456  0415                     	;# 
   457  0416                     	;# 
   458  0417                     	;# 
   459  041C                     	;# 
   460  041D                     	;# 
   461  041E                     	;# 
   462  0511                     	;# 
   463  0515                     	;# 
   464  0617                     	;# 
   465  0618                     	;# 
   466  0619                     	;# 
   467  0619                     	;# 
   468  061A                     	;# 
   469  061B                     	;# 
   470  061C                     	;# 
   471  061C                     	;# 
   472  0691                     	;# 
   473  0692                     	;# 
   474  0693                     	;# 
   475  0694                     	;# 
   476  0695                     	;# 
   477  0696                     	;# 
   478  0697                     	;# 
   479  0698                     	;# 
   480  0699                     	;# 
   481  069A                     	;# 
   482  069B                     	;# 
   483  069C                     	;# 
   484  069D                     	;# 
   485  069E                     	;# 
   486  069F                     	;# 
   487  0E0F                     	;# 
   488  0E10                     	;# 
   489  0E11                     	;# 
   490  0E12                     	;# 
   491  0E13                     	;# 
   492  0E14                     	;# 
   493  0E15                     	;# 
   494  0E17                     	;# 
   495  0E20                     	;# 
   496  0E21                     	;# 
   497  0E22                     	;# 
   498  0E24                     	;# 
   499  0E25                     	;# 
   500  0E28                     	;# 
   501  0E29                     	;# 
   502  0E2A                     	;# 
   503  0E2B                     	;# 
   504  0E90                     	;# 
   505  0E91                     	;# 
   506  0E92                     	;# 
   507  0E94                     	;# 
   508  0E95                     	;# 
   509  0EA0                     	;# 
   510  0EA1                     	;# 
   511  0EA2                     	;# 
   512  0EA3                     	;# 
   513  0EA4                     	;# 
   514  0EA5                     	;# 
   515  0F0F                     	;# 
   516  0F10                     	;# 
   517  0F11                     	;# 
   518  0F12                     	;# 
   519  0F13                     	;# 
   520  0F14                     	;# 
   521  0F15                     	;# 
   522  0F16                     	;# 
   523  0F17                     	;# 
   524  0F18                     	;# 
   525  0F19                     	;# 
   526  0F1A                     	;# 
   527  0F1B                     	;# 
   528  0F1C                     	;# 
   529  0F1D                     	;# 
   530  0F1E                     	;# 
   531  0F1F                     	;# 
   532  0F20                     	;# 
   533  0F21                     	;# 
   534  0F22                     	;# 
   535  0F23                     	;# 
   536  0F24                     	;# 
   537  0F25                     	;# 
   538  0F26                     	;# 
   539  0F27                     	;# 
   540  0F28                     	;# 
   541  0F29                     	;# 
   542  0F2A                     	;# 
   543  0F2B                     	;# 
   544  0F2C                     	;# 
   545  0F2D                     	;# 
   546  0F9E                     	;# 
   547  0FE4                     	;# 
   548  0FE5                     	;# 
   549  0FE6                     	;# 
   550  0FE7                     	;# 
   551  0FE8                     	;# 
   552  0FE9                     	;# 
   553  0FEA                     	;# 
   554  0FEB                     	;# 
   555  0FED                     	;# 
   556  0FEE                     	;# 
   557  0FEF                     	;# 
   558  0000                     	;# 
   559  0001                     	;# 
   560  0002                     	;# 
   561  0003                     	;# 
   562  0004                     	;# 
   563  0005                     	;# 
   564  0006                     	;# 
   565  0007                     	;# 
   566  0008                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000E                     	;# 
   572  0011                     	;# 
   573  0012                     	;# 
   574  0013                     	;# 
   575  0015                     	;# 
   576  0016                     	;# 
   577  0016                     	;# 
   578  0017                     	;# 
   579  0018                     	;# 
   580  0019                     	;# 
   581  001A                     	;# 
   582  001B                     	;# 
   583  001C                     	;# 
   584  008C                     	;# 
   585  008E                     	;# 
   586  0091                     	;# 
   587  0092                     	;# 
   588  0093                     	;# 
   589  0095                     	;# 
   590  0096                     	;# 
   591  0097                     	;# 
   592  0098                     	;# 
   593  0099                     	;# 
   594  009A                     	;# 
   595  009B                     	;# 
   596  009B                     	;# 
   597  009C                     	;# 
   598  009D                     	;# 
   599  009E                     	;# 
   600  009F                     	;# 
   601  010C                     	;# 
   602  010E                     	;# 
   603  0111                     	;# 
   604  0112                     	;# 
   605  0113                     	;# 
   606  0114                     	;# 
   607  0115                     	;# 
   608  0116                     	;# 
   609  0117                     	;# 
   610  0118                     	;# 
   611  0119                     	;# 
   612  011C                     	;# 
   613  018C                     	;# 
   614  018E                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0194                     	;# 
   621  0195                     	;# 
   622  0196                     	;# 
   623  0197                     	;# 
   624  0199                     	;# 
   625  0199                     	;# 
   626  0199                     	;# 
   627  019A                     	;# 
   628  019A                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019C                     	;# 
   636  019C                     	;# 
   637  019C                     	;# 
   638  019D                     	;# 
   639  019D                     	;# 
   640  019D                     	;# 
   641  019E                     	;# 
   642  019E                     	;# 
   643  019E                     	;# 
   644  019F                     	;# 
   645  019F                     	;# 
   646  019F                     	;# 
   647  019F                     	;# 
   648  019F                     	;# 
   649  020C                     	;# 
   650  020E                     	;# 
   651  0211                     	;# 
   652  0211                     	;# 
   653  0212                     	;# 
   654  0212                     	;# 
   655  0213                     	;# 
   656  0213                     	;# 
   657  0214                     	;# 
   658  0214                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0216                     	;# 
   664  0216                     	;# 
   665  0217                     	;# 
   666  0217                     	;# 
   667  028C                     	;# 
   668  028E                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0293                     	;# 
   674  0298                     	;# 
   675  0298                     	;# 
   676  0299                     	;# 
   677  029A                     	;# 
   678  029A                     	;# 
   679  029E                     	;# 
   680  030C                     	;# 
   681  030E                     	;# 
   682  038C                     	;# 
   683  038E                     	;# 
   684  0391                     	;# 
   685  0392                     	;# 
   686  0393                     	;# 
   687  0397                     	;# 
   688  0398                     	;# 
   689  0399                     	;# 
   690  0415                     	;# 
   691  0416                     	;# 
   692  0417                     	;# 
   693  041C                     	;# 
   694  041D                     	;# 
   695  041E                     	;# 
   696  0511                     	;# 
   697  0515                     	;# 
   698  0617                     	;# 
   699  0618                     	;# 
   700  0619                     	;# 
   701  0619                     	;# 
   702  061A                     	;# 
   703  061B                     	;# 
   704  061C                     	;# 
   705  061C                     	;# 
   706  0691                     	;# 
   707  0692                     	;# 
   708  0693                     	;# 
   709  0694                     	;# 
   710  0695                     	;# 
   711  0696                     	;# 
   712  0697                     	;# 
   713  0698                     	;# 
   714  0699                     	;# 
   715  069A                     	;# 
   716  069B                     	;# 
   717  069C                     	;# 
   718  069D                     	;# 
   719  069E                     	;# 
   720  069F                     	;# 
   721  0E0F                     	;# 
   722  0E10                     	;# 
   723  0E11                     	;# 
   724  0E12                     	;# 
   725  0E13                     	;# 
   726  0E14                     	;# 
   727  0E15                     	;# 
   728  0E17                     	;# 
   729  0E20                     	;# 
   730  0E21                     	;# 
   731  0E22                     	;# 
   732  0E24                     	;# 
   733  0E25                     	;# 
   734  0E28                     	;# 
   735  0E29                     	;# 
   736  0E2A                     	;# 
   737  0E2B                     	;# 
   738  0E90                     	;# 
   739  0E91                     	;# 
   740  0E92                     	;# 
   741  0E94                     	;# 
   742  0E95                     	;# 
   743  0EA0                     	;# 
   744  0EA1                     	;# 
   745  0EA2                     	;# 
   746  0EA3                     	;# 
   747  0EA4                     	;# 
   748  0EA5                     	;# 
   749  0F0F                     	;# 
   750  0F10                     	;# 
   751  0F11                     	;# 
   752  0F12                     	;# 
   753  0F13                     	;# 
   754  0F14                     	;# 
   755  0F15                     	;# 
   756  0F16                     	;# 
   757  0F17                     	;# 
   758  0F18                     	;# 
   759  0F19                     	;# 
   760  0F1A                     	;# 
   761  0F1B                     	;# 
   762  0F1C                     	;# 
   763  0F1D                     	;# 
   764  0F1E                     	;# 
   765  0F1F                     	;# 
   766  0F20                     	;# 
   767  0F21                     	;# 
   768  0F22                     	;# 
   769  0F23                     	;# 
   770  0F24                     	;# 
   771  0F25                     	;# 
   772  0F26                     	;# 
   773  0F27                     	;# 
   774  0F28                     	;# 
   775  0F29                     	;# 
   776  0F2A                     	;# 
   777  0F2B                     	;# 
   778  0F2C                     	;# 
   779  0F2D                     	;# 
   780  0F9E                     	;# 
   781  0FE4                     	;# 
   782  0FE5                     	;# 
   783  0FE6                     	;# 
   784  0FE7                     	;# 
   785  0FE8                     	;# 
   786  0FE9                     	;# 
   787  0FEA                     	;# 
   788  0FEB                     	;# 
   789  0FED                     	;# 
   790  0FEE                     	;# 
   791  0FEF                     	;# 
   792  0000                     	;# 
   793  0001                     	;# 
   794  0002                     	;# 
   795  0003                     	;# 
   796  0004                     	;# 
   797  0005                     	;# 
   798  0006                     	;# 
   799  0007                     	;# 
   800  0008                     	;# 
   801  0009                     	;# 
   802  000A                     	;# 
   803  000B                     	;# 
   804  000C                     	;# 
   805  000E                     	;# 
   806  0011                     	;# 
   807  0012                     	;# 
   808  0013                     	;# 
   809  0015                     	;# 
   810  0016                     	;# 
   811  0016                     	;# 
   812  0017                     	;# 
   813  0018                     	;# 
   814  0019                     	;# 
   815  001A                     	;# 
   816  001B                     	;# 
   817  001C                     	;# 
   818  008C                     	;# 
   819  008E                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0095                     	;# 
   824  0096                     	;# 
   825  0097                     	;# 
   826  0098                     	;# 
   827  0099                     	;# 
   828  009A                     	;# 
   829  009B                     	;# 
   830  009B                     	;# 
   831  009C                     	;# 
   832  009D                     	;# 
   833  009E                     	;# 
   834  009F                     	;# 
   835  010C                     	;# 
   836  010E                     	;# 
   837  0111                     	;# 
   838  0112                     	;# 
   839  0113                     	;# 
   840  0114                     	;# 
   841  0115                     	;# 
   842  0116                     	;# 
   843  0117                     	;# 
   844  0118                     	;# 
   845  0119                     	;# 
   846  011C                     	;# 
   847  018C                     	;# 
   848  018E                     	;# 
   849  0191                     	;# 
   850  0191                     	;# 
   851  0192                     	;# 
   852  0193                     	;# 
   853  0193                     	;# 
   854  0194                     	;# 
   855  0195                     	;# 
   856  0196                     	;# 
   857  0197                     	;# 
   858  0199                     	;# 
   859  0199                     	;# 
   860  0199                     	;# 
   861  019A                     	;# 
   862  019A                     	;# 
   863  019A                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019C                     	;# 
   870  019C                     	;# 
   871  019C                     	;# 
   872  019D                     	;# 
   873  019D                     	;# 
   874  019D                     	;# 
   875  019E                     	;# 
   876  019E                     	;# 
   877  019E                     	;# 
   878  019F                     	;# 
   879  019F                     	;# 
   880  019F                     	;# 
   881  019F                     	;# 
   882  019F                     	;# 
   883  020C                     	;# 
   884  020E                     	;# 
   885  0211                     	;# 
   886  0211                     	;# 
   887  0212                     	;# 
   888  0212                     	;# 
   889  0213                     	;# 
   890  0213                     	;# 
   891  0214                     	;# 
   892  0214                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0215                     	;# 
   896  0215                     	;# 
   897  0216                     	;# 
   898  0216                     	;# 
   899  0217                     	;# 
   900  0217                     	;# 
   901  028C                     	;# 
   902  028E                     	;# 
   903  0291                     	;# 
   904  0291                     	;# 
   905  0292                     	;# 
   906  0293                     	;# 
   907  0293                     	;# 
   908  0298                     	;# 
   909  0298                     	;# 
   910  0299                     	;# 
   911  029A                     	;# 
   912  029A                     	;# 
   913  029E                     	;# 
   914  030C                     	;# 
   915  030E                     	;# 
   916  038C                     	;# 
   917  038E                     	;# 
   918  0391                     	;# 
   919  0392                     	;# 
   920  0393                     	;# 
   921  0397                     	;# 
   922  0398                     	;# 
   923  0399                     	;# 
   924  0415                     	;# 
   925  0416                     	;# 
   926  0417                     	;# 
   927  041C                     	;# 
   928  041D                     	;# 
   929  041E                     	;# 
   930  0511                     	;# 
   931  0515                     	;# 
   932  0617                     	;# 
   933  0618                     	;# 
   934  0619                     	;# 
   935  0619                     	;# 
   936  061A                     	;# 
   937  061B                     	;# 
   938  061C                     	;# 
   939  061C                     	;# 
   940  0691                     	;# 
   941  0692                     	;# 
   942  0693                     	;# 
   943  0694                     	;# 
   944  0695                     	;# 
   945  0696                     	;# 
   946  0697                     	;# 
   947  0698                     	;# 
   948  0699                     	;# 
   949  069A                     	;# 
   950  069B                     	;# 
   951  069C                     	;# 
   952  069D                     	;# 
   953  069E                     	;# 
   954  069F                     	;# 
   955  0E0F                     	;# 
   956  0E10                     	;# 
   957  0E11                     	;# 
   958  0E12                     	;# 
   959  0E13                     	;# 
   960  0E14                     	;# 
   961  0E15                     	;# 
   962  0E17                     	;# 
   963  0E20                     	;# 
   964  0E21                     	;# 
   965  0E22                     	;# 
   966  0E24                     	;# 
   967  0E25                     	;# 
   968  0E28                     	;# 
   969  0E29                     	;# 
   970  0E2A                     	;# 
   971  0E2B                     	;# 
   972  0E90                     	;# 
   973  0E91                     	;# 
   974  0E92                     	;# 
   975  0E94                     	;# 
   976  0E95                     	;# 
   977  0EA0                     	;# 
   978  0EA1                     	;# 
   979  0EA2                     	;# 
   980  0EA3                     	;# 
   981  0EA4                     	;# 
   982  0EA5                     	;# 
   983  0F0F                     	;# 
   984  0F10                     	;# 
   985  0F11                     	;# 
   986  0F12                     	;# 
   987  0F13                     	;# 
   988  0F14                     	;# 
   989  0F15                     	;# 
   990  0F16                     	;# 
   991  0F17                     	;# 
   992  0F18                     	;# 
   993  0F19                     	;# 
   994  0F1A                     	;# 
   995  0F1B                     	;# 
   996  0F1C                     	;# 
   997  0F1D                     	;# 
   998  0F1E                     	;# 
   999  0F1F                     	;# 
  1000  0F20                     	;# 
  1001  0F21                     	;# 
  1002  0F22                     	;# 
  1003  0F23                     	;# 
  1004  0F24                     	;# 
  1005  0F25                     	;# 
  1006  0F26                     	;# 
  1007  0F27                     	;# 
  1008  0F28                     	;# 
  1009  0F29                     	;# 
  1010  0F2A                     	;# 
  1011  0F2B                     	;# 
  1012  0F2C                     	;# 
  1013  0F2D                     	;# 
  1014  0F9E                     	;# 
  1015  0FE4                     	;# 
  1016  0FE5                     	;# 
  1017  0FE6                     	;# 
  1018  0FE7                     	;# 
  1019  0FE8                     	;# 
  1020  0FE9                     	;# 
  1021  0FEA                     	;# 
  1022  0FEB                     	;# 
  1023  0FED                     	;# 
  1024  0FEE                     	;# 
  1025  0FEF                     	;# 
  1026  0000                     	;# 
  1027  0001                     	;# 
  1028  0002                     	;# 
  1029  0003                     	;# 
  1030  0004                     	;# 
  1031  0005                     	;# 
  1032  0006                     	;# 
  1033  0007                     	;# 
  1034  0008                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000E                     	;# 
  1040  0011                     	;# 
  1041  0012                     	;# 
  1042  0013                     	;# 
  1043  0015                     	;# 
  1044  0016                     	;# 
  1045  0016                     	;# 
  1046  0017                     	;# 
  1047  0018                     	;# 
  1048  0019                     	;# 
  1049  001A                     	;# 
  1050  001B                     	;# 
  1051  001C                     	;# 
  1052  008C                     	;# 
  1053  008E                     	;# 
  1054  0091                     	;# 
  1055  0092                     	;# 
  1056  0093                     	;# 
  1057  0095                     	;# 
  1058  0096                     	;# 
  1059  0097                     	;# 
  1060  0098                     	;# 
  1061  0099                     	;# 
  1062  009A                     	;# 
  1063  009B                     	;# 
  1064  009B                     	;# 
  1065  009C                     	;# 
  1066  009D                     	;# 
  1067  009E                     	;# 
  1068  009F                     	;# 
  1069  010C                     	;# 
  1070  010E                     	;# 
  1071  0111                     	;# 
  1072  0112                     	;# 
  1073  0113                     	;# 
  1074  0114                     	;# 
  1075  0115                     	;# 
  1076  0116                     	;# 
  1077  0117                     	;# 
  1078  0118                     	;# 
  1079  0119                     	;# 
  1080  011C                     	;# 
  1081  018C                     	;# 
  1082  018E                     	;# 
  1083  0191                     	;# 
  1084  0191                     	;# 
  1085  0192                     	;# 
  1086  0193                     	;# 
  1087  0193                     	;# 
  1088  0194                     	;# 
  1089  0195                     	;# 
  1090  0196                     	;# 
  1091  0197                     	;# 
  1092  0199                     	;# 
  1093  0199                     	;# 
  1094  0199                     	;# 
  1095  019A                     	;# 
  1096  019A                     	;# 
  1097  019A                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019B                     	;# 
  1103  019C                     	;# 
  1104  019C                     	;# 
  1105  019C                     	;# 
  1106  019D                     	;# 
  1107  019D                     	;# 
  1108  019D                     	;# 
  1109  019E                     	;# 
  1110  019E                     	;# 
  1111  019E                     	;# 
  1112  019F                     	;# 
  1113  019F                     	;# 
  1114  019F                     	;# 
  1115  019F                     	;# 
  1116  019F                     	;# 
  1117  020C                     	;# 
  1118  020E                     	;# 
  1119  0211                     	;# 
  1120  0211                     	;# 
  1121  0212                     	;# 
  1122  0212                     	;# 
  1123  0213                     	;# 
  1124  0213                     	;# 
  1125  0214                     	;# 
  1126  0214                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0216                     	;# 
  1132  0216                     	;# 
  1133  0217                     	;# 
  1134  0217                     	;# 
  1135  028C                     	;# 
  1136  028E                     	;# 
  1137  0291                     	;# 
  1138  0291                     	;# 
  1139  0292                     	;# 
  1140  0293                     	;# 
  1141  0293                     	;# 
  1142  0298                     	;# 
  1143  0298                     	;# 
  1144  0299                     	;# 
  1145  029A                     	;# 
  1146  029A                     	;# 
  1147  029E                     	;# 
  1148  030C                     	;# 
  1149  030E                     	;# 
  1150  038C                     	;# 
  1151  038E                     	;# 
  1152  0391                     	;# 
  1153  0392                     	;# 
  1154  0393                     	;# 
  1155  0397                     	;# 
  1156  0398                     	;# 
  1157  0399                     	;# 
  1158  0415                     	;# 
  1159  0416                     	;# 
  1160  0417                     	;# 
  1161  041C                     	;# 
  1162  041D                     	;# 
  1163  041E                     	;# 
  1164  0511                     	;# 
  1165  0515                     	;# 
  1166  0617                     	;# 
  1167  0618                     	;# 
  1168  0619                     	;# 
  1169  0619                     	;# 
  1170  061A                     	;# 
  1171  061B                     	;# 
  1172  061C                     	;# 
  1173  061C                     	;# 
  1174  0691                     	;# 
  1175  0692                     	;# 
  1176  0693                     	;# 
  1177  0694                     	;# 
  1178  0695                     	;# 
  1179  0696                     	;# 
  1180  0697                     	;# 
  1181  0698                     	;# 
  1182  0699                     	;# 
  1183  069A                     	;# 
  1184  069B                     	;# 
  1185  069C                     	;# 
  1186  069D                     	;# 
  1187  069E                     	;# 
  1188  069F                     	;# 
  1189  0E0F                     	;# 
  1190  0E10                     	;# 
  1191  0E11                     	;# 
  1192  0E12                     	;# 
  1193  0E13                     	;# 
  1194  0E14                     	;# 
  1195  0E15                     	;# 
  1196  0E17                     	;# 
  1197  0E20                     	;# 
  1198  0E21                     	;# 
  1199  0E22                     	;# 
  1200  0E24                     	;# 
  1201  0E25                     	;# 
  1202  0E28                     	;# 
  1203  0E29                     	;# 
  1204  0E2A                     	;# 
  1205  0E2B                     	;# 
  1206  0E90                     	;# 
  1207  0E91                     	;# 
  1208  0E92                     	;# 
  1209  0E94                     	;# 
  1210  0E95                     	;# 
  1211  0EA0                     	;# 
  1212  0EA1                     	;# 
  1213  0EA2                     	;# 
  1214  0EA3                     	;# 
  1215  0EA4                     	;# 
  1216  0EA5                     	;# 
  1217  0F0F                     	;# 
  1218  0F10                     	;# 
  1219  0F11                     	;# 
  1220  0F12                     	;# 
  1221  0F13                     	;# 
  1222  0F14                     	;# 
  1223  0F15                     	;# 
  1224  0F16                     	;# 
  1225  0F17                     	;# 
  1226  0F18                     	;# 
  1227  0F19                     	;# 
  1228  0F1A                     	;# 
  1229  0F1B                     	;# 
  1230  0F1C                     	;# 
  1231  0F1D                     	;# 
  1232  0F1E                     	;# 
  1233  0F1F                     	;# 
  1234  0F20                     	;# 
  1235  0F21                     	;# 
  1236  0F22                     	;# 
  1237  0F23                     	;# 
  1238  0F24                     	;# 
  1239  0F25                     	;# 
  1240  0F26                     	;# 
  1241  0F27                     	;# 
  1242  0F28                     	;# 
  1243  0F29                     	;# 
  1244  0F2A                     	;# 
  1245  0F2B                     	;# 
  1246  0F2C                     	;# 
  1247  0F2D                     	;# 
  1248  0F9E                     	;# 
  1249  0FE4                     	;# 
  1250  0FE5                     	;# 
  1251  0FE6                     	;# 
  1252  0FE7                     	;# 
  1253  0FE8                     	;# 
  1254  0FE9                     	;# 
  1255  0FEA                     	;# 
  1256  0FEB                     	;# 
  1257  0FED                     	;# 
  1258  0FEE                     	;# 
  1259  0FEF                     	;# 
  1260  0000                     	;# 
  1261  0001                     	;# 
  1262  0002                     	;# 
  1263  0003                     	;# 
  1264  0004                     	;# 
  1265  0005                     	;# 
  1266  0006                     	;# 
  1267  0007                     	;# 
  1268  0008                     	;# 
  1269  0009                     	;# 
  1270  000A                     	;# 
  1271  000B                     	;# 
  1272  000C                     	;# 
  1273  000E                     	;# 
  1274  0011                     	;# 
  1275  0012                     	;# 
  1276  0013                     	;# 
  1277  0015                     	;# 
  1278  0016                     	;# 
  1279  0016                     	;# 
  1280  0017                     	;# 
  1281  0018                     	;# 
  1282  0019                     	;# 
  1283  001A                     	;# 
  1284  001B                     	;# 
  1285  001C                     	;# 
  1286  008C                     	;# 
  1287  008E                     	;# 
  1288  0091                     	;# 
  1289  0092                     	;# 
  1290  0093                     	;# 
  1291  0095                     	;# 
  1292  0096                     	;# 
  1293  0097                     	;# 
  1294  0098                     	;# 
  1295  0099                     	;# 
  1296  009A                     	;# 
  1297  009B                     	;# 
  1298  009B                     	;# 
  1299  009C                     	;# 
  1300  009D                     	;# 
  1301  009E                     	;# 
  1302  009F                     	;# 
  1303  010C                     	;# 
  1304  010E                     	;# 
  1305  0111                     	;# 
  1306  0112                     	;# 
  1307  0113                     	;# 
  1308  0114                     	;# 
  1309  0115                     	;# 
  1310  0116                     	;# 
  1311  0117                     	;# 
  1312  0118                     	;# 
  1313  0119                     	;# 
  1314  011C                     	;# 
  1315  018C                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  0199                     	;# 
  1328  0199                     	;# 
  1329  019A                     	;# 
  1330  019A                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019B                     	;# 
  1337  019C                     	;# 
  1338  019C                     	;# 
  1339  019C                     	;# 
  1340  019D                     	;# 
  1341  019D                     	;# 
  1342  019D                     	;# 
  1343  019E                     	;# 
  1344  019E                     	;# 
  1345  019E                     	;# 
  1346  019F                     	;# 
  1347  019F                     	;# 
  1348  019F                     	;# 
  1349  019F                     	;# 
  1350  019F                     	;# 
  1351  020C                     	;# 
  1352  020E                     	;# 
  1353  0211                     	;# 
  1354  0211                     	;# 
  1355  0212                     	;# 
  1356  0212                     	;# 
  1357  0213                     	;# 
  1358  0213                     	;# 
  1359  0214                     	;# 
  1360  0214                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0215                     	;# 
  1364  0215                     	;# 
  1365  0216                     	;# 
  1366  0216                     	;# 
  1367  0217                     	;# 
  1368  0217                     	;# 
  1369  028C                     	;# 
  1370  028E                     	;# 
  1371  0291                     	;# 
  1372  0291                     	;# 
  1373  0292                     	;# 
  1374  0293                     	;# 
  1375  0293                     	;# 
  1376  0298                     	;# 
  1377  0298                     	;# 
  1378  0299                     	;# 
  1379  029A                     	;# 
  1380  029A                     	;# 
  1381  029E                     	;# 
  1382  030C                     	;# 
  1383  030E                     	;# 
  1384  038C                     	;# 
  1385  038E                     	;# 
  1386  0391                     	;# 
  1387  0392                     	;# 
  1388  0393                     	;# 
  1389  0397                     	;# 
  1390  0398                     	;# 
  1391  0399                     	;# 
  1392  0415                     	;# 
  1393  0416                     	;# 
  1394  0417                     	;# 
  1395  041C                     	;# 
  1396  041D                     	;# 
  1397  041E                     	;# 
  1398  0511                     	;# 
  1399  0515                     	;# 
  1400  0617                     	;# 
  1401  0618                     	;# 
  1402  0619                     	;# 
  1403  0619                     	;# 
  1404  061A                     	;# 
  1405  061B                     	;# 
  1406  061C                     	;# 
  1407  061C                     	;# 
  1408  0691                     	;# 
  1409  0692                     	;# 
  1410  0693                     	;# 
  1411  0694                     	;# 
  1412  0695                     	;# 
  1413  0696                     	;# 
  1414  0697                     	;# 
  1415  0698                     	;# 
  1416  0699                     	;# 
  1417  069A                     	;# 
  1418  069B                     	;# 
  1419  069C                     	;# 
  1420  069D                     	;# 
  1421  069E                     	;# 
  1422  069F                     	;# 
  1423  0E0F                     	;# 
  1424  0E10                     	;# 
  1425  0E11                     	;# 
  1426  0E12                     	;# 
  1427  0E13                     	;# 
  1428  0E14                     	;# 
  1429  0E15                     	;# 
  1430  0E17                     	;# 
  1431  0E20                     	;# 
  1432  0E21                     	;# 
  1433  0E22                     	;# 
  1434  0E24                     	;# 
  1435  0E25                     	;# 
  1436  0E28                     	;# 
  1437  0E29                     	;# 
  1438  0E2A                     	;# 
  1439  0E2B                     	;# 
  1440  0E90                     	;# 
  1441  0E91                     	;# 
  1442  0E92                     	;# 
  1443  0E94                     	;# 
  1444  0E95                     	;# 
  1445  0EA0                     	;# 
  1446  0EA1                     	;# 
  1447  0EA2                     	;# 
  1448  0EA3                     	;# 
  1449  0EA4                     	;# 
  1450  0EA5                     	;# 
  1451  0F0F                     	;# 
  1452  0F10                     	;# 
  1453  0F11                     	;# 
  1454  0F12                     	;# 
  1455  0F13                     	;# 
  1456  0F14                     	;# 
  1457  0F15                     	;# 
  1458  0F16                     	;# 
  1459  0F17                     	;# 
  1460  0F18                     	;# 
  1461  0F19                     	;# 
  1462  0F1A                     	;# 
  1463  0F1B                     	;# 
  1464  0F1C                     	;# 
  1465  0F1D                     	;# 
  1466  0F1E                     	;# 
  1467  0F1F                     	;# 
  1468  0F20                     	;# 
  1469  0F21                     	;# 
  1470  0F22                     	;# 
  1471  0F23                     	;# 
  1472  0F24                     	;# 
  1473  0F25                     	;# 
  1474  0F26                     	;# 
  1475  0F27                     	;# 
  1476  0F28                     	;# 
  1477  0F29                     	;# 
  1478  0F2A                     	;# 
  1479  0F2B                     	;# 
  1480  0F2C                     	;# 
  1481  0F2D                     	;# 
  1482  0F9E                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000E                     	;# 
  1508  0011                     	;# 
  1509  0012                     	;# 
  1510  0013                     	;# 
  1511  0015                     	;# 
  1512  0016                     	;# 
  1513  0016                     	;# 
  1514  0017                     	;# 
  1515  0018                     	;# 
  1516  0019                     	;# 
  1517  001A                     	;# 
  1518  001B                     	;# 
  1519  001C                     	;# 
  1520  008C                     	;# 
  1521  008E                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0093                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0097                     	;# 
  1528  0098                     	;# 
  1529  0099                     	;# 
  1530  009A                     	;# 
  1531  009B                     	;# 
  1532  009B                     	;# 
  1533  009C                     	;# 
  1534  009D                     	;# 
  1535  009E                     	;# 
  1536  009F                     	;# 
  1537  010C                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  011C                     	;# 
  1549  018C                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  0199                     	;# 
  1562  0199                     	;# 
  1563  019A                     	;# 
  1564  019A                     	;# 
  1565  019A                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019C                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019D                     	;# 
  1575  019D                     	;# 
  1576  019D                     	;# 
  1577  019E                     	;# 
  1578  019E                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  019F                     	;# 
  1582  019F                     	;# 
  1583  019F                     	;# 
  1584  019F                     	;# 
  1585  020C                     	;# 
  1586  020E                     	;# 
  1587  0211                     	;# 
  1588  0211                     	;# 
  1589  0212                     	;# 
  1590  0212                     	;# 
  1591  0213                     	;# 
  1592  0213                     	;# 
  1593  0214                     	;# 
  1594  0214                     	;# 
  1595  0215                     	;# 
  1596  0215                     	;# 
  1597  0215                     	;# 
  1598  0215                     	;# 
  1599  0216                     	;# 
  1600  0216                     	;# 
  1601  0217                     	;# 
  1602  0217                     	;# 
  1603  028C                     	;# 
  1604  028E                     	;# 
  1605  0291                     	;# 
  1606  0291                     	;# 
  1607  0292                     	;# 
  1608  0293                     	;# 
  1609  0293                     	;# 
  1610  0298                     	;# 
  1611  0298                     	;# 
  1612  0299                     	;# 
  1613  029A                     	;# 
  1614  029A                     	;# 
  1615  029E                     	;# 
  1616  030C                     	;# 
  1617  030E                     	;# 
  1618  038C                     	;# 
  1619  038E                     	;# 
  1620  0391                     	;# 
  1621  0392                     	;# 
  1622  0393                     	;# 
  1623  0397                     	;# 
  1624  0398                     	;# 
  1625  0399                     	;# 
  1626  0415                     	;# 
  1627  0416                     	;# 
  1628  0417                     	;# 
  1629  041C                     	;# 
  1630  041D                     	;# 
  1631  041E                     	;# 
  1632  0511                     	;# 
  1633  0515                     	;# 
  1634  0617                     	;# 
  1635  0618                     	;# 
  1636  0619                     	;# 
  1637  0619                     	;# 
  1638  061A                     	;# 
  1639  061B                     	;# 
  1640  061C                     	;# 
  1641  061C                     	;# 
  1642  0691                     	;# 
  1643  0692                     	;# 
  1644  0693                     	;# 
  1645  0694                     	;# 
  1646  0695                     	;# 
  1647  0696                     	;# 
  1648  0697                     	;# 
  1649  0698                     	;# 
  1650  0699                     	;# 
  1651  069A                     	;# 
  1652  069B                     	;# 
  1653  069C                     	;# 
  1654  069D                     	;# 
  1655  069E                     	;# 
  1656  069F                     	;# 
  1657  0E0F                     	;# 
  1658  0E10                     	;# 
  1659  0E11                     	;# 
  1660  0E12                     	;# 
  1661  0E13                     	;# 
  1662  0E14                     	;# 
  1663  0E15                     	;# 
  1664  0E17                     	;# 
  1665  0E20                     	;# 
  1666  0E21                     	;# 
  1667  0E22                     	;# 
  1668  0E24                     	;# 
  1669  0E25                     	;# 
  1670  0E28                     	;# 
  1671  0E29                     	;# 
  1672  0E2A                     	;# 
  1673  0E2B                     	;# 
  1674  0E90                     	;# 
  1675  0E91                     	;# 
  1676  0E92                     	;# 
  1677  0E94                     	;# 
  1678  0E95                     	;# 
  1679  0EA0                     	;# 
  1680  0EA1                     	;# 
  1681  0EA2                     	;# 
  1682  0EA3                     	;# 
  1683  0EA4                     	;# 
  1684  0EA5                     	;# 
  1685  0F0F                     	;# 
  1686  0F10                     	;# 
  1687  0F11                     	;# 
  1688  0F12                     	;# 
  1689  0F13                     	;# 
  1690  0F14                     	;# 
  1691  0F15                     	;# 
  1692  0F16                     	;# 
  1693  0F17                     	;# 
  1694  0F18                     	;# 
  1695  0F19                     	;# 
  1696  0F1A                     	;# 
  1697  0F1B                     	;# 
  1698  0F1C                     	;# 
  1699  0F1D                     	;# 
  1700  0F1E                     	;# 
  1701  0F1F                     	;# 
  1702  0F20                     	;# 
  1703  0F21                     	;# 
  1704  0F22                     	;# 
  1705  0F23                     	;# 
  1706  0F24                     	;# 
  1707  0F25                     	;# 
  1708  0F26                     	;# 
  1709  0F27                     	;# 
  1710  0F28                     	;# 
  1711  0F29                     	;# 
  1712  0F2A                     	;# 
  1713  0F2B                     	;# 
  1714  0F2C                     	;# 
  1715  0F2D                     	;# 
  1716  0F9E                     	;# 
  1717  0FE4                     	;# 
  1718  0FE5                     	;# 
  1719  0FE6                     	;# 
  1720  0FE7                     	;# 
  1721  0FE8                     	;# 
  1722  0FE9                     	;# 
  1723  0FEA                     	;# 
  1724  0FEB                     	;# 
  1725  0FED                     	;# 
  1726  0FEE                     	;# 
  1727  0FEF                     	;# 
  1728  0000                     	;# 
  1729  0001                     	;# 
  1730  0002                     	;# 
  1731  0003                     	;# 
  1732  0004                     	;# 
  1733  0005                     	;# 
  1734  0006                     	;# 
  1735  0007                     	;# 
  1736  0008                     	;# 
  1737  0009                     	;# 
  1738  000A                     	;# 
  1739  000B                     	;# 
  1740  000C                     	;# 
  1741  000E                     	;# 
  1742  0011                     	;# 
  1743  0012                     	;# 
  1744  0013                     	;# 
  1745  0015                     	;# 
  1746  0016                     	;# 
  1747  0016                     	;# 
  1748  0017                     	;# 
  1749  0018                     	;# 
  1750  0019                     	;# 
  1751  001A                     	;# 
  1752  001B                     	;# 
  1753  001C                     	;# 
  1754  008C                     	;# 
  1755  008E                     	;# 
  1756  0091                     	;# 
  1757  0092                     	;# 
  1758  0093                     	;# 
  1759  0095                     	;# 
  1760  0096                     	;# 
  1761  0097                     	;# 
  1762  0098                     	;# 
  1763  0099                     	;# 
  1764  009A                     	;# 
  1765  009B                     	;# 
  1766  009B                     	;# 
  1767  009C                     	;# 
  1768  009D                     	;# 
  1769  009E                     	;# 
  1770  009F                     	;# 
  1771  010C                     	;# 
  1772  010E                     	;# 
  1773  0111                     	;# 
  1774  0112                     	;# 
  1775  0113                     	;# 
  1776  0114                     	;# 
  1777  0115                     	;# 
  1778  0116                     	;# 
  1779  0117                     	;# 
  1780  0118                     	;# 
  1781  0119                     	;# 
  1782  011C                     	;# 
  1783  018C                     	;# 
  1784  018E                     	;# 
  1785  0191                     	;# 
  1786  0191                     	;# 
  1787  0192                     	;# 
  1788  0193                     	;# 
  1789  0193                     	;# 
  1790  0194                     	;# 
  1791  0195                     	;# 
  1792  0196                     	;# 
  1793  0197                     	;# 
  1794  0199                     	;# 
  1795  0199                     	;# 
  1796  0199                     	;# 
  1797  019A                     	;# 
  1798  019A                     	;# 
  1799  019A                     	;# 
  1800  019B                     	;# 
  1801  019B                     	;# 
  1802  019B                     	;# 
  1803  019B                     	;# 
  1804  019B                     	;# 
  1805  019C                     	;# 
  1806  019C                     	;# 
  1807  019C                     	;# 
  1808  019D                     	;# 
  1809  019D                     	;# 
  1810  019D                     	;# 
  1811  019E                     	;# 
  1812  019E                     	;# 
  1813  019E                     	;# 
  1814  019F                     	;# 
  1815  019F                     	;# 
  1816  019F                     	;# 
  1817  019F                     	;# 
  1818  019F                     	;# 
  1819  020C                     	;# 
  1820  020E                     	;# 
  1821  0211                     	;# 
  1822  0211                     	;# 
  1823  0212                     	;# 
  1824  0212                     	;# 
  1825  0213                     	;# 
  1826  0213                     	;# 
  1827  0214                     	;# 
  1828  0214                     	;# 
  1829  0215                     	;# 
  1830  0215                     	;# 
  1831  0215                     	;# 
  1832  0215                     	;# 
  1833  0216                     	;# 
  1834  0216                     	;# 
  1835  0217                     	;# 
  1836  0217                     	;# 
  1837  028C                     	;# 
  1838  028E                     	;# 
  1839  0291                     	;# 
  1840  0291                     	;# 
  1841  0292                     	;# 
  1842  0293                     	;# 
  1843  0293                     	;# 
  1844  0298                     	;# 
  1845  0298                     	;# 
  1846  0299                     	;# 
  1847  029A                     	;# 
  1848  029A                     	;# 
  1849  029E                     	;# 
  1850  030C                     	;# 
  1851  030E                     	;# 
  1852  038C                     	;# 
  1853  038E                     	;# 
  1854  0391                     	;# 
  1855  0392                     	;# 
  1856  0393                     	;# 
  1857  0397                     	;# 
  1858  0398                     	;# 
  1859  0399                     	;# 
  1860  0415                     	;# 
  1861  0416                     	;# 
  1862  0417                     	;# 
  1863  041C                     	;# 
  1864  041D                     	;# 
  1865  041E                     	;# 
  1866  0511                     	;# 
  1867  0515                     	;# 
  1868  0617                     	;# 
  1869  0618                     	;# 
  1870  0619                     	;# 
  1871  0619                     	;# 
  1872  061A                     	;# 
  1873  061B                     	;# 
  1874  061C                     	;# 
  1875  061C                     	;# 
  1876  0691                     	;# 
  1877  0692                     	;# 
  1878  0693                     	;# 
  1879  0694                     	;# 
  1880  0695                     	;# 
  1881  0696                     	;# 
  1882  0697                     	;# 
  1883  0698                     	;# 
  1884  0699                     	;# 
  1885  069A                     	;# 
  1886  069B                     	;# 
  1887  069C                     	;# 
  1888  069D                     	;# 
  1889  069E                     	;# 
  1890  069F                     	;# 
  1891  0E0F                     	;# 
  1892  0E10                     	;# 
  1893  0E11                     	;# 
  1894  0E12                     	;# 
  1895  0E13                     	;# 
  1896  0E14                     	;# 
  1897  0E15                     	;# 
  1898  0E17                     	;# 
  1899  0E20                     	;# 
  1900  0E21                     	;# 
  1901  0E22                     	;# 
  1902  0E24                     	;# 
  1903  0E25                     	;# 
  1904  0E28                     	;# 
  1905  0E29                     	;# 
  1906  0E2A                     	;# 
  1907  0E2B                     	;# 
  1908  0E90                     	;# 
  1909  0E91                     	;# 
  1910  0E92                     	;# 
  1911  0E94                     	;# 
  1912  0E95                     	;# 
  1913  0EA0                     	;# 
  1914  0EA1                     	;# 
  1915  0EA2                     	;# 
  1916  0EA3                     	;# 
  1917  0EA4                     	;# 
  1918  0EA5                     	;# 
  1919  0F0F                     	;# 
  1920  0F10                     	;# 
  1921  0F11                     	;# 
  1922  0F12                     	;# 
  1923  0F13                     	;# 
  1924  0F14                     	;# 
  1925  0F15                     	;# 
  1926  0F16                     	;# 
  1927  0F17                     	;# 
  1928  0F18                     	;# 
  1929  0F19                     	;# 
  1930  0F1A                     	;# 
  1931  0F1B                     	;# 
  1932  0F1C                     	;# 
  1933  0F1D                     	;# 
  1934  0F1E                     	;# 
  1935  0F1F                     	;# 
  1936  0F20                     	;# 
  1937  0F21                     	;# 
  1938  0F22                     	;# 
  1939  0F23                     	;# 
  1940  0F24                     	;# 
  1941  0F25                     	;# 
  1942  0F26                     	;# 
  1943  0F27                     	;# 
  1944  0F28                     	;# 
  1945  0F29                     	;# 
  1946  0F2A                     	;# 
  1947  0F2B                     	;# 
  1948  0F2C                     	;# 
  1949  0F2D                     	;# 
  1950  0F9E                     	;# 
  1951  0FE4                     	;# 
  1952  0FE5                     	;# 
  1953  0FE6                     	;# 
  1954  0FE7                     	;# 
  1955  0FE8                     	;# 
  1956  0FE9                     	;# 
  1957  0FEA                     	;# 
  1958  0FEB                     	;# 
  1959  0FED                     	;# 
  1960  0FEE                     	;# 
  1961  0FEF                     	;# 
  1962  0000                     	;# 
  1963  0001                     	;# 
  1964  0002                     	;# 
  1965  0003                     	;# 
  1966  0004                     	;# 
  1967  0005                     	;# 
  1968  0006                     	;# 
  1969  0007                     	;# 
  1970  0008                     	;# 
  1971  0009                     	;# 
  1972  000A                     	;# 
  1973  000B                     	;# 
  1974  000C                     	;# 
  1975  000E                     	;# 
  1976  0011                     	;# 
  1977  0012                     	;# 
  1978  0013                     	;# 
  1979  0015                     	;# 
  1980  0016                     	;# 
  1981  0016                     	;# 
  1982  0017                     	;# 
  1983  0018                     	;# 
  1984  0019                     	;# 
  1985  001A                     	;# 
  1986  001B                     	;# 
  1987  001C                     	;# 
  1988  008C                     	;# 
  1989  008E                     	;# 
  1990  0091                     	;# 
  1991  0092                     	;# 
  1992  0093                     	;# 
  1993  0095                     	;# 
  1994  0096                     	;# 
  1995  0097                     	;# 
  1996  0098                     	;# 
  1997  0099                     	;# 
  1998  009A                     	;# 
  1999  009B                     	;# 
  2000  009B                     	;# 
  2001  009C                     	;# 
  2002  009D                     	;# 
  2003  009E                     	;# 
  2004  009F                     	;# 
  2005  010C                     	;# 
  2006  010E                     	;# 
  2007  0111                     	;# 
  2008  0112                     	;# 
  2009  0113                     	;# 
  2010  0114                     	;# 
  2011  0115                     	;# 
  2012  0116                     	;# 
  2013  0117                     	;# 
  2014  0118                     	;# 
  2015  0119                     	;# 
  2016  011C                     	;# 
  2017  018C                     	;# 
  2018  018E                     	;# 
  2019  0191                     	;# 
  2020  0191                     	;# 
  2021  0192                     	;# 
  2022  0193                     	;# 
  2023  0193                     	;# 
  2024  0194                     	;# 
  2025  0195                     	;# 
  2026  0196                     	;# 
  2027  0197                     	;# 
  2028  0199                     	;# 
  2029  0199                     	;# 
  2030  0199                     	;# 
  2031  019A                     	;# 
  2032  019A                     	;# 
  2033  019A                     	;# 
  2034  019B                     	;# 
  2035  019B                     	;# 
  2036  019B                     	;# 
  2037  019B                     	;# 
  2038  019B                     	;# 
  2039  019C                     	;# 
  2040  019C                     	;# 
  2041  019C                     	;# 
  2042  019D                     	;# 
  2043  019D                     	;# 
  2044  019D                     	;# 
  2045  019E                     	;# 
  2046  019E                     	;# 
  2047  019E                     	;# 
  2048  019F                     	;# 
  2049  019F                     	;# 
  2050  019F                     	;# 
  2051  019F                     	;# 
  2052  019F                     	;# 
  2053  020C                     	;# 
  2054  020E                     	;# 
  2055  0211                     	;# 
  2056  0211                     	;# 
  2057  0212                     	;# 
  2058  0212                     	;# 
  2059  0213                     	;# 
  2060  0213                     	;# 
  2061  0214                     	;# 
  2062  0214                     	;# 
  2063  0215                     	;# 
  2064  0215                     	;# 
  2065  0215                     	;# 
  2066  0215                     	;# 
  2067  0216                     	;# 
  2068  0216                     	;# 
  2069  0217                     	;# 
  2070  0217                     	;# 
  2071  028C                     	;# 
  2072  028E                     	;# 
  2073  0291                     	;# 
  2074  0291                     	;# 
  2075  0292                     	;# 
  2076  0293                     	;# 
  2077  0293                     	;# 
  2078  0298                     	;# 
  2079  0298                     	;# 
  2080  0299                     	;# 
  2081  029A                     	;# 
  2082  029A                     	;# 
  2083  029E                     	;# 
  2084  030C                     	;# 
  2085  030E                     	;# 
  2086  038C                     	;# 
  2087  038E                     	;# 
  2088  0391                     	;# 
  2089  0392                     	;# 
  2090  0393                     	;# 
  2091  0397                     	;# 
  2092  0398                     	;# 
  2093  0399                     	;# 
  2094  0415                     	;# 
  2095  0416                     	;# 
  2096  0417                     	;# 
  2097  041C                     	;# 
  2098  041D                     	;# 
  2099  041E                     	;# 
  2100  0511                     	;# 
  2101  0515                     	;# 
  2102  0617                     	;# 
  2103  0618                     	;# 
  2104  0619                     	;# 
  2105  0619                     	;# 
  2106  061A                     	;# 
  2107  061B                     	;# 
  2108  061C                     	;# 
  2109  061C                     	;# 
  2110  0691                     	;# 
  2111  0692                     	;# 
  2112  0693                     	;# 
  2113  0694                     	;# 
  2114  0695                     	;# 
  2115  0696                     	;# 
  2116  0697                     	;# 
  2117  0698                     	;# 
  2118  0699                     	;# 
  2119  069A                     	;# 
  2120  069B                     	;# 
  2121  069C                     	;# 
  2122  069D                     	;# 
  2123  069E                     	;# 
  2124  069F                     	;# 
  2125  0E0F                     	;# 
  2126  0E10                     	;# 
  2127  0E11                     	;# 
  2128  0E12                     	;# 
  2129  0E13                     	;# 
  2130  0E14                     	;# 
  2131  0E15                     	;# 
  2132  0E17                     	;# 
  2133  0E20                     	;# 
  2134  0E21                     	;# 
  2135  0E22                     	;# 
  2136  0E24                     	;# 
  2137  0E25                     	;# 
  2138  0E28                     	;# 
  2139  0E29                     	;# 
  2140  0E2A                     	;# 
  2141  0E2B                     	;# 
  2142  0E90                     	;# 
  2143  0E91                     	;# 
  2144  0E92                     	;# 
  2145  0E94                     	;# 
  2146  0E95                     	;# 
  2147  0EA0                     	;# 
  2148  0EA1                     	;# 
  2149  0EA2                     	;# 
  2150  0EA3                     	;# 
  2151  0EA4                     	;# 
  2152  0EA5                     	;# 
  2153  0F0F                     	;# 
  2154  0F10                     	;# 
  2155  0F11                     	;# 
  2156  0F12                     	;# 
  2157  0F13                     	;# 
  2158  0F14                     	;# 
  2159  0F15                     	;# 
  2160  0F16                     	;# 
  2161  0F17                     	;# 
  2162  0F18                     	;# 
  2163  0F19                     	;# 
  2164  0F1A                     	;# 
  2165  0F1B                     	;# 
  2166  0F1C                     	;# 
  2167  0F1D                     	;# 
  2168  0F1E                     	;# 
  2169  0F1F                     	;# 
  2170  0F20                     	;# 
  2171  0F21                     	;# 
  2172  0F22                     	;# 
  2173  0F23                     	;# 
  2174  0F24                     	;# 
  2175  0F25                     	;# 
  2176  0F26                     	;# 
  2177  0F27                     	;# 
  2178  0F28                     	;# 
  2179  0F29                     	;# 
  2180  0F2A                     	;# 
  2181  0F2B                     	;# 
  2182  0F2C                     	;# 
  2183  0F2D                     	;# 
  2184  0F9E                     	;# 
  2185  0FE4                     	;# 
  2186  0FE5                     	;# 
  2187  0FE6                     	;# 
  2188  0FE7                     	;# 
  2189  0FE8                     	;# 
  2190  0FE9                     	;# 
  2191  0FEA                     	;# 
  2192  0FEB                     	;# 
  2193  0FED                     	;# 
  2194  0FEE                     	;# 
  2195  0FEF                     	;# 
  2196  0000                     	;# 
  2197  0001                     	;# 
  2198  0002                     	;# 
  2199  0003                     	;# 
  2200  0004                     	;# 
  2201  0005                     	;# 
  2202  0006                     	;# 
  2203  0007                     	;# 
  2204  0008                     	;# 
  2205  0009                     	;# 
  2206  000A                     	;# 
  2207  000B                     	;# 
  2208  000C                     	;# 
  2209  000E                     	;# 
  2210  0011                     	;# 
  2211  0012                     	;# 
  2212  0013                     	;# 
  2213  0015                     	;# 
  2214  0016                     	;# 
  2215  0016                     	;# 
  2216  0017                     	;# 
  2217  0018                     	;# 
  2218  0019                     	;# 
  2219  001A                     	;# 
  2220  001B                     	;# 
  2221  001C                     	;# 
  2222  008C                     	;# 
  2223  008E                     	;# 
  2224  0091                     	;# 
  2225  0092                     	;# 
  2226  0093                     	;# 
  2227  0095                     	;# 
  2228  0096                     	;# 
  2229  0097                     	;# 
  2230  0098                     	;# 
  2231  0099                     	;# 
  2232  009A                     	;# 
  2233  009B                     	;# 
  2234  009B                     	;# 
  2235  009C                     	;# 
  2236  009D                     	;# 
  2237  009E                     	;# 
  2238  009F                     	;# 
  2239  010C                     	;# 
  2240  010E                     	;# 
  2241  0111                     	;# 
  2242  0112                     	;# 
  2243  0113                     	;# 
  2244  0114                     	;# 
  2245  0115                     	;# 
  2246  0116                     	;# 
  2247  0117                     	;# 
  2248  0118                     	;# 
  2249  0119                     	;# 
  2250  011C                     	;# 
  2251  018C                     	;# 
  2252  018E                     	;# 
  2253  0191                     	;# 
  2254  0191                     	;# 
  2255  0192                     	;# 
  2256  0193                     	;# 
  2257  0193                     	;# 
  2258  0194                     	;# 
  2259  0195                     	;# 
  2260  0196                     	;# 
  2261  0197                     	;# 
  2262  0199                     	;# 
  2263  0199                     	;# 
  2264  0199                     	;# 
  2265  019A                     	;# 
  2266  019A                     	;# 
  2267  019A                     	;# 
  2268  019B                     	;# 
  2269  019B                     	;# 
  2270  019B                     	;# 
  2271  019B                     	;# 
  2272  019B                     	;# 
  2273  019C                     	;# 
  2274  019C                     	;# 
  2275  019C                     	;# 
  2276  019D                     	;# 
  2277  019D                     	;# 
  2278  019D                     	;# 
  2279  019E                     	;# 
  2280  019E                     	;# 
  2281  019E                     	;# 
  2282  019F                     	;# 
  2283  019F                     	;# 
  2284  019F                     	;# 
  2285  019F                     	;# 
  2286  019F                     	;# 
  2287  020C                     	;# 
  2288  020E                     	;# 
  2289  0211                     	;# 
  2290  0211                     	;# 
  2291  0212                     	;# 
  2292  0212                     	;# 
  2293  0213                     	;# 
  2294  0213                     	;# 
  2295  0214                     	;# 
  2296  0214                     	;# 
  2297  0215                     	;# 
  2298  0215                     	;# 
  2299  0215                     	;# 
  2300  0215                     	;# 
  2301  0216                     	;# 
  2302  0216                     	;# 
  2303  0217                     	;# 
  2304  0217                     	;# 
  2305  028C                     	;# 
  2306  028E                     	;# 
  2307  0291                     	;# 
  2308  0291                     	;# 
  2309  0292                     	;# 
  2310  0293                     	;# 
  2311  0293                     	;# 
  2312  0298                     	;# 
  2313  0298                     	;# 
  2314  0299                     	;# 
  2315  029A                     	;# 
  2316  029A                     	;# 
  2317  029E                     	;# 
  2318  030C                     	;# 
  2319  030E                     	;# 
  2320  038C                     	;# 
  2321  038E                     	;# 
  2322  0391                     	;# 
  2323  0392                     	;# 
  2324  0393                     	;# 
  2325  0397                     	;# 
  2326  0398                     	;# 
  2327  0399                     	;# 
  2328  0415                     	;# 
  2329  0416                     	;# 
  2330  0417                     	;# 
  2331  041C                     	;# 
  2332  041D                     	;# 
  2333  041E                     	;# 
  2334  0511                     	;# 
  2335  0515                     	;# 
  2336  0617                     	;# 
  2337  0618                     	;# 
  2338  0619                     	;# 
  2339  0619                     	;# 
  2340  061A                     	;# 
  2341  061B                     	;# 
  2342  061C                     	;# 
  2343  061C                     	;# 
  2344  0691                     	;# 
  2345  0692                     	;# 
  2346  0693                     	;# 
  2347  0694                     	;# 
  2348  0695                     	;# 
  2349  0696                     	;# 
  2350  0697                     	;# 
  2351  0698                     	;# 
  2352  0699                     	;# 
  2353  069A                     	;# 
  2354  069B                     	;# 
  2355  069C                     	;# 
  2356  069D                     	;# 
  2357  069E                     	;# 
  2358  069F                     	;# 
  2359  0E0F                     	;# 
  2360  0E10                     	;# 
  2361  0E11                     	;# 
  2362  0E12                     	;# 
  2363  0E13                     	;# 
  2364  0E14                     	;# 
  2365  0E15                     	;# 
  2366  0E17                     	;# 
  2367  0E20                     	;# 
  2368  0E21                     	;# 
  2369  0E22                     	;# 
  2370  0E24                     	;# 
  2371  0E25                     	;# 
  2372  0E28                     	;# 
  2373  0E29                     	;# 
  2374  0E2A                     	;# 
  2375  0E2B                     	;# 
  2376  0E90                     	;# 
  2377  0E91                     	;# 
  2378  0E92                     	;# 
  2379  0E94                     	;# 
  2380  0E95                     	;# 
  2381  0EA0                     	;# 
  2382  0EA1                     	;# 
  2383  0EA2                     	;# 
  2384  0EA3                     	;# 
  2385  0EA4                     	;# 
  2386  0EA5                     	;# 
  2387  0F0F                     	;# 
  2388  0F10                     	;# 
  2389  0F11                     	;# 
  2390  0F12                     	;# 
  2391  0F13                     	;# 
  2392  0F14                     	;# 
  2393  0F15                     	;# 
  2394  0F16                     	;# 
  2395  0F17                     	;# 
  2396  0F18                     	;# 
  2397  0F19                     	;# 
  2398  0F1A                     	;# 
  2399  0F1B                     	;# 
  2400  0F1C                     	;# 
  2401  0F1D                     	;# 
  2402  0F1E                     	;# 
  2403  0F1F                     	;# 
  2404  0F20                     	;# 
  2405  0F21                     	;# 
  2406  0F22                     	;# 
  2407  0F23                     	;# 
  2408  0F24                     	;# 
  2409  0F25                     	;# 
  2410  0F26                     	;# 
  2411  0F27                     	;# 
  2412  0F28                     	;# 
  2413  0F29                     	;# 
  2414  0F2A                     	;# 
  2415  0F2B                     	;# 
  2416  0F2C                     	;# 
  2417  0F2D                     	;# 
  2418  0F9E                     	;# 
  2419  0FE4                     	;# 
  2420  0FE5                     	;# 
  2421  0FE6                     	;# 
  2422  0FE7                     	;# 
  2423  0FE8                     	;# 
  2424  0FE9                     	;# 
  2425  0FEA                     	;# 
  2426  0FEB                     	;# 
  2427  0FED                     	;# 
  2428  0FEE                     	;# 
  2429  0FEF                     	;# 
  2430  0000                     	;# 
  2431  0001                     	;# 
  2432  0002                     	;# 
  2433  0003                     	;# 
  2434  0004                     	;# 
  2435  0005                     	;# 
  2436  0006                     	;# 
  2437  0007                     	;# 
  2438  0008                     	;# 
  2439  0009                     	;# 
  2440  000A                     	;# 
  2441  000B                     	;# 
  2442  000C                     	;# 
  2443  000E                     	;# 
  2444  0011                     	;# 
  2445  0012                     	;# 
  2446  0013                     	;# 
  2447  0015                     	;# 
  2448  0016                     	;# 
  2449  0016                     	;# 
  2450  0017                     	;# 
  2451  0018                     	;# 
  2452  0019                     	;# 
  2453  001A                     	;# 
  2454  001B                     	;# 
  2455  001C                     	;# 
  2456  008C                     	;# 
  2457  008E                     	;# 
  2458  0091                     	;# 
  2459  0092                     	;# 
  2460  0093                     	;# 
  2461  0095                     	;# 
  2462  0096                     	;# 
  2463  0097                     	;# 
  2464  0098                     	;# 
  2465  0099                     	;# 
  2466  009A                     	;# 
  2467  009B                     	;# 
  2468  009B                     	;# 
  2469  009C                     	;# 
  2470  009D                     	;# 
  2471  009E                     	;# 
  2472  009F                     	;# 
  2473  010C                     	;# 
  2474  010E                     	;# 
  2475  0111                     	;# 
  2476  0112                     	;# 
  2477  0113                     	;# 
  2478  0114                     	;# 
  2479  0115                     	;# 
  2480  0116                     	;# 
  2481  0117                     	;# 
  2482  0118                     	;# 
  2483  0119                     	;# 
  2484  011C                     	;# 
  2485  018C                     	;# 
  2486  018E                     	;# 
  2487  0191                     	;# 
  2488  0191                     	;# 
  2489  0192                     	;# 
  2490  0193                     	;# 
  2491  0193                     	;# 
  2492  0194                     	;# 
  2493  0195                     	;# 
  2494  0196                     	;# 
  2495  0197                     	;# 
  2496  0199                     	;# 
  2497  0199                     	;# 
  2498  0199                     	;# 
  2499  019A                     	;# 
  2500  019A                     	;# 
  2501  019A                     	;# 
  2502  019B                     	;# 
  2503  019B                     	;# 
  2504  019B                     	;# 
  2505  019B                     	;# 
  2506  019B                     	;# 
  2507  019C                     	;# 
  2508  019C                     	;# 
  2509  019C                     	;# 
  2510  019D                     	;# 
  2511  019D                     	;# 
  2512  019D                     	;# 
  2513  019E                     	;# 
  2514  019E                     	;# 
  2515  019E                     	;# 
  2516  019F                     	;# 
  2517  019F                     	;# 
  2518  019F                     	;# 
  2519  019F                     	;# 
  2520  019F                     	;# 
  2521  020C                     	;# 
  2522  020E                     	;# 
  2523  0211                     	;# 
  2524  0211                     	;# 
  2525  0212                     	;# 
  2526  0212                     	;# 
  2527  0213                     	;# 
  2528  0213                     	;# 
  2529  0214                     	;# 
  2530  0214                     	;# 
  2531  0215                     	;# 
  2532  0215                     	;# 
  2533  0215                     	;# 
  2534  0215                     	;# 
  2535  0216                     	;# 
  2536  0216                     	;# 
  2537  0217                     	;# 
  2538  0217                     	;# 
  2539  028C                     	;# 
  2540  028E                     	;# 
  2541  0291                     	;# 
  2542  0291                     	;# 
  2543  0292                     	;# 
  2544  0293                     	;# 
  2545  0293                     	;# 
  2546  0298                     	;# 
  2547  0298                     	;# 
  2548  0299                     	;# 
  2549  029A                     	;# 
  2550  029A                     	;# 
  2551  029E                     	;# 
  2552  030C                     	;# 
  2553  030E                     	;# 
  2554  038C                     	;# 
  2555  038E                     	;# 
  2556  0391                     	;# 
  2557  0392                     	;# 
  2558  0393                     	;# 
  2559  0397                     	;# 
  2560  0398                     	;# 
  2561  0399                     	;# 
  2562  0415                     	;# 
  2563  0416                     	;# 
  2564  0417                     	;# 
  2565  041C                     	;# 
  2566  041D                     	;# 
  2567  041E                     	;# 
  2568  0511                     	;# 
  2569  0515                     	;# 
  2570  0617                     	;# 
  2571  0618                     	;# 
  2572  0619                     	;# 
  2573  0619                     	;# 
  2574  061A                     	;# 
  2575  061B                     	;# 
  2576  061C                     	;# 
  2577  061C                     	;# 
  2578  0691                     	;# 
  2579  0692                     	;# 
  2580  0693                     	;# 
  2581  0694                     	;# 
  2582  0695                     	;# 
  2583  0696                     	;# 
  2584  0697                     	;# 
  2585  0698                     	;# 
  2586  0699                     	;# 
  2587  069A                     	;# 
  2588  069B                     	;# 
  2589  069C                     	;# 
  2590  069D                     	;# 
  2591  069E                     	;# 
  2592  069F                     	;# 
  2593  0E0F                     	;# 
  2594  0E10                     	;# 
  2595  0E11                     	;# 
  2596  0E12                     	;# 
  2597  0E13                     	;# 
  2598  0E14                     	;# 
  2599  0E15                     	;# 
  2600  0E17                     	;# 
  2601  0E20                     	;# 
  2602  0E21                     	;# 
  2603  0E22                     	;# 
  2604  0E24                     	;# 
  2605  0E25                     	;# 
  2606  0E28                     	;# 
  2607  0E29                     	;# 
  2608  0E2A                     	;# 
  2609  0E2B                     	;# 
  2610  0E90                     	;# 
  2611  0E91                     	;# 
  2612  0E92                     	;# 
  2613  0E94                     	;# 
  2614  0E95                     	;# 
  2615  0EA0                     	;# 
  2616  0EA1                     	;# 
  2617  0EA2                     	;# 
  2618  0EA3                     	;# 
  2619  0EA4                     	;# 
  2620  0EA5                     	;# 
  2621  0F0F                     	;# 
  2622  0F10                     	;# 
  2623  0F11                     	;# 
  2624  0F12                     	;# 
  2625  0F13                     	;# 
  2626  0F14                     	;# 
  2627  0F15                     	;# 
  2628  0F16                     	;# 
  2629  0F17                     	;# 
  2630  0F18                     	;# 
  2631  0F19                     	;# 
  2632  0F1A                     	;# 
  2633  0F1B                     	;# 
  2634  0F1C                     	;# 
  2635  0F1D                     	;# 
  2636  0F1E                     	;# 
  2637  0F1F                     	;# 
  2638  0F20                     	;# 
  2639  0F21                     	;# 
  2640  0F22                     	;# 
  2641  0F23                     	;# 
  2642  0F24                     	;# 
  2643  0F25                     	;# 
  2644  0F26                     	;# 
  2645  0F27                     	;# 
  2646  0F28                     	;# 
  2647  0F29                     	;# 
  2648  0F2A                     	;# 
  2649  0F2B                     	;# 
  2650  0F2C                     	;# 
  2651  0F2D                     	;# 
  2652  0F9E                     	;# 
  2653  0FE4                     	;# 
  2654  0FE5                     	;# 
  2655  0FE6                     	;# 
  2656  0FE7                     	;# 
  2657  0FE8                     	;# 
  2658  0FE9                     	;# 
  2659  0FEA                     	;# 
  2660  0FEB                     	;# 
  2661  0FED                     	;# 
  2662  0FEE                     	;# 
  2663  0FEF                     	;# 
  2664  0000                     	;# 
  2665  0001                     	;# 
  2666  0002                     	;# 
  2667  0003                     	;# 
  2668  0004                     	;# 
  2669  0005                     	;# 
  2670  0006                     	;# 
  2671  0007                     	;# 
  2672  0008                     	;# 
  2673  0009                     	;# 
  2674  000A                     	;# 
  2675  000B                     	;# 
  2676  000C                     	;# 
  2677  000E                     	;# 
  2678  0011                     	;# 
  2679  0012                     	;# 
  2680  0013                     	;# 
  2681  0015                     	;# 
  2682  0016                     	;# 
  2683  0016                     	;# 
  2684  0017                     	;# 
  2685  0018                     	;# 
  2686  0019                     	;# 
  2687  001A                     	;# 
  2688  001B                     	;# 
  2689  001C                     	;# 
  2690  008C                     	;# 
  2691  008E                     	;# 
  2692  0091                     	;# 
  2693  0092                     	;# 
  2694  0093                     	;# 
  2695  0095                     	;# 
  2696  0096                     	;# 
  2697  0097                     	;# 
  2698  0098                     	;# 
  2699  0099                     	;# 
  2700  009A                     	;# 
  2701  009B                     	;# 
  2702  009B                     	;# 
  2703  009C                     	;# 
  2704  009D                     	;# 
  2705  009E                     	;# 
  2706  009F                     	;# 
  2707  010C                     	;# 
  2708  010E                     	;# 
  2709  0111                     	;# 
  2710  0112                     	;# 
  2711  0113                     	;# 
  2712  0114                     	;# 
  2713  0115                     	;# 
  2714  0116                     	;# 
  2715  0117                     	;# 
  2716  0118                     	;# 
  2717  0119                     	;# 
  2718  011C                     	;# 
  2719  018C                     	;# 
  2720  018E                     	;# 
  2721  0191                     	;# 
  2722  0191                     	;# 
  2723  0192                     	;# 
  2724  0193                     	;# 
  2725  0193                     	;# 
  2726  0194                     	;# 
  2727  0195                     	;# 
  2728  0196                     	;# 
  2729  0197                     	;# 
  2730  0199                     	;# 
  2731  0199                     	;# 
  2732  0199                     	;# 
  2733  019A                     	;# 
  2734  019A                     	;# 
  2735  019A                     	;# 
  2736  019B                     	;# 
  2737  019B                     	;# 
  2738  019B                     	;# 
  2739  019B                     	;# 
  2740  019B                     	;# 
  2741  019C                     	;# 
  2742  019C                     	;# 
  2743  019C                     	;# 
  2744  019D                     	;# 
  2745  019D                     	;# 
  2746  019D                     	;# 
  2747  019E                     	;# 
  2748  019E                     	;# 
  2749  019E                     	;# 
  2750  019F                     	;# 
  2751  019F                     	;# 
  2752  019F                     	;# 
  2753  019F                     	;# 
  2754  019F                     	;# 
  2755  020C                     	;# 
  2756  020E                     	;# 
  2757  0211                     	;# 
  2758  0211                     	;# 
  2759  0212                     	;# 
  2760  0212                     	;# 
  2761  0213                     	;# 
  2762  0213                     	;# 
  2763  0214                     	;# 
  2764  0214                     	;# 
  2765  0215                     	;# 
  2766  0215                     	;# 
  2767  0215                     	;# 
  2768  0215                     	;# 
  2769  0216                     	;# 
  2770  0216                     	;# 
  2771  0217                     	;# 
  2772  0217                     	;# 
  2773  028C                     	;# 
  2774  028E                     	;# 
  2775  0291                     	;# 
  2776  0291                     	;# 
  2777  0292                     	;# 
  2778  0293                     	;# 
  2779  0293                     	;# 
  2780  0298                     	;# 
  2781  0298                     	;# 
  2782  0299                     	;# 
  2783  029A                     	;# 
  2784  029A                     	;# 
  2785  029E                     	;# 
  2786  030C                     	;# 
  2787  030E                     	;# 
  2788  038C                     	;# 
  2789  038E                     	;# 
  2790  0391                     	;# 
  2791  0392                     	;# 
  2792  0393                     	;# 
  2793  0397                     	;# 
  2794  0398                     	;# 
  2795  0399                     	;# 
  2796  0415                     	;# 
  2797  0416                     	;# 
  2798  0417                     	;# 
  2799  041C                     	;# 
  2800  041D                     	;# 
  2801  041E                     	;# 
  2802  0511                     	;# 
  2803  0515                     	;# 
  2804  0617                     	;# 
  2805  0618                     	;# 
  2806  0619                     	;# 
  2807  0619                     	;# 
  2808  061A                     	;# 
  2809  061B                     	;# 
  2810  061C                     	;# 
  2811  061C                     	;# 
  2812  0691                     	;# 
  2813  0692                     	;# 
  2814  0693                     	;# 
  2815  0694                     	;# 
  2816  0695                     	;# 
  2817  0696                     	;# 
  2818  0697                     	;# 
  2819  0698                     	;# 
  2820  0699                     	;# 
  2821  069A                     	;# 
  2822  069B                     	;# 
  2823  069C                     	;# 
  2824  069D                     	;# 
  2825  069E                     	;# 
  2826  069F                     	;# 
  2827  0E0F                     	;# 
  2828  0E10                     	;# 
  2829  0E11                     	;# 
  2830  0E12                     	;# 
  2831  0E13                     	;# 
  2832  0E14                     	;# 
  2833  0E15                     	;# 
  2834  0E17                     	;# 
  2835  0E20                     	;# 
  2836  0E21                     	;# 
  2837  0E22                     	;# 
  2838  0E24                     	;# 
  2839  0E25                     	;# 
  2840  0E28                     	;# 
  2841  0E29                     	;# 
  2842  0E2A                     	;# 
  2843  0E2B                     	;# 
  2844  0E90                     	;# 
  2845  0E91                     	;# 
  2846  0E92                     	;# 
  2847  0E94                     	;# 
  2848  0E95                     	;# 
  2849  0EA0                     	;# 
  2850  0EA1                     	;# 
  2851  0EA2                     	;# 
  2852  0EA3                     	;# 
  2853  0EA4                     	;# 
  2854  0EA5                     	;# 
  2855  0F0F                     	;# 
  2856  0F10                     	;# 
  2857  0F11                     	;# 
  2858  0F12                     	;# 
  2859  0F13                     	;# 
  2860  0F14                     	;# 
  2861  0F15                     	;# 
  2862  0F16                     	;# 
  2863  0F17                     	;# 
  2864  0F18                     	;# 
  2865  0F19                     	;# 
  2866  0F1A                     	;# 
  2867  0F1B                     	;# 
  2868  0F1C                     	;# 
  2869  0F1D                     	;# 
  2870  0F1E                     	;# 
  2871  0F1F                     	;# 
  2872  0F20                     	;# 
  2873  0F21                     	;# 
  2874  0F22                     	;# 
  2875  0F23                     	;# 
  2876  0F24                     	;# 
  2877  0F25                     	;# 
  2878  0F26                     	;# 
  2879  0F27                     	;# 
  2880  0F28                     	;# 
  2881  0F29                     	;# 
  2882  0F2A                     	;# 
  2883  0F2B                     	;# 
  2884  0F2C                     	;# 
  2885  0F2D                     	;# 
  2886  0F9E                     	;# 
  2887  0FE4                     	;# 
  2888  0FE5                     	;# 
  2889  0FE6                     	;# 
  2890  0FE7                     	;# 
  2891  0FE8                     	;# 
  2892  0FE9                     	;# 
  2893  0FEA                     	;# 
  2894  0FEB                     	;# 
  2895  0FED                     	;# 
  2896  0FEE                     	;# 
  2897  0FEF                     	;_envelopeTable
  2898                           
  2899                           	psect	idataBANK1
  2900  0AE1                     __pidataBANK1:	
  2901                           
  2902                           ;initializer for _Button_StateMachine
  2903  0AE1  343F               	retlw	low _Button_State_Initializing
  2904  0AE2  3406               	retlw	high _Button_State_Initializing
  2905  0AE3  34BB               	retlw	low _Button_State_NotPressed
  2906  0AE4  3406               	retlw	high _Button_State_NotPressed
  2907  0AE5  3406               	retlw	low _Button_State_Pressed
  2908  0AE6  3406               	retlw	high _Button_State_Pressed
  2909                           
  2910                           ;initializer for _Sensor_scanB
  2911  0AE7  345D               	retlw	low _MTOUCH_CVD_ScanB_0
  2912  0AE8  340B               	retlw	high _MTOUCH_CVD_ScanB_0
  2913                           
  2914                           ;initializer for _Sensor_scanA
  2915  0AE9  341D               	retlw	low _MTOUCH_CVD_ScanA_0
  2916  0AEA  340B               	retlw	high _MTOUCH_CVD_ScanA_0
  2917                           
  2918                           ;initializer for _mtouch_sensor
  2919  0AEB  3400               	retlw	0
  2920  0AEC  341D               	retlw	low _MTOUCH_CVD_ScanA_0
  2921  0AED  340B               	retlw	high _MTOUCH_CVD_ScanA_0
  2922  0AEE  345D               	retlw	low _MTOUCH_CVD_ScanB_0
  2923  0AEF  340B               	retlw	high _MTOUCH_CVD_ScanB_0
  2924  0AF0  3420               	retlw	32
  2925  0AF1  3400               	retlw	0
  2926  0AF2  3400               	retlw	0
  2927  0AF3  3400               	retlw	0
  2928  0AF4  3401               	retlw	1
  2929  0AF5  34FD               	retlw	low _MTOUCH_CVD_ScanA_1
  2930  0AF6  340A               	retlw	high _MTOUCH_CVD_ScanA_1
  2931  0AF7  343D               	retlw	low _MTOUCH_CVD_ScanB_1
  2932  0AF8  340B               	retlw	high _MTOUCH_CVD_ScanB_1
  2933  0AF9  3420               	retlw	32
  2934  0AFA  3400               	retlw	0
  2935  0AFB  3400               	retlw	0
  2936  0AFC  3400               	retlw	0
  2937                           
  2938                           	psect	idataBANK2
  2939  0C04                     __pidataBANK2:	
  2940                           
  2941                           ;initializer for _scale
  2942  0C04  3403               	retlw	3
  2943  0C05  3405               	retlw	5
  2944  0C06  3408               	retlw	8
  2945  0C07  340A               	retlw	10
  2946  0C08  340C               	retlw	12
  2947  0C09  340F               	retlw	15
  2948  0C0A  3411               	retlw	17
  2949  0C0B  3414               	retlw	20
  2950  0C0C  3416               	retlw	22
  2951  0C0D  3418               	retlw	24
  2952  0C0E  341B               	retlw	27
  2953  0C0F  341D               	retlw	29
  2954  0C10  3420               	retlw	32
  2955  0C11  3422               	retlw	34
  2956  0C12  3424               	retlw	36
  2957  0C13  3427               	retlw	39
  2958  0C14  3429               	retlw	41
  2959  0C15  342C               	retlw	44
  2960  0C16  342E               	retlw	46
  2961  0C17  3430               	retlw	48
  2962  0C18  3433               	retlw	51
  2963  0C19  3435               	retlw	53
  2964  0C1A  3438               	retlw	56
  2965  0C1B  343A               	retlw	58
  2966                           
  2967                           ;initializer for _scaleLow
  2968  0C1C  3400               	retlw	0
  2969  0C1D  34AC               	retlw	172
  2970  0C1E  341A               	retlw	26
  2971  0C1F  34BC               	retlw	188
  2972  0C20  3495               	retlw	149
  2973  0C21  34A9               	retlw	169
  2974  0C22  34FC               	retlw	252
  2975  0C23  348F               	retlw	143
  2976  0C24  3469               	retlw	105
  2977  0C25  348C               	retlw	140
  2978  0C26  34FE               	retlw	254
  2979  0C27  34C2               	retlw	194
  2980  0C28  34DF               	retlw	223
  2981                           
  2982                           ;initializer for _scaleHigh
  2983  0C29  3400               	retlw	0
  2984  0C2A  3439               	retlw	57
  2985  0C2B  343D               	retlw	61
  2986  0C2C  3440               	retlw	64
  2987  0C2D  3444               	retlw	68
  2988  0C2E  3448               	retlw	72
  2989  0C2F  3451               	retlw	81
  2990  0C30  3456               	retlw	86
  2991  0C31  345B               	retlw	91
  2992  0C32  3460               	retlw	96
  2993  0C33  3466               	retlw	102
  2994  0C34  346C               	retlw	108
  2995  0C35  3400               	retlw	0
  2996                           
  2997                           	psect	idataBANK3
  2998  07B3                     __pidataBANK3:	
  2999                           
  3000                           ;initializer for _onkai_d
  3001  07B3  3402               	retlw	2
  3002  07B4  3402               	retlw	2
  3003  07B5  3402               	retlw	2
  3004  07B6  3402               	retlw	2
  3005  07B7  3402               	retlw	2
  3006  07B8  3402               	retlw	2
  3007  07B9  3402               	retlw	2
  3008  07BA  3403               	retlw	3
  3009  07BB  3403               	retlw	3
  3010  07BC  3403               	retlw	3
  3011  07BD  3403               	retlw	3
  3012  07BE  3403               	retlw	3
  3013  07BF  3404               	retlw	4
  3014  07C0  3404               	retlw	4
  3015  07C1  3404               	retlw	4
  3016  07C2  3404               	retlw	4
  3017  07C3  3405               	retlw	5
  3018  07C4  3405               	retlw	5
  3019  07C5  3405               	retlw	5
  3020  07C6  3406               	retlw	6
  3021  07C7  3406               	retlw	6
  3022  07C8  3406               	retlw	6
  3023  07C9  3407               	retlw	7
  3024  07CA  3407               	retlw	7
  3025  07CB  3408               	retlw	8
  3026  07CC  3408               	retlw	8
  3027  07CD  3409               	retlw	9
  3028  07CE  3409               	retlw	9
  3029  07CF  340A               	retlw	10
  3030  07D0  340A               	retlw	10
  3031  07D1  340B               	retlw	11
  3032  07D2  340C               	retlw	12
  3033  07D3  340C               	retlw	12
  3034  07D4  340D               	retlw	13
  3035  07D5  340E               	retlw	14
  3036  07D6  340F               	retlw	15
  3037  07D7  3410               	retlw	16
  3038  07D8  3411               	retlw	17
  3039  07D9  3412               	retlw	18
  3040  07DA  3413               	retlw	19
  3041  07DB  3414               	retlw	20
  3042  07DC  3415               	retlw	21
  3043  07DD  3416               	retlw	22
  3044  07DE  3418               	retlw	24
  3045  07DF  3419               	retlw	25
  3046  07E0  341B               	retlw	27
  3047  07E1  341C               	retlw	28
  3048  07E2  341E               	retlw	30
  3049  07E3  3420               	retlw	32
  3050  07E4  3422               	retlw	34
  3051  07E5  3424               	retlw	36
  3052  07E6  3426               	retlw	38
  3053  07E7  3428               	retlw	40
  3054  07E8  342B               	retlw	43
  3055  07E9  342D               	retlw	45
  3056  07EA  3430               	retlw	48
  3057  07EB  3433               	retlw	51
  3058  07EC  3436               	retlw	54
  3059  07ED  3439               	retlw	57
  3060  07EE  343D               	retlw	61
  3061  07EF  3440               	retlw	64
  3062  07F0  3444               	retlw	68
  3063  07F1  3448               	retlw	72
  3064  07F2  344C               	retlw	76
  3065  07F3  3451               	retlw	81
  3066  07F4  3456               	retlw	86
  3067  07F5  345B               	retlw	91
  3068  07F6  3460               	retlw	96
  3069  07F7  3466               	retlw	102
  3070  07F8  346C               	retlw	108
  3071  07F9  3473               	retlw	115
  3072  07FA  347A               	retlw	122
  3073  07FB  3481               	retlw	129
  3074  07FC  3489               	retlw	137
  3075                           
  3076                           	psect	idataBANK4
  3077  0C36                     __pidataBANK4:	
  3078                           
  3079                           ;initializer for _onkai_f
  3080  0C36  3406               	retlw	6
  3081  0C37  3425               	retlw	37
  3082  0C38  3446               	retlw	70
  3083  0C39  3468               	retlw	104
  3084  0C3A  348D               	retlw	141
  3085  0C3B  34B4               	retlw	180
  3086  0C3C  34DD               	retlw	221
  3087  0C3D  3408               	retlw	8
  3088  0C3E  3437               	retlw	55
  3089  0C3F  3467               	retlw	103
  3090  0C40  349B               	retlw	155
  3091  0C41  34D2               	retlw	210
  3092  0C42  340C               	retlw	12
  3093  0C43  344A               	retlw	74
  3094  0C44  348B               	retlw	139
  3095  0C45  34D0               	retlw	208
  3096  0C46  3419               	retlw	25
  3097  0C47  3467               	retlw	103
  3098  0C48  34B9               	retlw	185
  3099  0C49  3410               	retlw	16
  3100  0C4A  346D               	retlw	109
  3101  0C4B  34CE               	retlw	206
  3102  0C4C  3436               	retlw	54
  3103  0C4D  34A4               	retlw	164
  3104  0C4E  3418               	retlw	24
  3105  0C4F  3493               	retlw	147
  3106  0C50  3416               	retlw	22
  3107  0C51  34A0               	retlw	160
  3108  0C52  3432               	retlw	50
  3109  0C53  34CE               	retlw	206
  3110  0C54  3472               	retlw	114
  3111  0C55  3420               	retlw	32
  3112  0C56  34D9               	retlw	217
  3113  0C57  349C               	retlw	156
  3114  0C58  346B               	retlw	107
  3115  0C59  3447               	retlw	71
  3116  0C5A  342F               	retlw	47
  3117  0C5B  3426               	retlw	38
  3118  0C5C  342B               	retlw	43
  3119  0C5D  343F               	retlw	63
  3120  0C5E  3464               	retlw	100
  3121  0C5F  349B               	retlw	155
  3122  0C60  34E4               	retlw	228
  3123  0C61  3440               	retlw	64
  3124  0C62  34B1               	retlw	177
  3125  0C63  3438               	retlw	56
  3126  0C64  34D6               	retlw	214
  3127  0C65  348D               	retlw	141
  3128  0C66  345E               	retlw	94
  3129  0C67  344B               	retlw	75
  3130  0C68  3455               	retlw	85
  3131  0C69  347E               	retlw	126
  3132  0C6A  34C8               	retlw	200
  3133  0C6B  3435               	retlw	53
  3134  0C6C  34C7               	retlw	199
  3135  0C6D  347F               	retlw	127
  3136  0C6E  3462               	retlw	98
  3137  0C6F  3470               	retlw	112
  3138  0C70  34AC               	retlw	172
  3139  0C71  341A               	retlw	26
  3140  0C72  34BC               	retlw	188
  3141  0C73  3496               	retlw	150
  3142  0C74  34AA               	retlw	170
  3143  0C75  34FC               	retlw	252
  3144  0C76  3490               	retlw	144
  3145  0C77  3469               	retlw	105
  3146  0C78  348D               	retlw	141
  3147  0C79  34FE               	retlw	254
  3148  0C7A  34C3               	retlw	195
  3149  0C7B  34DF               	retlw	223
  3150  0C7C  3458               	retlw	88
  3151  0C7D  3434               	retlw	52
  3152  0C7E  3478               	retlw	120
  3153  0C7F  342B               	retlw	43
  3154                           
  3155                           	psect	idataBIGRAM
  3156  0406                     __pidataBIGRAM:	
  3157                           
  3158                           ;initializer for _envelopeTable
  3159  0406  34FF               	retlw	255
  3160  0407  34FC               	retlw	252
  3161  0408  34FA               	retlw	250
  3162  0409  34F7               	retlw	247
  3163  040A  34F5               	retlw	245
  3164  040B  34F3               	retlw	243
  3165  040C  34F0               	retlw	240
  3166  040D  34EE               	retlw	238
  3167  040E  34EB               	retlw	235
  3168  040F  34E9               	retlw	233
  3169  0410  34E7               	retlw	231
  3170  0411  34E4               	retlw	228
  3171  0412  34E2               	retlw	226
  3172  0413  34E0               	retlw	224
  3173  0414  34DE               	retlw	222
  3174  0415  34DB               	retlw	219
  3175  0416  34D9               	retlw	217
  3176  0417  34D7               	retlw	215
  3177  0418  34D5               	retlw	213
  3178  0419  34D3               	retlw	211
  3179  041A  34D1               	retlw	209
  3180  041B  34CF               	retlw	207
  3181  041C  34CD               	retlw	205
  3182  041D  34CB               	retlw	203
  3183  041E  34C9               	retlw	201
  3184  041F  34C7               	retlw	199
  3185  0420  34C5               	retlw	197
  3186  0421  34C3               	retlw	195
  3187  0422  34C1               	retlw	193
  3188  0423  34BF               	retlw	191
  3189  0424  34BD               	retlw	189
  3190  0425  34BB               	retlw	187
  3191  0426  34B9               	retlw	185
  3192  0427  34B7               	retlw	183
  3193  0428  34B6               	retlw	182
  3194  0429  34B4               	retlw	180
  3195  042A  34B2               	retlw	178
  3196  042B  34B0               	retlw	176
  3197  042C  34AE               	retlw	174
  3198  042D  34AD               	retlw	173
  3199  042E  34AB               	retlw	171
  3200  042F  34A9               	retlw	169
  3201  0430  34A8               	retlw	168
  3202  0431  34A6               	retlw	166
  3203  0432  34A4               	retlw	164
  3204  0433  34A3               	retlw	163
  3205  0434  34A1               	retlw	161
  3206  0435  349F               	retlw	159
  3207  0436  349E               	retlw	158
  3208  0437  349C               	retlw	156
  3209  0438  349B               	retlw	155
  3210  0439  3499               	retlw	153
  3211  043A  3498               	retlw	152
  3212  043B  3496               	retlw	150
  3213  043C  3495               	retlw	149
  3214  043D  3493               	retlw	147
  3215  043E  3492               	retlw	146
  3216  043F  3490               	retlw	144
  3217  0440  348F               	retlw	143
  3218  0441  348D               	retlw	141
  3219  0442  348C               	retlw	140
  3220  0443  348B               	retlw	139
  3221  0444  3489               	retlw	137
  3222  0445  3488               	retlw	136
  3223  0446  3486               	retlw	134
  3224  0447  3485               	retlw	133
  3225  0448  3484               	retlw	132
  3226  0449  3482               	retlw	130
  3227  044A  3481               	retlw	129
  3228  044B  3480               	retlw	128
  3229  044C  347F               	retlw	127
  3230  044D  347D               	retlw	125
  3231  044E  347C               	retlw	124
  3232  044F  347B               	retlw	123
  3233  0450  347A               	retlw	122
  3234  0451  3478               	retlw	120
  3235  0452  3477               	retlw	119
  3236  0453  3476               	retlw	118
  3237  0454  3475               	retlw	117
  3238  0455  3474               	retlw	116
  3239  0456  3473               	retlw	115
  3240  0457  3471               	retlw	113
  3241  0458  3470               	retlw	112
  3242  0459  346F               	retlw	111
  3243  045A  346E               	retlw	110
  3244  045B  346D               	retlw	109
  3245  045C  346C               	retlw	108
  3246  045D  346B               	retlw	107
  3247  045E  346A               	retlw	106
  3248  045F  3469               	retlw	105
  3249  0460  3468               	retlw	104
  3250  0461  3467               	retlw	103
  3251  0462  3466               	retlw	102
  3252  0463  3465               	retlw	101
  3253  0464  3464               	retlw	100
  3254  0465  3463               	retlw	99
  3255  0466  3462               	retlw	98
  3256  0467  3461               	retlw	97
  3257  0468  3460               	retlw	96
  3258  0469  345F               	retlw	95
  3259  046A  345E               	retlw	94
  3260  046B  345D               	retlw	93
  3261  046C  345C               	retlw	92
  3262  046D  345B               	retlw	91
  3263  046E  345A               	retlw	90
  3264  046F  3459               	retlw	89
  3265  0470  3458               	retlw	88
  3266  0471  3457               	retlw	87
  3267  0472  3457               	retlw	87
  3268  0473  3456               	retlw	86
  3269  0474  3455               	retlw	85
  3270  0475  3454               	retlw	84
  3271  0476  3453               	retlw	83
  3272  0477  3452               	retlw	82
  3273  0478  3452               	retlw	82
  3274  0479  3451               	retlw	81
  3275  047A  3450               	retlw	80
  3276  047B  344F               	retlw	79
  3277  047C  344E               	retlw	78
  3278  047D  344E               	retlw	78
  3279  047E  344D               	retlw	77
  3280  047F  344C               	retlw	76
  3281  0480  344B               	retlw	75
  3282  0481  344B               	retlw	75
  3283  0482  344A               	retlw	74
  3284  0483  3449               	retlw	73
  3285  0484  3448               	retlw	72
  3286  0485  3448               	retlw	72
  3287  0486  3447               	retlw	71
  3288  0487  3446               	retlw	70
  3289  0488  3445               	retlw	69
  3290  0489  3445               	retlw	69
  3291  048A  3444               	retlw	68
  3292  048B  3443               	retlw	67
  3293  048C  3443               	retlw	67
  3294  048D  3442               	retlw	66
  3295  048E  3441               	retlw	65
  3296  048F  3441               	retlw	65
  3297  0490  3440               	retlw	64
  3298  0491  3440               	retlw	64
  3299  0492  343F               	retlw	63
  3300  0493  343E               	retlw	62
  3301  0494  343E               	retlw	62
  3302  0495  343D               	retlw	61
  3303  0496  343C               	retlw	60
  3304  0497  343C               	retlw	60
  3305  0498  343B               	retlw	59
  3306  0499  343B               	retlw	59
  3307  049A  343A               	retlw	58
  3308  049B  3439               	retlw	57
  3309  049C  3439               	retlw	57
  3310  049D  3438               	retlw	56
  3311  049E  3438               	retlw	56
  3312  049F  3437               	retlw	55
  3313  04A0  3437               	retlw	55
  3314  04A1  3436               	retlw	54
  3315  04A2  3436               	retlw	54
  3316  04A3  3435               	retlw	53
  3317  04A4  3435               	retlw	53
  3318  04A5  3434               	retlw	52
  3319  04A6  3433               	retlw	51
  3320  04A7  3433               	retlw	51
  3321  04A8  3432               	retlw	50
  3322  04A9  3432               	retlw	50
  3323  04AA  3431               	retlw	49
  3324  04AB  3431               	retlw	49
  3325  04AC  3430               	retlw	48
  3326  04AD  3430               	retlw	48
  3327  04AE  3430               	retlw	48
  3328  04AF  342F               	retlw	47
  3329  04B0  342F               	retlw	47
  3330  04B1  342E               	retlw	46
  3331  04B2  342E               	retlw	46
  3332  04B3  342D               	retlw	45
  3333  04B4  342D               	retlw	45
  3334  04B5  342C               	retlw	44
  3335  04B6  342C               	retlw	44
  3336  04B7  342B               	retlw	43
  3337  04B8  342B               	retlw	43
  3338  04B9  342B               	retlw	43
  3339  04BA  342A               	retlw	42
  3340  04BB  342A               	retlw	42
  3341  04BC  3429               	retlw	41
  3342  04BD  3428               	retlw	40
  3343  04BE  3428               	retlw	40
  3344  04BF  3427               	retlw	39
  3345  04C0  3427               	retlw	39
  3346  04C1  3426               	retlw	38
  3347  04C2  3426               	retlw	38
  3348  04C3  3425               	retlw	37
  3349  04C4  3425               	retlw	37
  3350  04C5  3424               	retlw	36
  3351  04C6  3423               	retlw	35
  3352  04C7  3423               	retlw	35
  3353  04C8  3422               	retlw	34
  3354  04C9  3422               	retlw	34
  3355  04CA  3421               	retlw	33
  3356  04CB  3421               	retlw	33
  3357  04CC  3420               	retlw	32
  3358  04CD  341F               	retlw	31
  3359  04CE  341F               	retlw	31
  3360  04CF  341E               	retlw	30
  3361  04D0  341E               	retlw	30
  3362  04D1  341D               	retlw	29
  3363  04D2  341D               	retlw	29
  3364  04D3  341C               	retlw	28
  3365  04D4  341C               	retlw	28
  3366  04D5  341B               	retlw	27
  3367  04D6  341A               	retlw	26
  3368  04D7  341A               	retlw	26
  3369  04D8  3419               	retlw	25
  3370  04D9  3419               	retlw	25
  3371  04DA  3418               	retlw	24
  3372  04DB  3418               	retlw	24
  3373  04DC  3417               	retlw	23
  3374  04DD  3416               	retlw	22
  3375  04DE  3416               	retlw	22
  3376  04DF  3415               	retlw	21
  3377  04E0  3415               	retlw	21
  3378  04E1  3414               	retlw	20
  3379  04E2  3414               	retlw	20
  3380  04E3  3413               	retlw	19
  3381  04E4  3413               	retlw	19
  3382  04E5  3412               	retlw	18
  3383  04E6  3411               	retlw	17
  3384  04E7  3411               	retlw	17
  3385  04E8  3410               	retlw	16
  3386  04E9  3410               	retlw	16
  3387  04EA  340F               	retlw	15
  3388  04EB  340F               	retlw	15
  3389  04EC  340E               	retlw	14
  3390  04ED  340D               	retlw	13
  3391  04EE  340D               	retlw	13
  3392  04EF  340C               	retlw	12
  3393  04F0  340C               	retlw	12
  3394  04F1  340B               	retlw	11
  3395  04F2  340B               	retlw	11
  3396  04F3  340A               	retlw	10
  3397  04F4  340A               	retlw	10
  3398  04F5  3409               	retlw	9
  3399  04F6  3408               	retlw	8
  3400  04F7  3408               	retlw	8
  3401  04F8  3407               	retlw	7
  3402  04F9  3407               	retlw	7
  3403  04FA  3406               	retlw	6
  3404  04FB  3406               	retlw	6
  3405  04FC  3405               	retlw	5
  3406  04FD  3404               	retlw	4
  3407  04FE  3404               	retlw	4
  3408  04FF  3403               	retlw	3
  3409  0500  3403               	retlw	3
  3410  0501  3402               	retlw	2
  3411  0502  3402               	retlw	2
  3412  0503  3401               	retlw	1
  3413  0504  3401               	retlw	1
  3414  0505  3400               	retlw	0
  3415                           
  3416                           ;initializer for _waveTable
  3417  0506  347F               	retlw	127
  3418  0507  3482               	retlw	130
  3419  0508  3485               	retlw	133
  3420  0509  3488               	retlw	136
  3421  050A  348B               	retlw	139
  3422  050B  348E               	retlw	142
  3423  050C  3491               	retlw	145
  3424  050D  3494               	retlw	148
  3425  050E  3498               	retlw	152
  3426  050F  349B               	retlw	155
  3427  0510  349E               	retlw	158
  3428  0511  34A1               	retlw	161
  3429  0512  34A4               	retlw	164
  3430  0513  34A7               	retlw	167
  3431  0514  34AA               	retlw	170
  3432  0515  34AD               	retlw	173
  3433  0516  34B0               	retlw	176
  3434  0517  34B3               	retlw	179
  3435  0518  34B5               	retlw	181
  3436  0519  34B8               	retlw	184
  3437  051A  34BB               	retlw	187
  3438  051B  34BE               	retlw	190
  3439  051C  34C1               	retlw	193
  3440  051D  34C3               	retlw	195
  3441  051E  34C6               	retlw	198
  3442  051F  34C8               	retlw	200
  3443  0520  34CB               	retlw	203
  3444  0521  34CE               	retlw	206
  3445  0522  34D0               	retlw	208
  3446  0523  34D2               	retlw	210
  3447  0524  34D5               	retlw	213
  3448  0525  34D7               	retlw	215
  3449  0526  34D9               	retlw	217
  3450  0527  34DB               	retlw	219
  3451  0528  34DE               	retlw	222
  3452  0529  34E0               	retlw	224
  3453  052A  34E2               	retlw	226
  3454  052B  34E4               	retlw	228
  3455  052C  34E6               	retlw	230
  3456  052D  34E7               	retlw	231
  3457  052E  34E9               	retlw	233
  3458  052F  34EB               	retlw	235
  3459  0530  34ED               	retlw	237
  3460  0531  34EE               	retlw	238
  3461  0532  34F0               	retlw	240
  3462  0533  34F1               	retlw	241
  3463  0534  34F2               	retlw	242
  3464  0535  34F4               	retlw	244
  3465  0536  34F5               	retlw	245
  3466  0537  34F6               	retlw	246
  3467  0538  34F7               	retlw	247
  3468  0539  34F8               	retlw	248
  3469  053A  34F9               	retlw	249
  3470  053B  34FA               	retlw	250
  3471  053C  34FB               	retlw	251
  3472  053D  34FC               	retlw	252
  3473  053E  34FC               	retlw	252
  3474  053F  34FD               	retlw	253
  3475  0540  34FD               	retlw	253
  3476  0541  34FE               	retlw	254
  3477  0542  34FE               	retlw	254
  3478  0543  34FE               	retlw	254
  3479  0544  34FE               	retlw	254
  3480  0545  34FE               	retlw	254
  3481  0546  34FE               	retlw	254
  3482  0547  34FE               	retlw	254
  3483  0548  34FE               	retlw	254
  3484  0549  34FE               	retlw	254
  3485  054A  34FE               	retlw	254
  3486  054B  34FD               	retlw	253
  3487  054C  34FD               	retlw	253
  3488  054D  34FC               	retlw	252
  3489  054E  34FC               	retlw	252
  3490  054F  34FB               	retlw	251
  3491  0550  34FA               	retlw	250
  3492  0551  34FA               	retlw	250
  3493  0552  34F9               	retlw	249
  3494  0553  34F8               	retlw	248
  3495  0554  34F7               	retlw	247
  3496  0555  34F6               	retlw	246
  3497  0556  34F4               	retlw	244
  3498  0557  34F3               	retlw	243
  3499  0558  34F2               	retlw	242
  3500  0559  34F0               	retlw	240
  3501  055A  34EF               	retlw	239
  3502  055B  34ED               	retlw	237
  3503  055C  34EC               	retlw	236
  3504  055D  34EA               	retlw	234
  3505  055E  34E8               	retlw	232
  3506  055F  34E7               	retlw	231
  3507  0560  34E5               	retlw	229
  3508  0561  34E3               	retlw	227
  3509  0562  34E1               	retlw	225
  3510  0563  34DF               	retlw	223
  3511  0564  34DD               	retlw	221
  3512  0565  34DA               	retlw	218
  3513  0566  34D8               	retlw	216
  3514  0567  34D6               	retlw	214
  3515  0568  34D4               	retlw	212
  3516  0569  34D1               	retlw	209
  3517  056A  34CF               	retlw	207
  3518  056B  34CC               	retlw	204
  3519  056C  34CA               	retlw	202
  3520  056D  34C7               	retlw	199
  3521  056E  34C5               	retlw	197
  3522  056F  34C2               	retlw	194
  3523  0570  34BF               	retlw	191
  3524  0571  34BC               	retlw	188
  3525  0572  34BA               	retlw	186
  3526  0573  34B7               	retlw	183
  3527  0574  34B4               	retlw	180
  3528  0575  34B1               	retlw	177
  3529  0576  34AE               	retlw	174
  3530  0577  34AB               	retlw	171
  3531  0578  34A8               	retlw	168
  3532  0579  34A5               	retlw	165
  3533  057A  34A2               	retlw	162
  3534  057B  349F               	retlw	159
  3535  057C  349C               	retlw	156
  3536  057D  3499               	retlw	153
  3537  057E  3496               	retlw	150
  3538  057F  3493               	retlw	147
  3539  0580  3490               	retlw	144
  3540  0581  348D               	retlw	141
  3541  0582  348A               	retlw	138
  3542  0583  3486               	retlw	134
  3543  0584  3483               	retlw	131
  3544  0585  3480               	retlw	128
  3545  0586  347D               	retlw	125
  3546  0587  347A               	retlw	122
  3547  0588  3477               	retlw	119
  3548  0589  3473               	retlw	115
  3549  058A  3470               	retlw	112
  3550  058B  346D               	retlw	109
  3551  058C  346A               	retlw	106
  3552  058D  3467               	retlw	103
  3553  058E  3464               	retlw	100
  3554  058F  3461               	retlw	97
  3555  0590  345E               	retlw	94
  3556  0591  345B               	retlw	91
  3557  0592  3458               	retlw	88
  3558  0593  3455               	retlw	85
  3559  0594  3452               	retlw	82
  3560  0595  344F               	retlw	79
  3561  0596  344C               	retlw	76
  3562  0597  3449               	retlw	73
  3563  0598  3446               	retlw	70
  3564  0599  3443               	retlw	67
  3565  059A  3441               	retlw	65
  3566  059B  343E               	retlw	62
  3567  059C  343B               	retlw	59
  3568  059D  3438               	retlw	56
  3569  059E  3436               	retlw	54
  3570  059F  3433               	retlw	51
  3571  05A0  3431               	retlw	49
  3572  05A1  342E               	retlw	46
  3573  05A2  342C               	retlw	44
  3574  05A3  3429               	retlw	41
  3575  05A4  3427               	retlw	39
  3576  05A5  3425               	retlw	37
  3577  05A6  3423               	retlw	35
  3578  05A7  3420               	retlw	32
  3579  05A8  341E               	retlw	30
  3580  05A9  341C               	retlw	28
  3581  05AA  341A               	retlw	26
  3582  05AB  3418               	retlw	24
  3583  05AC  3416               	retlw	22
  3584  05AD  3415               	retlw	21
  3585  05AE  3413               	retlw	19
  3586  05AF  3411               	retlw	17
  3587  05B0  3410               	retlw	16
  3588  05B1  340E               	retlw	14
  3589  05B2  340D               	retlw	13
  3590  05B3  340B               	retlw	11
  3591  05B4  340A               	retlw	10
  3592  05B5  3409               	retlw	9
  3593  05B6  3407               	retlw	7
  3594  05B7  3406               	retlw	6
  3595  05B8  3405               	retlw	5
  3596  05B9  3404               	retlw	4
  3597  05BA  3403               	retlw	3
  3598  05BB  3403               	retlw	3
  3599  05BC  3402               	retlw	2
  3600  05BD  3401               	retlw	1
  3601  05BE  3401               	retlw	1
  3602  05BF  3400               	retlw	0
  3603  05C0  3400               	retlw	0
  3604  05C1  3400               	retlw	0
  3605  05C2  3400               	retlw	0
  3606  05C3  3400               	retlw	0
  3607  05C4  3400               	retlw	0
  3608  05C5  3400               	retlw	0
  3609  05C6  3400               	retlw	0
  3610  05C7  3400               	retlw	0
  3611  05C8  3400               	retlw	0
  3612  05C9  3400               	retlw	0
  3613  05CA  3400               	retlw	0
  3614  05CB  3400               	retlw	0
  3615  05CC  3400               	retlw	0
  3616  05CD  3401               	retlw	1
  3617  05CE  3401               	retlw	1
  3618  05CF  3402               	retlw	2
  3619  05D0  3403               	retlw	3
  3620  05D1  3404               	retlw	4
  3621  05D2  3405               	retlw	5
  3622  05D3  3406               	retlw	6
  3623  05D4  3407               	retlw	7
  3624  05D5  3408               	retlw	8
  3625  05D6  3409               	retlw	9
  3626  05D7  340B               	retlw	11
  3627  05D8  340C               	retlw	12
  3628  05D9  340D               	retlw	13
  3629  05DA  340F               	retlw	15
  3630  05DB  3410               	retlw	16
  3631  05DC  3412               	retlw	18
  3632  05DD  3414               	retlw	20
  3633  05DE  3416               	retlw	22
  3634  05DF  3417               	retlw	23
  3635  05E0  3419               	retlw	25
  3636  05E1  341B               	retlw	27
  3637  05E2  341D               	retlw	29
  3638  05E3  341F               	retlw	31
  3639  05E4  3422               	retlw	34
  3640  05E5  3424               	retlw	36
  3641  05E6  3426               	retlw	38
  3642  05E7  3428               	retlw	40
  3643  05E8  342B               	retlw	43
  3644  05E9  342D               	retlw	45
  3645  05EA  342F               	retlw	47
  3646  05EB  3432               	retlw	50
  3647  05EC  3435               	retlw	53
  3648  05ED  3437               	retlw	55
  3649  05EE  343A               	retlw	58
  3650  05EF  343C               	retlw	60
  3651  05F0  343F               	retlw	63
  3652  05F1  3442               	retlw	66
  3653  05F2  3445               	retlw	69
  3654  05F3  3448               	retlw	72
  3655  05F4  344A               	retlw	74
  3656  05F5  344D               	retlw	77
  3657  05F6  3450               	retlw	80
  3658  05F7  3453               	retlw	83
  3659  05F8  3456               	retlw	86
  3660  05F9  3459               	retlw	89
  3661  05FA  345C               	retlw	92
  3662  05FB  345F               	retlw	95
  3663  05FC  3462               	retlw	98
  3664  05FD  3465               	retlw	101
  3665  05FE  3469               	retlw	105
  3666  05FF  346C               	retlw	108
  3667  0600  346F               	retlw	111
  3668  0601  3472               	retlw	114
  3669  0602  3475               	retlw	117
  3670  0603  3478               	retlw	120
  3671  0604  347B               	retlw	123
  3672  0605  347E               	retlw	126
  3673                           
  3674                           	psect	stringtext1
  3675  1000                     __pstringtext1:	
  3676  1000                     _mtouch_button_init:	
  3677  1000  3400               	retlw	0
  3678  1001  3400               	retlw	0
  3679  1002  3400               	retlw	0
  3680  1003  3400               	retlw	0
  3681  1004  3400               	retlw	0
  3682  1005  3400               	retlw	0
  3683  1006  3400               	retlw	0
  3684  1007  3400               	retlw	0
  3685  1008  3400               	retlw	0
  3686  1009  3400               	retlw	0
  3687  100A  3400               	retlw	0
  3688  100B  3400               	retlw	0
  3689  100C  3400               	retlw	0
  3690  100D  3400               	retlw	0
  3691  100E  3464               	retlw	100
  3692  100F  3403               	retlw	3
  3693  1010  3401               	retlw	1
  3694  1011  3401               	retlw	1
  3695  1012  3400               	retlw	0
  3696  1013  3400               	retlw	0
  3697  1014  3400               	retlw	0
  3698  1015  3400               	retlw	0
  3699  1016  3400               	retlw	0
  3700  1017  3400               	retlw	0
  3701  1018  3400               	retlw	0
  3702  1019  3400               	retlw	0
  3703  101A  3400               	retlw	0
  3704  101B  3400               	retlw	0
  3705  101C  3400               	retlw	0
  3706  101D  3400               	retlw	0
  3707  101E  3464               	retlw	100
  3708  101F  3403               	retlw	3
  3709  1020                     __end_of_mtouch_button_init:	
  3710  001C                     _T2CON	set	28
  3711  001A                     _TMR2	set	26
  3712  001B                     _PR2	set	27
  3713  0011                     _PIR1bits	set	17
  3714  000B                     _INTCONbits	set	11
  3715  005F                     _GIE	set	95
  3716  009B                     _ADRES	set	155
  3717  0095                     _OPTION_REGbits	set	149
  3718  008E                     _TRISC	set	142
  3719  008C                     _TRISA	set	140
  3720  0097                     _WDTCON	set	151
  3721  0098                     _OSCTUNE	set	152
  3722  009A                     _OSCSTAT	set	154
  3723  0099                     _OSCCON	set	153
  3724  0091                     _PIE1bits	set	145
  3725  009D                     _ADCON0bits	set	157
  3726  009F                     _ADCON2	set	159
  3727  009E                     _ADCON1	set	158
  3728  009D                     _ADCON0	set	157
  3729  008E                     _TRISCbits	set	142
  3730  04D6                     _PLLR	set	1238
  3731  010E                     _LATC	set	270
  3732  010C                     _LATA	set	268
  3733  0116                     _BORCON	set	278
  3734  0119                     _DAC1CON1	set	281
  3735  0118                     _DAC1CON0	set	280
  3736  018C                     _ANSELA	set	396
  3737  018E                     _ANSELC	set	398
  3738  018E                     _ANSELCbits	set	398
  3739  020E                     _WPUC	set	526
  3740  020C                     _WPUA	set	524
  3741  020E                     _WPUCbits	set	526
  3742  028E                     _ODCONC	set	654
  3743  028C                     _ODCONA	set	652
  3744  0515                     _OPA2CON	set	1301
  3745                           
  3746                           ; #config settings
  3747  0000                     
  3748                           	psect	cinit
  3749  0014                     start_initialization:	
  3750  0014                     __initialization:		;BIGRAM
  3751                           
  3752                           ; Initialize objects allocated to BIGRAM
  3753  0014  3006               	movlw	low __pidataBIGRAM
  3754  0015  0084               	movwf	4
  3755  0016  3084               	movlw	(high __pidataBIGRAM)| (0+128)
  3756  0017  0085               	movwf	5
  3757  0018  30F0               	movlw	240
  3758  0019  0086               	movwf	6
  3759  001A  3021               	movlw	33
  3760  001B  0087               	movwf	7
  3761  001C  3002               	movlw	2
  3762  001D  00FF               	movwf	127
  3763  001E  3000               	movlw	0
  3764  001F  318A  22B2  3180   	fcall	init_ram
  3765                           
  3766                           ; Initialize objects allocated to BANK1
  3767  0022  30E1               	movlw	low __pidataBANK1
  3768  0023  0084               	movwf	4
  3769  0024  308A               	movlw	(high __pidataBANK1)| (0+128)
  3770  0025  0085               	movwf	5
  3771  0026  30D2               	movlw	low __pdataBANK1
  3772  0027  0086               	movwf	6
  3773  0028  3000               	movlw	high __pdataBANK1
  3774  0029  0087               	movwf	7
  3775  002A  301C               	movlw	28
  3776  002B  01FF               	clrf	127
  3777  002C  318A  22B2  3180   	fcall	init_ram
  3778                           
  3779                           ; Initialize objects allocated to BANK2
  3780  002F  3004               	movlw	low __pidataBANK2
  3781  0030  0084               	movwf	4
  3782  0031  308C               	movlw	(high __pidataBANK2)| (0+128)
  3783  0032  0085               	movwf	5
  3784  0033  3020               	movlw	low __pdataBANK2
  3785  0034  0086               	movwf	6
  3786  0035  3001               	movlw	high __pdataBANK2
  3787  0036  0087               	movwf	7
  3788  0037  3032               	movlw	50
  3789  0038  01FF               	clrf	127
  3790  0039  318A  22B2  3180   	fcall	init_ram
  3791                           
  3792                           ; Initialize objects allocated to BANK3
  3793  003C  30B3               	movlw	low __pidataBANK3
  3794  003D  0084               	movwf	4
  3795  003E  3087               	movlw	(high __pidataBANK3)| (0+128)
  3796  003F  0085               	movwf	5
  3797  0040  30A0               	movlw	low __pdataBANK3
  3798  0041  0086               	movwf	6
  3799  0042  3001               	movlw	high __pdataBANK3
  3800  0043  0087               	movwf	7
  3801  0044  304A               	movlw	74
  3802  0045  01FF               	clrf	127
  3803  0046  318A  22B2  3180   	fcall	init_ram
  3804                           
  3805                           ; Initialize objects allocated to BANK4
  3806  0049  3036               	movlw	low __pidataBANK4
  3807  004A  0084               	movwf	4
  3808  004B  308C               	movlw	(high __pidataBANK4)| (0+128)
  3809  004C  0085               	movwf	5
  3810  004D  3020               	movlw	low __pdataBANK4
  3811  004E  0086               	movwf	6
  3812  004F  3002               	movlw	high __pdataBANK4
  3813  0050  0087               	movwf	7
  3814  0051  304A               	movlw	74
  3815  0052  01FF               	clrf	127
  3816  0053  318A  22B2  3180   	fcall	init_ram
  3817  0056  3063               	movlw	low __pbssBANK0
  3818                           
  3819                           ; Clear objects allocated to COMMON
  3820  0057  01FA               	clrf	__pbssCOMMON& (0+127)
  3821  0058  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  3822  0059  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  3823                           
  3824                           ; Clear objects allocated to BANK0
  3825  005A  0084               	movwf	4
  3826  005B  3000               	movlw	high __pbssBANK0
  3827  005C  0085               	movwf	5
  3828  005D  300B               	movlw	11
  3829  005E  00FE               	movwf	126
  3830  005F  3000               	movlw	0
  3831  0060  00FF               	movwf	127
  3832  0061  318A  22A6  3180   	fcall	clear_ram0
  3833                           
  3834                           ; Clear objects allocated to BANK1
  3835  0064  30A0               	movlw	low __pbssBANK1
  3836  0065  0084               	movwf	4
  3837  0066  3000               	movlw	high __pbssBANK1
  3838  0067  0085               	movwf	5
  3839  0068  3032               	movlw	50
  3840  0069  00FE               	movwf	126
  3841  006A  3000               	movlw	0
  3842  006B  00FF               	movwf	127
  3843  006C  318A  22A6  3180   	fcall	clear_ram0
  3844  006F                     end_of_initialization:	
  3845                           ;End of C runtime variable initialization code
  3846                           
  3847  006F                     __end_of__initialization:	
  3848  006F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3849  0070  0020               	movlb	0
  3850  0071  2872               	ljmp	_main	;jump to C main() function
  3851  0072                     __pmaintext:	
  3852 ;;
  3853 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3854 ;;
  3855 ;; *************** function _main *****************
  3856 ;; Defined at:
  3857 ;;		line 103 in file "main.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  i               2   65[BANK0 ] int 
  3862 ;;  ave             3   57[BANK0 ] float 
  3863 ;;  s               2   63[BANK0 ] int 
  3864 ;;  count           2   61[BANK0 ] int 
  3865 ;;  ms              2   55[BANK0 ] int 
  3866 ;;  ss              2   53[BANK0 ] int 
  3867 ;;  state           2   51[BANK0 ] int 
  3868 ;;  dcnt            2    0        int 
  3869 ;;  d               1   60[BANK0 ] char 
  3870 ;;  d2              1    0        char 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : B1F/0
  3877 ;;		On exit  : 1F/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3883 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3884 ;;Total ram usage:       17 bytes
  3885 ;; Hardware stack levels required when called:   11
  3886 ;; This function calls:
  3887 ;;		_MTOUCH_Button_Deviation_Get
  3888 ;;		_MTOUCH_Button_isPressed
  3889 ;;		_MTOUCH_Service_Mainloop
  3890 ;;		_SYSTEM_Initialize
  3891 ;;		___abtoft
  3892 ;;		___ftadd
  3893 ;;		___ftdiv
  3894 ;;		___ftge
  3895 ;;		___ftmul
  3896 ;;		_soundPlay
  3897 ;; This function is called by:
  3898 ;;		Startup code after reset
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _main
  3904  0072                     _main:	
  3905                           
  3906                           ;main.c: 105: SYSTEM_Initialize();
  3907                           
  3908                           ;incstack = 0
  3909                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3910  0072  318E  2665  3180   	fcall	_SYSTEM_Initialize
  3911                           
  3912                           ;main.c: 108: (INTCONbits.GIE = 1);
  3913  0075  178B               	bsf	11,7	;volatile
  3914                           
  3915                           ;main.c: 111: (INTCONbits.PEIE = 1);
  3916  0076  170B               	bsf	11,6	;volatile
  3917                           
  3918                           ;main.c: 114: for (int i = 0; i < 2; i++) {
  3919  0077  0020               	movlb	0	; select bank0
  3920  0078  01E1               	clrf	main@i
  3921  0079  01E2               	clrf	main@i+1
  3922  007A                     l3197:	
  3923                           
  3924                           ;main.c: 115: voice_on[i] = 0;
  3925  007A  0020               	movlb	0	; select bank0
  3926  007B  0861               	movf	main@i,w
  3927  007C  3EB0               	addlw	(low (_voice_on| 0))& (0+255)
  3928  007D  0086               	movwf	6
  3929  007E  0187               	clrf	7
  3930  007F  0181               	clrf	1
  3931                           
  3932                           ;main.c: 116: env[i] = 0;
  3933  0080  3561               	lslf	main@i,w
  3934  0081  3EA4               	addlw	(low (_env| 0))& (0+255)
  3935  0082  0086               	movwf	6
  3936  0083  3000               	movlw	0
  3937  0084  3FC0               	movwi [0]fsr1
  3938  0085  3FC1               	movwi [1]fsr1
  3939                           
  3940                           ;main.c: 117: envelopeCount[i] = 0;
  3941  0086  0861               	movf	main@i,w
  3942  0087  3E67               	addlw	(low (_envelopeCount| 0))& (0+255)
  3943  0088  0086               	movwf	6
  3944  0089  0181               	clrf	1
  3945                           
  3946                           ;main.c: 118: pos_d[i] = 0;
  3947  008A  0861               	movf	main@i,w
  3948  008B  3E7A               	addlw	(low (_pos_d| 0))& (0+255)
  3949  008C  0086               	movwf	6
  3950  008D  0181               	clrf	1
  3951                           
  3952                           ;main.c: 119: pos_f[i] = 0;
  3953  008E  3561               	lslf	main@i,w
  3954  008F  3EA0               	addlw	(low (_pos_f| 0))& (0+255)
  3955  0090  0086               	movwf	6
  3956  0091  3000               	movlw	0
  3957  0092  3FC0               	movwi [0]fsr1
  3958  0093  3FC1               	movwi [1]fsr1
  3959  0094  0AE1               	incf	main@i,f
  3960  0095  1903               	skipnz
  3961  0096  0AE2               	incf	main@i+1,f
  3962  0097  0862               	movf	main@i+1,w
  3963  0098  3A80               	xorlw	128
  3964  0099  00D2               	movwf	??_main
  3965  009A  3080               	movlw	128
  3966  009B  0252               	subwf	??_main,w
  3967  009C  1D03               	skipz
  3968  009D  28A0               	goto	u2415
  3969  009E  3002               	movlw	2
  3970  009F  0261               	subwf	main@i,w
  3971  00A0                     u2415:	
  3972  00A0  1C03               	skipc
  3973  00A1  287A               	goto	l3197
  3974                           
  3975                           ;main.c: 121: }
  3976                           ;main.c: 123: ENV_DELAY = 40;
  3977  00A2  3028               	movlw	40
  3978  00A3  0021               	movlb	1	; select bank1
  3979  00A4  00AA               	movwf	_ENV_DELAY^(0+128)
  3980  00A5  01AB               	clrf	(_ENV_DELAY+1)^(0+128)
  3981                           
  3982                           ;main.c: 132: int dcnt = 0;
  3983  00A6  0020               	movlb	0	; select bank0
  3984  00A7  3018               	movlw	24
  3985  00A8  01DD               	clrf	main@count
  3986  00A9  01DE               	clrf	main@count+1
  3987                           
  3988                           ;main.c: 133: int ss;
  3989                           ;main.c: 134: int ms = sizeof (scale) / sizeof (unsigned char);
  3990  00AA  00D7               	movwf	main@ms
  3991  00AB  01D8               	clrf	main@ms+1
  3992  00AC                     l3209:	
  3993                           
  3994                           ;main.c: 136: MTOUCH_Service_Mainloop();
  3995  00AC  21E9  3180         	fcall	_MTOUCH_Service_Mainloop
  3996                           
  3997                           ;main.c: 137: d = MTOUCH_Button_Deviation_Get(Sensor_AN4);
  3998  00AE  3000               	movlw	0
  3999  00AF  21CD               	fcall	_MTOUCH_Button_Deviation_Get
  4000  00B0  00DC               	movwf	main@d
  4001                           
  4002                           ;main.c: 138: ave = ave * 2.0 / 3.0 + (float) (d) / 3.0;
  4003  00B1  3040               	movlw	64
  4004  00B2  01B7               	clrf	___ftdiv@f2
  4005  00B3  00B8               	movwf	___ftdiv@f2+1
  4006  00B4  00B9               	movwf	___ftdiv@f2+2
  4007  00B5  085C               	movf	main@d,w
  4008  00B6  318C  24F1  3180   	fcall	___abtoft
  4009  00B9  0828               	movf	?___abtoft,w
  4010  00BA  00BA               	movwf	___ftdiv@f1
  4011  00BB  0829               	movf	?___abtoft+1,w
  4012  00BC  00BB               	movwf	___ftdiv@f1+1
  4013  00BD  082A               	movf	?___abtoft+2,w
  4014  00BE  00BC               	movwf	___ftdiv@f1+2
  4015  00BF  216A               	fcall	___ftdiv
  4016  00C0  0837               	movf	?___ftdiv,w
  4017  00C1  00C6               	movwf	___ftadd@f1
  4018  00C2  0838               	movf	?___ftdiv+1,w
  4019  00C3  00C7               	movwf	___ftadd@f1+1
  4020  00C4  0839               	movf	?___ftdiv+2,w
  4021  00C5  00C8               	movwf	___ftadd@f1+2
  4022  00C6  3040               	movlw	64
  4023  00C7  01B7               	clrf	___ftdiv@f2
  4024  00C8  00B8               	movwf	___ftdiv@f2+1
  4025  00C9  00B9               	movwf	___ftdiv@f2+2
  4026  00CA  01A8               	clrf	___ftmul@f1
  4027  00CB  01A9               	clrf	___ftmul@f1+1
  4028  00CC  00AA               	movwf	___ftmul@f1+2
  4029  00CD  0859               	movf	main@ave,w
  4030  00CE  00AB               	movwf	___ftmul@f2
  4031  00CF  085A               	movf	main@ave+1,w
  4032  00D0  00AC               	movwf	___ftmul@f2+1
  4033  00D1  085B               	movf	main@ave+2,w
  4034  00D2  00AD               	movwf	___ftmul@f2+2
  4035  00D3  318D  2509  3180   	fcall	___ftmul
  4036  00D6  0828               	movf	?___ftmul,w
  4037  00D7  00BA               	movwf	___ftdiv@f1
  4038  00D8  0829               	movf	?___ftmul+1,w
  4039  00D9  00BB               	movwf	___ftdiv@f1+1
  4040  00DA  082A               	movf	?___ftmul+2,w
  4041  00DB  00BC               	movwf	___ftdiv@f1+2
  4042  00DC  216A               	fcall	___ftdiv
  4043  00DD  0837               	movf	?___ftdiv,w
  4044  00DE  00C9               	movwf	___ftadd@f2
  4045  00DF  0838               	movf	?___ftdiv+1,w
  4046  00E0  00CA               	movwf	___ftadd@f2+1
  4047  00E1  0839               	movf	?___ftdiv+2,w
  4048  00E2  00CB               	movwf	___ftadd@f2+2
  4049  00E3  318D  2573  3180   	fcall	___ftadd
  4050  00E6  0846               	movf	?___ftadd,w
  4051  00E7  00D9               	movwf	main@ave
  4052  00E8  0847               	movf	?___ftadd+1,w
  4053  00E9  00DA               	movwf	main@ave+1
  4054  00EA  0848               	movf	?___ftadd+2,w
  4055  00EB  00DB               	movwf	main@ave+2
  4056                           
  4057                           ;main.c: 140: if (d > 0 && ss == 0 && ave > 0) {
  4058  00EC  085C               	movf	main@d,w
  4059  00ED  3A80               	xorlw	128
  4060  00EE  3E7F               	addlw	-129
  4061  00EF  1C03               	skipc
  4062  00F0  2915               	goto	l3227
  4063  00F1  0855               	movf	main@ss,w
  4064  00F2  0456               	iorwf	main@ss+1,w
  4065  00F3  1D03               	btfss	3,2
  4066  00F4  2915               	goto	l3227
  4067  00F5  01A0               	clrf	___ftge@ff1
  4068  00F6  01A1               	clrf	___ftge@ff1+1
  4069  00F7  01A2               	clrf	___ftge@ff1+2
  4070  00F8  0859               	movf	main@ave,w
  4071  00F9  00A3               	movwf	___ftge@ff2
  4072  00FA  085A               	movf	main@ave+1,w
  4073  00FB  00A4               	movwf	___ftge@ff2+1
  4074  00FC  085B               	movf	main@ave+2,w
  4075  00FD  00A5               	movwf	___ftge@ff2+2
  4076  00FE  318B  23A9  3180   	fcall	___ftge
  4077  0101  1803               	btfsc	3,0
  4078  0102  2915               	goto	l3227
  4079                           
  4080                           ;main.c: 141: ss = 1;
  4081  0103  01D5               	clrf	main@ss
  4082  0104  0AD5               	incf	main@ss,f
  4083  0105  01D6               	clrf	main@ss+1
  4084                           
  4085                           ;main.c: 145: if (s >= ms) s = 0;
  4086  0106  0860               	movf	main@s+1,w
  4087  0107  3A80               	xorlw	128
  4088  0108  00D2               	movwf	??_main
  4089  0109  0858               	movf	main@ms+1,w
  4090  010A  3A80               	xorlw	128
  4091  010B  0252               	subwf	??_main,w
  4092  010C  1D03               	skipz
  4093  010D  2910               	goto	u2455
  4094  010E  0857               	movf	main@ms,w
  4095  010F  025F               	subwf	main@s,w
  4096  0110                     u2455:	
  4097  0110  1C03               	skipc
  4098  0111  2915               	goto	l3227
  4099  0112  0020               	movlb	0	; select bank0
  4100  0113  01DF               	clrf	main@s
  4101  0114  01E0               	clrf	main@s+1
  4102  0115                     l3227:	
  4103                           
  4104                           ;main.c: 146: }
  4105                           ;main.c: 148: if (MTOUCH_Button_isPressed(Sensor_AN4)) {
  4106  0115  3000               	movlw	0
  4107  0116  21D9  3180         	fcall	_MTOUCH_Button_isPressed
  4108  0118  3A00               	xorlw	0
  4109  0119  1903               	skipnz
  4110  011A  2965               	goto	l3251
  4111                           
  4112                           ;main.c: 151: dcnt++;
  4113  011B  0853               	movf	main@state,w
  4114  011C  0454               	iorwf	main@state+1,w
  4115  011D  1D03               	btfss	3,2
  4116  011E  28AC               	goto	l3209
  4117                           
  4118                           ;main.c: 153: state = 1;
  4119  011F  01D3               	clrf	main@state
  4120  0120  0AD3               	incf	main@state,f
  4121  0121  01D4               	clrf	main@state+1
  4122                           
  4123                           ;main.c: 162: s++;
  4124  0122  0ADF               	incf	main@s,f
  4125  0123  1903               	skipnz
  4126  0124  0AE0               	incf	main@s+1,f
  4127                           
  4128                           ;main.c: 163: if (s < 1)s = 0;
  4129  0125  0860               	movf	main@s+1,w
  4130  0126  3A80               	xorlw	128
  4131  0127  00D2               	movwf	??_main
  4132  0128  3080               	movlw	128
  4133  0129  0252               	subwf	??_main,w
  4134  012A  1D03               	skipz
  4135  012B  292E               	goto	u2485
  4136  012C  3001               	movlw	1
  4137  012D  025F               	subwf	main@s,w
  4138  012E                     u2485:	
  4139  012E  1803               	skipnc
  4140  012F  2933               	goto	l3237
  4141  0130  0020               	movlb	0	; select bank0
  4142  0131  01DF               	clrf	main@s
  4143  0132  01E0               	clrf	main@s+1
  4144  0133                     l3237:	
  4145                           
  4146                           ;main.c: 164: if (s >= ms) s = 0;
  4147  0133  0020               	movlb	0	; select bank0
  4148  0134  0860               	movf	main@s+1,w
  4149  0135  3A80               	xorlw	128
  4150  0136  00D2               	movwf	??_main
  4151  0137  0858               	movf	main@ms+1,w
  4152  0138  3A80               	xorlw	128
  4153  0139  0252               	subwf	??_main,w
  4154  013A  1D03               	skipz
  4155  013B  293E               	goto	u2495
  4156  013C  0857               	movf	main@ms,w
  4157  013D  025F               	subwf	main@s,w
  4158  013E                     u2495:	
  4159  013E  1C03               	skipc
  4160  013F  2943               	goto	l3241
  4161  0140  0020               	movlb	0	; select bank0
  4162  0141  01DF               	clrf	main@s
  4163  0142  01E0               	clrf	main@s+1
  4164  0143                     l3241:	
  4165                           
  4166                           ;main.c: 166: soundPlay(count, scale[s]);
  4167  0143  0020               	movlb	0	; select bank0
  4168  0144  085F               	movf	main@s,w
  4169  0145  3E20               	addlw	(low (_scale| (0+256)))& (0+255)
  4170  0146  0086               	movwf	6
  4171  0147  3001               	movlw	1	; select bank2/3
  4172  0148  0087               	movwf	7
  4173  0149  0801               	movf	1,w
  4174  014A  00A0               	movwf	soundPlay@onkai
  4175  014B  085D               	movf	main@count,w
  4176  014C  318B  23D5  3180   	fcall	_soundPlay
  4177                           
  4178                           ;main.c: 167: count++;
  4179  014F  0ADD               	incf	main@count,f
  4180  0150  1903               	skipnz
  4181  0151  0ADE               	incf	main@count+1,f
  4182                           
  4183                           ;main.c: 168: if (count >= 2) count = 0;
  4184  0152  085E               	movf	main@count+1,w
  4185  0153  3A80               	xorlw	128
  4186  0154  00D2               	movwf	??_main
  4187  0155  3080               	movlw	128
  4188  0156  0252               	subwf	??_main,w
  4189  0157  1D03               	skipz
  4190  0158  295B               	goto	u2505
  4191  0159  3002               	movlw	2
  4192  015A  025D               	subwf	main@count,w
  4193  015B                     u2505:	
  4194  015B  1C03               	skipc
  4195  015C  2960               	goto	l3249
  4196  015D  0020               	movlb	0	; select bank0
  4197  015E  01DD               	clrf	main@count
  4198  015F  01DE               	clrf	main@count+1
  4199  0160                     l3249:	
  4200                           
  4201                           ;main.c: 169: ave = 0;
  4202  0160  0020               	movlb	0	; select bank0
  4203  0161  01D9               	clrf	main@ave
  4204  0162  01DA               	clrf	main@ave+1
  4205  0163  01DB               	clrf	main@ave+2
  4206  0164  28AC               	goto	l3209
  4207  0165                     l3251:	
  4208                           
  4209                           ;main.c: 174: dcnt = 0;
  4210  0165  01D3               	clrf	main@state
  4211  0166  01D4               	clrf	main@state+1
  4212                           
  4213                           ;main.c: 175: ss = 0;
  4214  0167  01D5               	clrf	main@ss
  4215  0168  01D6               	clrf	main@ss+1
  4216  0169  28AC               	goto	l3209
  4217  016A                     __end_of_main:	
  4218  016A                     __ptext4:	
  4219 ;; *************** function ___ftdiv *****************
  4220 ;; Defined at:
  4221 ;;		line 56 in file "/Applications/microchip/xc8/v1.45/sources/common/ftdiv.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  f2              3   23[BANK0 ] float 
  4224 ;;  f1              3   26[BANK0 ] float 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  f3              3   33[BANK0 ] float 
  4227 ;;  sign            1   37[BANK0 ] unsigned char 
  4228 ;;  exp             1   36[BANK0 ] unsigned char 
  4229 ;;  cntr            1   32[BANK0 ] unsigned char 
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  3   23[BANK0 ] float 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0, pclath, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 1F/0
  4236 ;;		On exit  : 1F/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4239 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4240 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4241 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;Total ram usage:       15 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; Hardware stack levels required when called:    5
  4246 ;; This function calls:
  4247 ;;		___ftpack
  4248 ;; This function is called by:
  4249 ;;		_main
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function ___ftdiv
  4255  016A                     ___ftdiv:	
  4256                           
  4257                           ;incstack = 0
  4258                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4259  016A  083A               	movf	___ftdiv@f1,w
  4260  016B  00BD               	movwf	??___ftdiv
  4261  016C  083B               	movf	___ftdiv@f1+1,w
  4262  016D  00BE               	movwf	??___ftdiv+1
  4263  016E  083C               	movf	___ftdiv@f1+2,w
  4264  016F  00BF               	movwf	??___ftdiv+2
  4265  0170  1003               	clrc
  4266  0171  0D3E               	rlf	??___ftdiv+1,w
  4267  0172  0D3F               	rlf	??___ftdiv+2,w
  4268  0173  00C4               	movwf	___ftdiv@exp
  4269  0174  0844               	movf	___ftdiv@exp,w
  4270  0175  1D03               	btfss	3,2
  4271  0176  297B               	goto	l3069
  4272  0177  01B7               	clrf	?___ftdiv
  4273  0178  01B8               	clrf	?___ftdiv+1
  4274  0179  01B9               	clrf	?___ftdiv+2
  4275  017A  0008               	return
  4276  017B                     l3069:	
  4277  017B  0837               	movf	___ftdiv@f2,w
  4278  017C  00BD               	movwf	??___ftdiv
  4279  017D  0838               	movf	___ftdiv@f2+1,w
  4280  017E  00BE               	movwf	??___ftdiv+1
  4281  017F  0839               	movf	___ftdiv@f2+2,w
  4282  0180  00BF               	movwf	??___ftdiv+2
  4283  0181  1003               	clrc
  4284  0182  0D3E               	rlf	??___ftdiv+1,w
  4285  0183  0D3F               	rlf	??___ftdiv+2,w
  4286  0184  00C5               	movwf	___ftdiv@sign
  4287  0185  0845               	movf	___ftdiv@sign,w
  4288  0186  1D03               	btfss	3,2
  4289  0187  298C               	goto	l1043
  4290  0188  01B7               	clrf	?___ftdiv
  4291  0189  01B8               	clrf	?___ftdiv+1
  4292  018A  01B9               	clrf	?___ftdiv+2
  4293  018B  0008               	return
  4294  018C                     l1043:	
  4295  018C  3089               	movlw	137
  4296  018D  01C1               	clrf	___ftdiv@f3
  4297  018E  01C2               	clrf	___ftdiv@f3+1
  4298  018F  01C3               	clrf	___ftdiv@f3+2
  4299  0190  0745               	addwf	___ftdiv@sign,w
  4300  0191  00BD               	movwf	??___ftdiv
  4301  0192  02C4               	subwf	___ftdiv@exp,f
  4302  0193  083C               	movf	___ftdiv@f1+2,w
  4303  0194  00C5               	movwf	___ftdiv@sign
  4304  0195  0839               	movf	___ftdiv@f2+2,w
  4305  0196  06C5               	xorwf	___ftdiv@sign,f
  4306  0197  3080               	movlw	128
  4307  0198  05C5               	andwf	___ftdiv@sign,f
  4308  0199  3018               	movlw	24
  4309  019A  17BB               	bsf	___ftdiv@f1+1,7
  4310  019B  01BC               	clrf	___ftdiv@f1+2
  4311  019C  17B8               	bsf	___ftdiv@f2+1,7
  4312  019D  01B9               	clrf	___ftdiv@f2+2
  4313  019E  00C0               	movwf	___ftdiv@cntr
  4314  019F                     l3091:	
  4315  019F  35C1               	lslf	___ftdiv@f3,f
  4316  01A0  0DC2               	rlf	___ftdiv@f3+1,f
  4317  01A1  0DC3               	rlf	___ftdiv@f3+2,f
  4318  01A2  0839               	movf	___ftdiv@f2+2,w
  4319  01A3  023C               	subwf	___ftdiv@f1+2,w
  4320  01A4  1D03               	skipz
  4321  01A5  29AC               	goto	u2275
  4322  01A6  0838               	movf	___ftdiv@f2+1,w
  4323  01A7  023B               	subwf	___ftdiv@f1+1,w
  4324  01A8  1D03               	skipz
  4325  01A9  29AC               	goto	u2275
  4326  01AA  0837               	movf	___ftdiv@f2,w
  4327  01AB  023A               	subwf	___ftdiv@f1,w
  4328  01AC                     u2275:	
  4329  01AC  1C03               	skipc
  4330  01AD  29B5               	goto	l3097
  4331  01AE  0837               	movf	___ftdiv@f2,w
  4332  01AF  02BA               	subwf	___ftdiv@f1,f
  4333  01B0  0838               	movf	___ftdiv@f2+1,w
  4334  01B1  3BBB               	subwfb	___ftdiv@f1+1,f
  4335  01B2  0839               	movf	___ftdiv@f2+2,w
  4336  01B3  3BBC               	subwfb	___ftdiv@f1+2,f
  4337  01B4  1441               	bsf	___ftdiv@f3,0
  4338  01B5                     l3097:	
  4339  01B5  35BA               	lslf	___ftdiv@f1,f
  4340  01B6  0DBB               	rlf	___ftdiv@f1+1,f
  4341  01B7  0DBC               	rlf	___ftdiv@f1+2,f
  4342  01B8  0BC0               	decfsz	___ftdiv@cntr,f
  4343  01B9  299F               	goto	l3091
  4344  01BA  0841               	movf	___ftdiv@f3,w
  4345  01BB  00A0               	movwf	___ftpack@arg
  4346  01BC  0842               	movf	___ftdiv@f3+1,w
  4347  01BD  00A1               	movwf	___ftpack@arg+1
  4348  01BE  0843               	movf	___ftdiv@f3+2,w
  4349  01BF  00A2               	movwf	___ftpack@arg+2
  4350  01C0  0844               	movf	___ftdiv@exp,w
  4351  01C1  00A3               	movwf	___ftpack@exp
  4352  01C2  0845               	movf	___ftdiv@sign,w
  4353  01C3  00A4               	movwf	___ftpack@sign
  4354  01C4  318E  2627         	fcall	___ftpack
  4355  01C6  0820               	movf	?___ftpack,w
  4356  01C7  00B7               	movwf	?___ftdiv
  4357  01C8  0821               	movf	?___ftpack+1,w
  4358  01C9  00B8               	movwf	?___ftdiv+1
  4359  01CA  0822               	movf	?___ftpack+2,w
  4360  01CB  00B9               	movwf	?___ftdiv+2
  4361  01CC  0008               	return
  4362  01CD                     __end_of___ftdiv:	
  4363  01CD                     __ptext64:	
  4364 ;; *************** function _MTOUCH_Button_Deviation_Get *****************
  4365 ;; Defined at:
  4366 ;;		line 349 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  name            1    wreg     enum E4949
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  name            1    0[BANK0 ] enum E4949
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  1    wreg      char 
  4373 ;; Registers used:
  4374 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4375 ;; Tracked objects:
  4376 ;;		On entry : 1F/0
  4377 ;;		On exit  : 1F/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;Total ram usage:        1 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    4
  4387 ;; This function calls:
  4388 ;;		Nothing
  4389 ;; This function is called by:
  4390 ;;		_main
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _MTOUCH_Button_Deviation_Get
  4396  01CD                     _MTOUCH_Button_Deviation_Get:	
  4397                           
  4398                           ;incstack = 0
  4399                           ; Regs used in _MTOUCH_Button_Deviation_Get: [wreg+fsr1l+fsr1h+status,2+status,0]
  4400                           ;MTOUCH_Button_Deviation_Get@name stored from wreg
  4401  01CD  00A0               	movwf	MTOUCH_Button_Deviation_Get@name
  4402                           
  4403                           ;mtouch_button.c: 351: if(name < 2)
  4404  01CE  3002               	movlw	2
  4405  01CF  0220               	subwf	MTOUCH_Button_Deviation_Get@name,w
  4406  01D0  1803               	skipnc
  4407  01D1  3400               	retlw	0
  4408                           
  4409                           ;mtouch_button.c: 352: return mtouch_button[name].deviation;
  4410  01D2  0E20               	swapf	MTOUCH_Button_Deviation_Get@name,w
  4411  01D3  39F0               	andlw	240
  4412  01D4  3EBB               	addlw	(low ((_mtouch_button| 0+9)))& (0+255)
  4413  01D5  0086               	movwf	6
  4414  01D6  0187               	clrf	7
  4415  01D7  0801               	movf	1,w
  4416  01D8  0008               	return
  4417  01D9                     __end_of_MTOUCH_Button_Deviation_Get:	
  4418                           ;mtouch_button.c: 353: else
  4419                           ;mtouch_button.c: 354: return (mtouch_button_deviation_t)0;
  4420                           
  4421  01D9                     __ptext63:	
  4422 ;; *************** function _MTOUCH_Button_isPressed *****************
  4423 ;; Defined at:
  4424 ;;		line 333 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  name            1    wreg     enum E4949
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  name            1    0[BANK0 ] enum E4949
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      unsigned char 
  4431 ;; Registers used:
  4432 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 1F/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;Total ram usage:        1 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    4
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_main
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           
  4453                           ;psect for function _MTOUCH_Button_isPressed
  4454  01D9                     _MTOUCH_Button_isPressed:	
  4455                           
  4456                           ;incstack = 0
  4457                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
  4458                           ;MTOUCH_Button_isPressed@name stored from wreg
  4459  01D9  0020               	movlb	0	; select bank0
  4460  01DA  00A0               	movwf	MTOUCH_Button_isPressed@name
  4461                           
  4462                           ;mtouch_button.c: 335: if(name < 2)
  4463  01DB  3002               	movlw	2
  4464  01DC  0220               	subwf	MTOUCH_Button_isPressed@name,w
  4465  01DD  1803               	skipnc
  4466  01DE  3400               	retlw	0
  4467                           
  4468                           ;mtouch_button.c: 336: return (mtouch_button[name].state == MTOUCH_BUTTON_STATE_pressed)
      +                           ? 1 : 0;
  4469  01DF  0E20               	swapf	MTOUCH_Button_isPressed@name,w
  4470  01E0  39F0               	andlw	240
  4471  01E1  3EB4               	addlw	(low ((_mtouch_button| 0+2)))& (0+255)
  4472  01E2  0086               	movwf	6
  4473  01E3  3002               	movlw	2
  4474  01E4  0187               	clrf	7
  4475  01E5  0601               	xorwf	1,w
  4476  01E6  1903               	btfsc	3,2
  4477  01E7  3401               	retlw	1
  4478  01E8  3400               	retlw	0
  4479  01E9                     __end_of_MTOUCH_Button_isPressed:	
  4480                           ;mtouch_button.c: 337: else
  4481                           ;mtouch_button.c: 338: return 0;
  4482                           
  4483  01E9                     __ptext21:	
  4484 ;; *************** function _MTOUCH_Service_Mainloop *****************
  4485 ;; Defined at:
  4486 ;;		line 81 in file "mcc_generated_files/mtouch/mtouch.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;		None
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;		None
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  1    wreg      unsigned char 
  4493 ;; Registers used:
  4494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4495 ;; Tracked objects:
  4496 ;;		On entry : 1F/0
  4497 ;;		On exit  : 1F/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;Total ram usage:        0 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:   10
  4507 ;; This function calls:
  4508 ;;		_MTOUCH_Button_ServiceAll
  4509 ;;		_MTOUCH_Sensor_SampleAll
  4510 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4511 ;;		_MTOUCH_Tick
  4512 ;; This function is called by:
  4513 ;;		_main
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           
  4518                           ;psect for function _MTOUCH_Service_Mainloop
  4519  01E9                     _MTOUCH_Service_Mainloop:	
  4520                           
  4521                           ;mtouch.c: 85: mtouch_time_toScan = 1;
  4522                           
  4523                           ;incstack = 0
  4524                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4525  01E9  01ED               	clrf	_mtouch_time_toScan
  4526  01EA  0AED               	incf	_mtouch_time_toScan,f
  4527                           
  4528                           ;mtouch.c: 88: {
  4529                           ;mtouch.c: 89: if(MTOUCH_Sensor_SampleAll() == 0)
  4530                           
  4531                           ;mtouch.c: 87: if(mtouch_time_toScan)
  4532  01EB  2368  3180         	fcall	_MTOUCH_Sensor_SampleAll
  4533  01ED  3A00               	xorlw	0
  4534  01EE  1903               	btfsc	3,2
  4535  01EF  0008               	return
  4536                           
  4537                           ;mtouch.c: 91: MTOUCH_Button_ServiceAll();
  4538  01F0  21F7               	fcall	_MTOUCH_Button_ServiceAll
  4539                           
  4540                           ;mtouch.c: 92: MTOUCH_Sensor_Sampled_ResetAll();
  4541  01F1  318E  26C4  3180   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4542                           
  4543                           ;mtouch.c: 93: MTOUCH_Tick();
  4544  01F4  2404               	fcall	_MTOUCH_Tick
  4545                           
  4546                           ;mtouch.c: 94: mtouch_time_toScan = 0;
  4547  01F5  01ED               	clrf	_mtouch_time_toScan
  4548  01F6  0008               	return
  4549  01F7                     __end_of_MTOUCH_Service_Mainloop:	
  4550  01F7                     __ptext47:	
  4551 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  4552 ;; Defined at:
  4553 ;;		line 168 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;		None
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  button          1   19[BANK0 ] enum E4949
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  1    wreg      void 
  4560 ;; Registers used:
  4561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 1F/0
  4564 ;;		On exit  : 1F/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;Total ram usage:        1 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    9
  4574 ;; This function calls:
  4575 ;;		_Button_Service
  4576 ;; This function is called by:
  4577 ;;		_MTOUCH_Service_Mainloop
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function _MTOUCH_Button_ServiceAll
  4583  01F7                     _MTOUCH_Button_ServiceAll:	
  4584                           
  4585                           ;mtouch_button.c: 170: enum mtouch_button_names button;
  4586                           ;mtouch_button.c: 171: for (button = 0; button < 2; button++)
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  4590  01F7  01B3               	clrf	MTOUCH_Button_ServiceAll@button
  4591  01F8                     l2815:	
  4592                           
  4593                           ;mtouch_button.c: 172: {
  4594                           ;mtouch_button.c: 173: Button_Service(button);
  4595  01F8  0833               	movf	MTOUCH_Button_ServiceAll@button,w
  4596  01F9  2201  3180         	fcall	_Button_Service
  4597  01FB  3002               	movlw	2
  4598  01FC  0AB3               	incf	MTOUCH_Button_ServiceAll@button,f
  4599  01FD  0233               	subwf	MTOUCH_Button_ServiceAll@button,w
  4600  01FE  1803               	btfsc	3,0
  4601  01FF  0008               	return
  4602  0200  29F8               	goto	l2815
  4603  0201                     __end_of_MTOUCH_Button_ServiceAll:	
  4604  0201                     __ptext48:	
  4605 ;; *************** function _Button_Service *****************
  4606 ;; Defined at:
  4607 ;;		line 177 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  name            1    wreg     enum E4949
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;  name            1   17[BANK0 ] enum E4949
  4612 ;;  button          1   18[BANK0 ] PTR struct .
  4613 ;;		 -> mtouch_button(32), 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 1F/0
  4620 ;;		On exit  : 1F/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;Total ram usage:        2 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    8
  4630 ;; This function calls:
  4631 ;;		_Button_Deviation_Update
  4632 ;;		_Button_Reading_Update
  4633 ;;		_Button_State_Initializing
  4634 ;;		_Button_State_NotPressed
  4635 ;;		_Button_State_Pressed
  4636 ;;		_MTOUCH_Button_Initialize
  4637 ;;		_MTOUCH_Sensor_isCalibrated
  4638 ;;		_MTOUCH_Sensor_wasSampled
  4639 ;; This function is called by:
  4640 ;;		_MTOUCH_Button_ServiceAll
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           
  4645                           ;psect for function _Button_Service
  4646  0201                     _Button_Service:	
  4647                           
  4648                           ;incstack = 0
  4649                           ; Regs used in _Button_Service: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4650                           ;Button_Service@name stored from wreg
  4651  0201  00B1               	movwf	Button_Service@name
  4652                           
  4653                           ;mtouch_button.c: 179: mtouch_button_t* button = &mtouch_button[name];
  4654  0202  0E31               	swapf	Button_Service@name,w
  4655  0203  39F0               	andlw	240
  4656  0204  3EB2               	addlw	(low (_mtouch_button| 0))& (0+255)
  4657  0205  00B2               	movwf	Button_Service@button
  4658                           
  4659                           ;mtouch_button.c: 181: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  4660  0206  0A32               	incf	Button_Service@button,w
  4661  0207  0086               	movwf	6
  4662  0208  0187               	clrf	7
  4663  0209  0801               	movf	1,w
  4664  020A  2336  3180         	fcall	_MTOUCH_Sensor_wasSampled
  4665  020C  3A00               	xorlw	0
  4666  020D  1903               	skipnz
  4667  020E  0008               	return
  4668  020F  0A32               	incf	Button_Service@button,w
  4669  0210  0086               	movwf	6
  4670  0211  0187               	clrf	7
  4671  0212  0801               	movf	1,w
  4672  0213  2335  3180         	fcall	_MTOUCH_Sensor_isCalibrated
  4673  0215  3A00               	xorlw	0
  4674  0216  1903               	skipnz
  4675  0217  0008               	return
  4676                           
  4677                           ;mtouch_button.c: 182: {
  4678                           ;mtouch_button.c: 183: Button_Reading_Update(button);
  4679  0218  0832               	movf	Button_Service@button,w
  4680  0219  22A2  3180         	fcall	_Button_Reading_Update
  4681                           
  4682                           ;mtouch_button.c: 184: Button_Deviation_Update(button);
  4683  021B  0832               	movf	Button_Service@button,w
  4684  021C  2239  3180         	fcall	_Button_Deviation_Update
  4685                           
  4686                           ;mtouch_button.c: 186: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  4687  021E  0832               	movf	Button_Service@button,w
  4688  021F  3E02               	addlw	2
  4689  0220  0086               	movwf	6
  4690  0221  3003               	movlw	3
  4691  0222  0187               	clrf	7
  4692  0223  0201               	subwf	1,w
  4693                           
  4694                           ;mtouch_button.c: 187: {
  4695                           ;mtouch_button.c: 188: MTOUCH_Button_Initialize(button->name);
  4696  0224  0832               	movf	Button_Service@button,w
  4697  0225  1C03               	skipc
  4698  0226  2A2B               	goto	L4
  4699  0227  0086               	movwf	6
  4700  0228  0801               	movf	1,w
  4701  0229  2314               	fcall	_MTOUCH_Button_Initialize
  4702                           
  4703                           ;mtouch_button.c: 189: }
  4704                           ;mtouch_button.c: 190: Button_StateMachine[button->state](button);
  4705  022A  0832               	movf	Button_Service@button,w
  4706  022B                     L4:	
  4707  022B  00AC               	movwf	Button_State_Pressed@button
  4708  022C  0832               	movf	Button_Service@button,w
  4709  022D  3E02               	addlw	2
  4710  022E  0086               	movwf	6
  4711  022F  0187               	clrf	7
  4712  0230  3501               	lslf	1,w
  4713  0231  3ED2               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  4714  0232  0086               	movwf	6
  4715  0233  3F41               	moviw [1]fsr1
  4716  0234  008A               	movwf	10
  4717  0235  3F40               	moviw [0]fsr1
  4718  0236  000A               	callw
  4719  0237  3180               	pagesel	$
  4720  0238  0008               	return
  4721  0239                     __end_of_Button_Service:	
  4722  0239                     __ptext62:	
  4723 ;; *************** function _Button_Deviation_Update *****************
  4724 ;; Defined at:
  4725 ;;		line 357 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;  button          1    wreg     PTR struct .
  4728 ;;		 -> mtouch_button(32), 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  button          1   14[BANK0 ] PTR struct .
  4731 ;;		 -> mtouch_button(32), 
  4732 ;;  deviation       4   10[BANK0 ] long 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4737 ;; Tracked objects:
  4738 ;;		On entry : 1F/0
  4739 ;;		On exit  : 1F/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4743 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4744 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;Total ram usage:       15 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    4
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_Button_Service
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _Button_Deviation_Update
  4758  0239                     _Button_Deviation_Update:	
  4759                           
  4760                           ;incstack = 0
  4761                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  4762                           ;Button_Deviation_Update@button stored from wreg
  4763  0239  00AE               	movwf	Button_Deviation_Update@button
  4764                           
  4765                           ;mtouch_button.c: 359: int32_t deviation;
  4766                           ;mtouch_button.c: 361: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4)));
  4767  023A  3E05               	addlw	5
  4768  023B  0086               	movwf	6
  4769  023C  0187               	clrf	7
  4770  023D  3F40               	moviw [0]fsr1
  4771  023E  00A0               	movwf	??_Button_Deviation_Update
  4772  023F  3F41               	moviw [1]fsr1
  4773  0240  00A1               	movwf	??_Button_Deviation_Update+1
  4774  0241  3F42               	moviw [2]fsr1
  4775  0242  00A2               	movwf	??_Button_Deviation_Update+2
  4776  0243  3F43               	moviw [3]fsr1
  4777  0244  00A3               	movwf	??_Button_Deviation_Update+3
  4778  0245  3004               	movlw	4
  4779  0246                     u1535:	
  4780  0246  36A3               	lsrf	??_Button_Deviation_Update+3,f
  4781  0247  0CA2               	rrf	??_Button_Deviation_Update+2,f
  4782  0248  0CA1               	rrf	??_Button_Deviation_Update+1,f
  4783  0249  0CA0               	rrf	??_Button_Deviation_Update,f
  4784  024A  0B89               	decfsz	9,f
  4785  024B  2A46               	goto	u1535
  4786  024C  082E               	movf	Button_Deviation_Update@button,w
  4787  024D  3E03               	addlw	3
  4788  024E  0086               	movwf	6
  4789  024F  0187               	clrf	7
  4790  0250  3F40               	moviw [0]fsr1
  4791  0251  00A4               	movwf	??_Button_Deviation_Update+4
  4792  0252  3F41               	moviw [1]fsr1
  4793  0253  00A5               	movwf	??_Button_Deviation_Update+5
  4794  0254  0824               	movf	??_Button_Deviation_Update+4,w
  4795  0255  00A6               	movwf	??_Button_Deviation_Update+6
  4796  0256  0825               	movf	??_Button_Deviation_Update+5,w
  4797  0257  00A7               	movwf	??_Button_Deviation_Update+7
  4798  0258  01A8               	clrf	??_Button_Deviation_Update+8
  4799  0259  01A9               	clrf	??_Button_Deviation_Update+9
  4800  025A  0820               	movf	??_Button_Deviation_Update,w
  4801  025B  02A6               	subwf	??_Button_Deviation_Update+6,f
  4802  025C  0821               	movf	??_Button_Deviation_Update+1,w
  4803  025D  3BA7               	subwfb	??_Button_Deviation_Update+7,f
  4804  025E  0822               	movf	??_Button_Deviation_Update+2,w
  4805  025F  3BA8               	subwfb	??_Button_Deviation_Update+8,f
  4806  0260  0823               	movf	??_Button_Deviation_Update+3,w
  4807  0261  3BA9               	subwfb	??_Button_Deviation_Update+9,f
  4808  0262  0829               	movf	??_Button_Deviation_Update+9,w
  4809  0263  00AD               	movwf	Button_Deviation_Update@deviation+3
  4810  0264  0828               	movf	??_Button_Deviation_Update+8,w
  4811  0265  00AC               	movwf	Button_Deviation_Update@deviation+2
  4812  0266  0827               	movf	??_Button_Deviation_Update+7,w
  4813  0267  00AB               	movwf	Button_Deviation_Update@deviation+1
  4814  0268  0826               	movf	??_Button_Deviation_Update+6,w
  4815  0269  00AA               	movwf	Button_Deviation_Update@deviation
  4816                           
  4817                           ;mtouch_button.c: 364: deviation = deviation >> (button->scaling);
  4818  026A  082E               	movf	Button_Deviation_Update@button,w
  4819  026B  3E0F               	addlw	15
  4820  026C  0086               	movwf	6
  4821  026D  0A01               	incf	1,w
  4822  026E  2A73               	goto	u1540
  4823  026F                     u1545:	
  4824  026F  37AD               	asrf	Button_Deviation_Update@deviation+3,f
  4825  0270  0CAC               	rrf	Button_Deviation_Update@deviation+2,f
  4826  0271  0CAB               	rrf	Button_Deviation_Update@deviation+1,f
  4827  0272  0CAA               	rrf	Button_Deviation_Update@deviation,f
  4828  0273                     u1540:	
  4829  0273  0B89               	decfsz	9,f
  4830  0274  2A6F               	goto	u1545
  4831                           
  4832                           ;mtouch_button.c: 367: if (deviation > ((127)))
  4833  0275  1BAD               	btfsc	Button_Deviation_Update@deviation+3,7
  4834  0276  2A89               	goto	l2581
  4835  0277  082D               	movf	Button_Deviation_Update@deviation+3,w
  4836  0278  1D03               	btfss	3,2
  4837  0279  2A84               	goto	l2579
  4838  027A  082C               	movf	Button_Deviation_Update@deviation+2,w
  4839  027B  1D03               	btfss	3,2
  4840  027C  2A84               	goto	l2579
  4841  027D  082B               	movf	Button_Deviation_Update@deviation+1,w
  4842  027E  1D03               	btfss	3,2
  4843  027F  2A84               	goto	l2579
  4844  0280  3080               	movlw	128
  4845  0281  022A               	subwf	Button_Deviation_Update@deviation,w
  4846  0282  1C03               	btfss	3,0
  4847  0283  2A89               	goto	l2581
  4848  0284                     l2579:	
  4849                           
  4850                           ;mtouch_button.c: 368: {
  4851                           ;mtouch_button.c: 369: deviation = ((127));
  4852  0284  307F               	movlw	127
  4853  0285  00AA               	movwf	Button_Deviation_Update@deviation
  4854  0286  01AB               	clrf	Button_Deviation_Update@deviation+1
  4855  0287  01AC               	clrf	Button_Deviation_Update@deviation+2
  4856  0288  01AD               	clrf	Button_Deviation_Update@deviation+3
  4857  0289                     l2581:	
  4858                           
  4859                           ;mtouch_button.c: 370: }
  4860                           ;mtouch_button.c: 371: if (deviation < ((-128)))
  4861  0289  1FAD               	btfss	Button_Deviation_Update@deviation+3,7
  4862  028A  2A9B               	goto	l2585
  4863  028B  3080               	movlw	128
  4864  028C  022A               	subwf	Button_Deviation_Update@deviation,w
  4865  028D  30FF               	movlw	255
  4866  028E  3B2B               	subwfb	Button_Deviation_Update@deviation+1,w
  4867  028F  30FF               	movlw	255
  4868  0290  3B2C               	subwfb	Button_Deviation_Update@deviation+2,w
  4869  0291  30FF               	movlw	255
  4870  0292  3B2D               	subwfb	Button_Deviation_Update@deviation+3,w
  4871  0293  1803               	btfsc	3,0
  4872  0294  2A9B               	goto	l2585
  4873                           
  4874                           ;mtouch_button.c: 372: {
  4875                           ;mtouch_button.c: 373: deviation = ((-128));
  4876  0295  30FF               	movlw	255
  4877  0296  00AD               	movwf	Button_Deviation_Update@deviation+3
  4878  0297  00AC               	movwf	Button_Deviation_Update@deviation+2
  4879  0298  00AB               	movwf	Button_Deviation_Update@deviation+1
  4880  0299  3080               	movlw	128
  4881  029A  00AA               	movwf	Button_Deviation_Update@deviation
  4882  029B                     l2585:	
  4883                           
  4884                           ;mtouch_button.c: 374: }
  4885                           ;mtouch_button.c: 376: button->deviation = (mtouch_button_deviation_t)deviation;
  4886  029B  082E               	movf	Button_Deviation_Update@button,w
  4887  029C  3E09               	addlw	9
  4888  029D  0086               	movwf	6
  4889  029E  0187               	clrf	7
  4890  029F  082A               	movf	Button_Deviation_Update@deviation,w
  4891  02A0  0081               	movwf	1
  4892  02A1  0008               	return
  4893  02A2                     __end_of_Button_Deviation_Update:	
  4894  02A2                     __ptext59:	
  4895 ;; *************** function _Button_Reading_Update *****************
  4896 ;; Defined at:
  4897 ;;		line 406 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  button          1    wreg     PTR struct .
  4900 ;;		 -> mtouch_button(32), 
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  button          1    9[BANK0 ] PTR struct .
  4903 ;;		 -> mtouch_button(32), 
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  1    wreg      void 
  4906 ;; Registers used:
  4907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4908 ;; Tracked objects:
  4909 ;;		On entry : 1F/0
  4910 ;;		On exit  : 1F/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;Total ram usage:        3 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    6
  4920 ;; This function calls:
  4921 ;;		_MTOUCH_Sensor_RawSample_Get
  4922 ;; This function is called by:
  4923 ;;		_Button_Service
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           
  4928                           ;psect for function _Button_Reading_Update
  4929  02A2                     _Button_Reading_Update:	
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4933                           ;Button_Reading_Update@button stored from wreg
  4934  02A2  00A9               	movwf	Button_Reading_Update@button
  4935                           
  4936                           ;mtouch_button.c: 408: if (GIE == (uint8_t)1)
  4937  02A3  1F8B               	btfss	11,7	;volatile
  4938  02A4  2AD3               	goto	l2571
  4939                           
  4940                           ;mtouch_button.c: 409: {
  4941                           ;mtouch_button.c: 410: GIE = (uint8_t)0;
  4942  02A5  138B               	bcf	11,7	;volatile
  4943                           
  4944                           ;mtouch_button.c: 411: button->reading -= button->reading>>(uint8_t)2;
  4945  02A6  3E03               	addlw	3
  4946  02A7  0086               	movwf	6
  4947  02A8  0187               	clrf	7
  4948  02A9  3F40               	moviw [0]fsr1
  4949  02AA  00A7               	movwf	??_Button_Reading_Update
  4950  02AB  3F41               	moviw [1]fsr1
  4951  02AC  00A8               	movwf	??_Button_Reading_Update+1
  4952  02AD  36A8               	lsrf	??_Button_Reading_Update+1,f
  4953  02AE  0CA7               	rrf	??_Button_Reading_Update,f
  4954  02AF  36A8               	lsrf	??_Button_Reading_Update+1,f
  4955  02B0  0CA7               	rrf	??_Button_Reading_Update,f
  4956  02B1  0829               	movf	Button_Reading_Update@button,w
  4957  02B2  3E03               	addlw	3
  4958  02B3  0086               	movwf	6
  4959  02B4  0827               	movf	??_Button_Reading_Update,w
  4960  02B5  0281               	subwf	1,f
  4961  02B6  3141               	addfsr 1,1
  4962  02B7  0828               	movf	??_Button_Reading_Update+1,w
  4963  02B8  3B81               	subwfb	1,f
  4964  02B9  317F               	addfsr 1,-1
  4965                           
  4966                           ;mtouch_button.c: 412: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor)>>(
      +                          uint8_t)2;
  4967  02BA  0A29               	incf	Button_Reading_Update@button,w
  4968  02BB  0086               	movwf	6
  4969  02BC  0187               	clrf	7
  4970  02BD  0801               	movf	1,w
  4971  02BE  2300               	fcall	_MTOUCH_Sensor_RawSample_Get
  4972  02BF  0823               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  4973  02C0  00A7               	movwf	??_Button_Reading_Update
  4974  02C1  0824               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  4975  02C2  00A8               	movwf	??_Button_Reading_Update+1
  4976  02C3  36A8               	lsrf	??_Button_Reading_Update+1,f
  4977  02C4  0CA7               	rrf	??_Button_Reading_Update,f
  4978  02C5  36A8               	lsrf	??_Button_Reading_Update+1,f
  4979  02C6  0CA7               	rrf	??_Button_Reading_Update,f
  4980  02C7  0829               	movf	Button_Reading_Update@button,w
  4981  02C8  3E03               	addlw	3
  4982  02C9  0086               	movwf	6
  4983  02CA  0187               	clrf	7
  4984  02CB  0827               	movf	??_Button_Reading_Update,w
  4985  02CC  0781               	addwf	1,f
  4986  02CD  3141               	addfsr 1,1
  4987  02CE  0828               	movf	??_Button_Reading_Update+1,w
  4988  02CF  3D81               	addwfc	1,f
  4989  02D0  317F               	addfsr 1,-1
  4990                           
  4991                           ;mtouch_button.c: 413: GIE = (uint8_t)1;
  4992  02D1  178B               	bsf	11,7	;volatile
  4993                           
  4994                           ;mtouch_button.c: 414: }
  4995  02D2  0008               	return
  4996  02D3                     l2571:	
  4997                           
  4998                           ;mtouch_button.c: 415: else
  4999                           ;mtouch_button.c: 416: {
  5000                           ;mtouch_button.c: 417: button->reading -= button->reading>>(uint8_t)2;
  5001  02D3  0829               	movf	Button_Reading_Update@button,w
  5002  02D4  3E03               	addlw	3
  5003  02D5  0086               	movwf	6
  5004  02D6  0187               	clrf	7
  5005  02D7  3F40               	moviw [0]fsr1
  5006  02D8  00A7               	movwf	??_Button_Reading_Update
  5007  02D9  3F41               	moviw [1]fsr1
  5008  02DA  00A8               	movwf	??_Button_Reading_Update+1
  5009  02DB  36A8               	lsrf	??_Button_Reading_Update+1,f
  5010  02DC  0CA7               	rrf	??_Button_Reading_Update,f
  5011  02DD  36A8               	lsrf	??_Button_Reading_Update+1,f
  5012  02DE  0CA7               	rrf	??_Button_Reading_Update,f
  5013  02DF  0829               	movf	Button_Reading_Update@button,w
  5014  02E0  3E03               	addlw	3
  5015  02E1  0086               	movwf	6
  5016  02E2  0827               	movf	??_Button_Reading_Update,w
  5017  02E3  0281               	subwf	1,f
  5018  02E4  3141               	addfsr 1,1
  5019  02E5  0828               	movf	??_Button_Reading_Update+1,w
  5020  02E6  3B81               	subwfb	1,f
  5021  02E7  317F               	addfsr 1,-1
  5022                           
  5023                           ;mtouch_button.c: 418: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor)>>(
      +                          uint8_t)2;
  5024  02E8  0A29               	incf	Button_Reading_Update@button,w
  5025  02E9  0086               	movwf	6
  5026  02EA  0187               	clrf	7
  5027  02EB  0801               	movf	1,w
  5028  02EC  2300               	fcall	_MTOUCH_Sensor_RawSample_Get
  5029  02ED  0823               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  5030  02EE  00A7               	movwf	??_Button_Reading_Update
  5031  02EF  0824               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  5032  02F0  00A8               	movwf	??_Button_Reading_Update+1
  5033  02F1  36A8               	lsrf	??_Button_Reading_Update+1,f
  5034  02F2  0CA7               	rrf	??_Button_Reading_Update,f
  5035  02F3  36A8               	lsrf	??_Button_Reading_Update+1,f
  5036  02F4  0CA7               	rrf	??_Button_Reading_Update,f
  5037  02F5  0829               	movf	Button_Reading_Update@button,w
  5038  02F6  3E03               	addlw	3
  5039  02F7  0086               	movwf	6
  5040  02F8  0187               	clrf	7
  5041  02F9  0827               	movf	??_Button_Reading_Update,w
  5042  02FA  0781               	addwf	1,f
  5043  02FB  3141               	addfsr 1,1
  5044  02FC  0828               	movf	??_Button_Reading_Update+1,w
  5045  02FD  3D81               	addwfc	1,f
  5046  02FE  317F               	addfsr 1,-1
  5047  02FF  0008               	return
  5048  0300                     __end_of_Button_Reading_Update:	
  5049  0300                     __ptext60:	
  5050 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  5051 ;; Defined at:
  5052 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;  name            1    wreg     enum E4937
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  name            1    6[BANK0 ] enum E4937
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  2    3[BANK0 ] unsigned int 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 1F/0
  5063 ;;		On exit  : 1F/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5066 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;Total ram usage:        4 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    5
  5073 ;; This function calls:
  5074 ;;		___bmul
  5075 ;; This function is called by:
  5076 ;;		_Button_Reading_Update
  5077 ;;		_Button_Baseline_Initialize
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _MTOUCH_Sensor_RawSample_Get
  5083  0300                     _MTOUCH_Sensor_RawSample_Get:	
  5084                           
  5085                           ;incstack = 0
  5086                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  5087                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
  5088  0300  00A6               	movwf	MTOUCH_Sensor_RawSample_Get@name
  5089                           
  5090                           ;mtouch_sensor.c: 401: if (name < 2)
  5091  0301  3002               	movlw	2
  5092  0302  0226               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
  5093  0303  1803               	skipnc
  5094  0304  2B11               	goto	l2379
  5095                           
  5096                           ;mtouch_sensor.c: 402: {
  5097                           ;mtouch_sensor.c: 403: return mtouch_sensor[name].rawSample;
  5098  0305  3009               	movlw	9
  5099  0306  00A0               	movwf	___bmul@multiplicand
  5100  0307  0826               	movf	MTOUCH_Sensor_RawSample_Get@name,w
  5101  0308  2345               	fcall	___bmul
  5102  0309  3EE2               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
  5103  030A  0086               	movwf	6
  5104  030B  0187               	clrf	7
  5105  030C  3F40               	moviw [0]fsr1
  5106  030D  00A3               	movwf	?_MTOUCH_Sensor_RawSample_Get
  5107  030E  3F41               	moviw [1]fsr1
  5108  030F  00A4               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
  5109  0310  0008               	return
  5110  0311                     l2379:	
  5111                           
  5112                           ;mtouch_sensor.c: 405: else
  5113                           ;mtouch_sensor.c: 406: return (mtouch_sensor_sample_t)0;
  5114  0311  01A3               	clrf	?_MTOUCH_Sensor_RawSample_Get
  5115  0312  01A4               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
  5116  0313  0008               	return
  5117  0314                     __end_of_MTOUCH_Sensor_RawSample_Get:	
  5118  0314                     __ptext54:	
  5119 ;; *************** function _MTOUCH_Button_Initialize *****************
  5120 ;; Defined at:
  5121 ;;		line 138 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  name            1    wreg     enum E4949
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  name            1    0[BANK0 ] enum E4949
  5126 ;;  button          1    1[BANK0 ] PTR struct .
  5127 ;;		 -> mtouch_button(32), 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 1F/0
  5134 ;;		On exit  : 1F/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5138 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;Total ram usage:        2 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    5
  5144 ;; This function calls:
  5145 ;;		_MTOUCH_Sensor_Calibrate
  5146 ;; This function is called by:
  5147 ;;		_MTOUCH_Button_InitializeAll
  5148 ;;		_Button_Service
  5149 ;;		_Button_State_NotPressed
  5150 ;;		_Button_State_Pressed
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           
  5155                           ;psect for function _MTOUCH_Button_Initialize
  5156  0314                     _MTOUCH_Button_Initialize:	
  5157                           
  5158                           ;incstack = 0
  5159                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5160                           ;MTOUCH_Button_Initialize@name stored from wreg
  5161  0314  00A0               	movwf	MTOUCH_Button_Initialize@name
  5162                           
  5163                           ;mtouch_button.c: 140: mtouch_button_t* button = &mtouch_button[name];
  5164  0315  0E20               	swapf	MTOUCH_Button_Initialize@name,w
  5165  0316  39F0               	andlw	240
  5166  0317  3EB2               	addlw	(low (_mtouch_button| 0))& (0+255)
  5167  0318  00A1               	movwf	MTOUCH_Button_Initialize@button
  5168                           
  5169                           ;mtouch_button.c: 142: button->state = MTOUCH_BUTTON_STATE_initializing;
  5170  0319  3E02               	addlw	2
  5171  031A  0086               	movwf	6
  5172  031B  0187               	clrf	7
  5173  031C  0181               	clrf	1
  5174                           
  5175                           ;mtouch_button.c: 143: button->baseline = (mtouch_button_baseline_t)0;
  5176  031D  0821               	movf	MTOUCH_Button_Initialize@button,w
  5177  031E  3E05               	addlw	5
  5178  031F  0086               	movwf	6
  5179  0320  3000               	movlw	0
  5180  0321  3FC0               	movwi [0]fsr1
  5181  0322  3FC1               	movwi [1]fsr1
  5182  0323  3FC2               	movwi [2]fsr1
  5183  0324  3FC3               	movwi [3]fsr1
  5184                           
  5185                           ;mtouch_button.c: 144: button->counter = (mtouch_button_statecounter_t)0;
  5186  0325  0821               	movf	MTOUCH_Button_Initialize@button,w
  5187  0326  3E0A               	addlw	10
  5188  0327  0086               	movwf	6
  5189  0328  3000               	movlw	0
  5190  0329  3FC0               	movwi [0]fsr1
  5191  032A  3FC1               	movwi [1]fsr1
  5192                           
  5193                           ;mtouch_button.c: 145: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  5194  032B  0821               	movf	MTOUCH_Button_Initialize@button,w
  5195  032C  3E0C               	addlw	12
  5196  032D  0086               	movwf	6
  5197  032E  3000               	movlw	0
  5198  032F  3FC0               	movwi [0]fsr1
  5199  0330  3FC1               	movwi [1]fsr1
  5200                           
  5201                           ;mtouch_button.c: 147: MTOUCH_Sensor_Calibrate(button->sensor);
  5202  0331  0A21               	incf	MTOUCH_Button_Initialize@button,w
  5203  0332  0086               	movwf	6
  5204  0333  0801               	movf	1,w
  5205  0334  2C03               	ljmp	l457
  5206  0335                     __end_of_MTOUCH_Button_Initialize:	
  5207  0335                     __ptext50:	
  5208 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  5209 ;; Defined at:
  5210 ;;		line 508 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;  sensor          1    wreg     enum E4937
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  sensor          1    0[COMMON] enum E4937
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      unsigned char 
  5217 ;; Registers used:
  5218 ;;		wreg
  5219 ;; Tracked objects:
  5220 ;;		On entry : 1F/0
  5221 ;;		On exit  : 1F/0
  5222 ;;		Unchanged: 1F/0
  5223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;Total ram usage:        0 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    4
  5231 ;; This function calls:
  5232 ;;		Nothing
  5233 ;; This function is called by:
  5234 ;;		_Button_Service
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function _MTOUCH_Sensor_isCalibrated
  5240  0335                     _MTOUCH_Sensor_isCalibrated:	
  5241                           
  5242                           ;mtouch_sensor.c: 511: return 1;
  5243                           
  5244                           ;incstack = 0
  5245                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg]
  5246  0335  3401               	retlw	1
  5247  0336                     __end_of_MTOUCH_Sensor_isCalibrated:	
  5248  0336                     __ptext49:	
  5249 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  5250 ;; Defined at:
  5251 ;;		line 535 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  sensor          1    wreg     enum E4937
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  sensor          1    3[BANK0 ] enum E4937
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      unsigned char 
  5258 ;; Registers used:
  5259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 1F/0
  5262 ;;		On exit  : 1F/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;Total ram usage:        1 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    5
  5272 ;; This function calls:
  5273 ;;		___bmul
  5274 ;; This function is called by:
  5275 ;;		_Button_Service
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function _MTOUCH_Sensor_wasSampled
  5281  0336                     _MTOUCH_Sensor_wasSampled:	
  5282                           
  5283                           ;incstack = 0
  5284                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5285                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  5286  0336  00A3               	movwf	MTOUCH_Sensor_wasSampled@sensor
  5287                           
  5288                           ;mtouch_sensor.c: 537: if(sensor < 2)
  5289  0337  3002               	movlw	2
  5290  0338  0223               	subwf	MTOUCH_Sensor_wasSampled@sensor,w
  5291  0339  1803               	skipnc
  5292  033A  3400               	retlw	0
  5293                           
  5294                           ;mtouch_sensor.c: 538: return (bool)mtouch_sensor[sensor].sampled;
  5295  033B  3009               	movlw	9
  5296  033C  00A0               	movwf	___bmul@multiplicand
  5297  033D  0823               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  5298  033E  2345               	fcall	___bmul
  5299  033F  3EE4               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  5300  0340  0086               	movwf	6
  5301  0341  0187               	clrf	7
  5302  0342  0C01               	rrf	1,w
  5303  0343  3901               	andlw	1
  5304  0344  0008               	return
  5305  0345                     __end_of_MTOUCH_Sensor_wasSampled:	
  5306                           ;mtouch_sensor.c: 539: else
  5307                           ;mtouch_sensor.c: 540: return 0;
  5308                           
  5309  0345                     __ptext61:	
  5310 ;; *************** function ___bmul *****************
  5311 ;; Defined at:
  5312 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul8.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  multiplier      1    wreg     unsigned char 
  5315 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  multiplier      1    2[BANK0 ] unsigned char 
  5318 ;;  product         1    1[BANK0 ] unsigned char 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  1    wreg      unsigned char 
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0
  5323 ;; Tracked objects:
  5324 ;;		On entry : 1F/0
  5325 ;;		On exit  : 1F/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:        3 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    4
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_MTOUCH_Sensor_Initialize
  5339 ;;		_Sensor_Service
  5340 ;;		_Sensor_Acq_ExecuteScan
  5341 ;;		_MTOUCH_Sensor_RawSample_Get
  5342 ;;		_MTOUCH_Sensor_Enable
  5343 ;;		_MTOUCH_Sensor_wasSampled
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function ___bmul
  5349  0345                     ___bmul:	
  5350                           
  5351                           ;incstack = 0
  5352                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5353                           ;___bmul@multiplier stored from wreg
  5354  0345  00A2               	movwf	___bmul@multiplier
  5355  0346  01A1               	clrf	___bmul@product
  5356  0347  0820               	movf	___bmul@multiplicand,w
  5357  0348  1822               	btfsc	___bmul@multiplier,0
  5358  0349  07A1               	addwf	___bmul@product,f
  5359  034A  35A0               	lslf	___bmul@multiplicand,f
  5360  034B  0820               	movf	___bmul@multiplicand,w
  5361  034C  18A2               	btfsc	___bmul@multiplier,1
  5362  034D  07A1               	addwf	___bmul@product,f
  5363  034E  35A0               	lslf	___bmul@multiplicand,f
  5364  034F  0820               	movf	___bmul@multiplicand,w
  5365  0350  1922               	btfsc	___bmul@multiplier,2
  5366  0351  07A1               	addwf	___bmul@product,f
  5367  0352  35A0               	lslf	___bmul@multiplicand,f
  5368  0353  0820               	movf	___bmul@multiplicand,w
  5369  0354  19A2               	btfsc	___bmul@multiplier,3
  5370  0355  07A1               	addwf	___bmul@product,f
  5371  0356  35A0               	lslf	___bmul@multiplicand,f
  5372  0357  0820               	movf	___bmul@multiplicand,w
  5373  0358  1A22               	btfsc	___bmul@multiplier,4
  5374  0359  07A1               	addwf	___bmul@product,f
  5375  035A  35A0               	lslf	___bmul@multiplicand,f
  5376  035B  0820               	movf	___bmul@multiplicand,w
  5377  035C  1AA2               	btfsc	___bmul@multiplier,5
  5378  035D  07A1               	addwf	___bmul@product,f
  5379  035E  35A0               	lslf	___bmul@multiplicand,f
  5380  035F  0820               	movf	___bmul@multiplicand,w
  5381  0360  1B22               	btfsc	___bmul@multiplier,6
  5382  0361  07A1               	addwf	___bmul@product,f
  5383  0362  35A0               	lslf	___bmul@multiplicand,f
  5384  0363  0820               	movf	___bmul@multiplicand,w
  5385  0364  1BA2               	btfsc	___bmul@multiplier,7
  5386  0365  07A1               	addwf	___bmul@product,f
  5387  0366  0821               	movf	___bmul@product,w
  5388  0367  0008               	return
  5389  0368                     __end_of___bmul:	
  5390  0368                     __ptext27:	
  5391 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  5392 ;; Defined at:
  5393 ;;		line 203 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;		None
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  sensor          1   22[BANK0 ] enum E4937
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      unsigned char 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 1F/0
  5404 ;;		On exit  : 1F/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;Total ram usage:        1 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    9
  5414 ;; This function calls:
  5415 ;;		_Sensor_Service
  5416 ;; This function is called by:
  5417 ;;		_MTOUCH_Service_Mainloop
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function _MTOUCH_Sensor_SampleAll
  5423  0368                     _MTOUCH_Sensor_SampleAll:	
  5424                           
  5425                           ;mtouch_sensor.c: 205: enum mtouch_sensor_names sensor;
  5426                           ;mtouch_sensor.c: 206: for (sensor = 0; sensor < 2; sensor++)
  5427                           
  5428                           ;incstack = 0
  5429                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5430  0368  01B6               	clrf	MTOUCH_Sensor_SampleAll@sensor
  5431  0369                     l2795:	
  5432                           
  5433                           ;mtouch_sensor.c: 207: {
  5434                           ;mtouch_sensor.c: 208: if(Sensor_Service(sensor)!= MTOUCH_SENSOR_ERROR_none)
  5435  0369  0836               	movf	MTOUCH_Sensor_SampleAll@sensor,w
  5436  036A  2375  3180         	fcall	_Sensor_Service
  5437  036C  3A00               	xorlw	0
  5438  036D  1D03               	btfss	3,2
  5439                           
  5440                           ;mtouch_sensor.c: 209: return 0;
  5441  036E  3400               	retlw	0
  5442  036F  3002               	movlw	2
  5443  0370  0AB6               	incf	MTOUCH_Sensor_SampleAll@sensor,f
  5444  0371  0236               	subwf	MTOUCH_Sensor_SampleAll@sensor,w
  5445  0372  1803               	btfsc	3,0
  5446                           
  5447                           ;mtouch_sensor.c: 210: }
  5448                           ;mtouch_sensor.c: 211: return 1;
  5449  0373  3401               	retlw	1
  5450  0374  2B69               	goto	l2795
  5451  0375                     __end_of_MTOUCH_Sensor_SampleAll:	
  5452  0375                     __ptext28:	
  5453 ;; *************** function _Sensor_Service *****************
  5454 ;; Defined at:
  5455 ;;		line 220 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  name            1    wreg     enum E4937
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  name            1   19[BANK0 ] enum E4937
  5460 ;;  sensor          1   21[BANK0 ] PTR struct .
  5461 ;;		 -> mtouch_sensor(18), 
  5462 ;;  error           1   20[BANK0 ] enum E4940
  5463 ;; Return value:  Size  Location     Type
  5464 ;;                  1    wreg      enum E4940
  5465 ;; Registers used:
  5466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5467 ;; Tracked objects:
  5468 ;;		On entry : 1F/0
  5469 ;;		On exit  : 1F/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;Total ram usage:        3 bytes
  5477 ;; Hardware stack levels used:    1
  5478 ;; Hardware stack levels required when called:    8
  5479 ;; This function calls:
  5480 ;;		_Sensor_Acquisition
  5481 ;;		_Sensor_DefaultCallback
  5482 ;;		_Sensor_RawSample_Update
  5483 ;;		_Sensor_setSampled
  5484 ;;		___bmul
  5485 ;; This function is called by:
  5486 ;;		_MTOUCH_Sensor_SampleAll
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           
  5491                           ;psect for function _Sensor_Service
  5492  0375                     _Sensor_Service:	
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5496                           ;Sensor_Service@name stored from wreg
  5497  0375  00B3               	movwf	Sensor_Service@name
  5498                           
  5499                           ;mtouch_sensor.c: 222: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  5500  0376  3009               	movlw	9
  5501  0377  00A0               	movwf	___bmul@multiplicand
  5502  0378  0833               	movf	Sensor_Service@name,w
  5503  0379  2345  3180         	fcall	___bmul
  5504  037B  3EDC               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  5505  037C  00B5               	movwf	Sensor_Service@sensor
  5506                           
  5507                           ;mtouch_sensor.c: 223: enum mtouch_sensor_error error = Sensor_Acquisition(sensor);
  5508  037D  23A1  3180         	fcall	_Sensor_Acquisition
  5509  037F  00B4               	movwf	Sensor_Service@error
  5510                           
  5511                           ;mtouch_sensor.c: 226: switch(error)
  5512  0380  2B91               	goto	l2755
  5513  0381                     l2749:	
  5514                           
  5515                           ;mtouch_sensor.c: 229: {
  5516                           ;mtouch_sensor.c: 230: Sensor_RawSample_Update(sensor);
  5517  0381  0835               	movf	Sensor_Service@sensor,w
  5518  0382  318A  22CB  3180   	fcall	_Sensor_RawSample_Update
  5519                           
  5520                           ;mtouch_sensor.c: 231: Sensor_setSampled(sensor);
  5521  0385  0835               	movf	Sensor_Service@sensor,w
  5522  0386                     i3L__ptext29:	
  5523                           
  5524                           ;psect for function _Sensor_setSampled
  5525  0386                     i3L_Sensor_setSampled:	
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5529                           ;Sensor_setSampled@sensor stored from wreg
  5530  0386  00A0               	movwf	Sensor_setSampled@sensor
  5531  0387                     i3Ll2683:	
  5532                           
  5533                           ;mtouch_sensor.c: 550: sensor->sampled = 1;
  5534  0387  0820               	movf	Sensor_setSampled@sensor,w
  5535  0388  3E08               	addlw	8
  5536  0389  0086               	movwf	6
  5537  038A  0187               	clrf	7
  5538  038B  1481               	bsf	1,1
  5539  038C                     i3Ll473:	
  5540                           
  5541                           ;mtouch_sensor.c: 232: callback_sampled(name);
  5542  038C  0833               	movf	Sensor_Service@name,w
  5543  038D  00A0               	movwf	Sensor_DefaultCallback@sensor
  5544  038E  2402  3180         	fcall	_Sensor_DefaultCallback
  5545                           
  5546                           ;mtouch_sensor.c: 233: }
  5547                           ;mtouch_sensor.c: 234: break;
  5548  0390  2B9F               	goto	l2757
  5549  0391                     l2755:	
  5550  0391  0834               	movf	Sensor_Service@error,w
  5551                           
  5552                           ; Switch size 1, requested type "speed"
  5553                           ; Number of cases is 4, Range of values is 0 to 255
  5554                           ; switch strategies available:
  5555                           ; Name         Instructions Cycles
  5556                           ; simple_byte           13     7 (average)
  5557                           ; jumptable            260     6 (fixed)
  5558                           ;	Chosen strategy is simple_byte
  5559  0392  3A00               	xorlw	0	; case 0
  5560  0393  1903               	skipnz
  5561  0394  2B81               	goto	l2749
  5562  0395  3AFD               	xorlw	253	; case 253
  5563  0396  1903               	skipnz
  5564  0397  2B9F               	goto	l2757
  5565  0398  3A03               	xorlw	3	; case 254
  5566  0399  1903               	skipnz
  5567  039A  2B9F               	goto	l2757
  5568  039B  3A01               	xorlw	1	; case 255
  5569  039C  1903               	skipnz
  5570  039D  2B9F               	goto	l2757
  5571  039E  2B9F               	goto	l2757
  5572  039F                     l2757:	
  5573                           
  5574                           ;mtouch_sensor.c: 243: return error;
  5575  039F  0834               	movf	Sensor_Service@error,w
  5576  03A0  0008               	return
  5577  03A1                     __end_of_Sensor_Service:	
  5578  03A1                     __ptext32:	
  5579 ;; *************** function _Sensor_Acquisition *****************
  5580 ;; Defined at:
  5581 ;;		line 257 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;  sensor          1    wreg     PTR struct .
  5584 ;;		 -> mtouch_sensor(18), 
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;  sensor          1   18[BANK0 ] PTR struct .
  5587 ;;		 -> mtouch_sensor(18), 
  5588 ;;  retry           1   17[BANK0 ] unsigned char 
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      enum E4940
  5591 ;; Registers used:
  5592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5593 ;; Tracked objects:
  5594 ;;		On entry : 1F/0
  5595 ;;		On exit  : 1F/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5600 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;Total ram usage:        6 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    7
  5605 ;; This function calls:
  5606 ;;		_Sensor_Acq_ExecutePacket
  5607 ;;		_Sensor_isEnabled
  5608 ;;		_Sensor_setActive
  5609 ;;		_Sensor_setInactive
  5610 ;;		_abs
  5611 ;; This function is called by:
  5612 ;;		_Sensor_Service
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           
  5617                           ;psect for function _Sensor_Acquisition
  5618  03A1                     _Sensor_Acquisition:	
  5619                           
  5620                           ;incstack = 0
  5621                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5622                           ;Sensor_Acquisition@sensor stored from wreg
  5623  03A1  00B2               	movwf	Sensor_Acquisition@sensor
  5624                           
  5625                           ;mtouch_sensor.c: 260: uint8_t retry = (uint8_t)5;
  5626  03A2  3005               	movlw	5
  5627  03A3  00B1               	movwf	Sensor_Acquisition@retry
  5628                           
  5629                           ;mtouch_sensor.c: 262: if(!Sensor_isEnabled(sensor))
  5630  03A4  0832               	movf	Sensor_Acquisition@sensor,w
  5631  03A5  23E9  3180         	fcall	_Sensor_isEnabled
  5632  03A7  3A00               	xorlw	0
  5633  03A8  1903               	btfsc	3,2
  5634                           
  5635                           ;mtouch_sensor.c: 263: return MTOUCH_SENSOR_ERROR_none;
  5636  03A9  3400               	retlw	0
  5637  03AA  2BAE               	goto	l2661
  5638  03AB                     l2653:	
  5639                           
  5640                           ;mtouch_sensor.c: 266: {
  5641                           ;mtouch_sensor.c: 267: retry--;
  5642  03AB  0BB1               	decfsz	Sensor_Acquisition@retry,f
  5643                           
  5644                           ;mtouch_sensor.c: 268: if(retry == 0)
  5645  03AC  2BAE               	goto	l2661
  5646                           
  5647                           ;mtouch_sensor.c: 269: {
  5648                           ;mtouch_sensor.c: 270: return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5649  03AD  34FC               	retlw	252
  5650  03AE                     l2661:	
  5651  03AE  0832               	movf	Sensor_Acquisition@sensor,w
  5652  03AF  318F  2717  3180   	fcall	_Sensor_Acq_ExecutePacket
  5653  03B2  3A00               	xorlw	0
  5654  03B3  1D03               	skipz
  5655  03B4  2BAB               	goto	l2653
  5656                           
  5657                           ;mtouch_sensor.c: 271: }
  5658                           ;mtouch_sensor.c: 272: }
  5659                           ;mtouch_sensor.c: 274: if((mtouch_sensor_packetsample_t)abs(packet_sample - sensor->rawS
      +                          ample) > (mtouch_sensor_packetsample_t)(sensor->oversampling)<<2)
  5660  03B5  0864               	movf	_packet_sample+1,w
  5661  03B6  00A1               	movwf	abs@a+1
  5662  03B7  0863               	movf	_packet_sample,w
  5663  03B8  00A0               	movwf	abs@a
  5664  03B9  0832               	movf	Sensor_Acquisition@sensor,w
  5665  03BA  3E06               	addlw	6
  5666  03BB  0086               	movwf	6
  5667  03BC  0187               	clrf	7
  5668  03BD  3F40               	moviw [0]fsr1
  5669  03BE  00AD               	movwf	??_Sensor_Acquisition
  5670  03BF  3F41               	moviw [1]fsr1
  5671  03C0  00AE               	movwf	??_Sensor_Acquisition+1
  5672  03C1  082D               	movf	??_Sensor_Acquisition,w
  5673  03C2  02A0               	subwf	abs@a,f
  5674  03C3  082E               	movf	??_Sensor_Acquisition+1,w
  5675  03C4  3BA1               	subwfb	abs@a+1,f
  5676  03C5  23F4  3180         	fcall	_abs
  5677  03C7  0832               	movf	Sensor_Acquisition@sensor,w
  5678  03C8  3E05               	addlw	5
  5679  03C9  0086               	movwf	6
  5680  03CA  0187               	clrf	7
  5681  03CB  0801               	movf	1,w
  5682  03CC  00AF               	movwf	??_Sensor_Acquisition+2
  5683  03CD  01B0               	clrf	??_Sensor_Acquisition+3
  5684  03CE  35AF               	lslf	??_Sensor_Acquisition+2,f
  5685  03CF  0DB0               	rlf	??_Sensor_Acquisition+3,f
  5686  03D0  35AF               	lslf	??_Sensor_Acquisition+2,f
  5687  03D1  0DB0               	rlf	??_Sensor_Acquisition+3,f
  5688  03D2  0821               	movf	?_abs+1,w
  5689  03D3  0230               	subwf	??_Sensor_Acquisition+3,w
  5690  03D4  1D03               	skipz
  5691  03D5  2BD8               	goto	u1715
  5692  03D6  0820               	movf	?_abs,w
  5693  03D7  022F               	subwf	??_Sensor_Acquisition+2,w
  5694  03D8                     u1715:	
  5695                           
  5696                           ;mtouch_sensor.c: 275: {
  5697                           ;mtouch_sensor.c: 276: Sensor_setActive(sensor);
  5698  03D8  0832               	movf	Sensor_Acquisition@sensor,w
  5699                           
  5700                           ;psect for function _Sensor_setActive
  5701  03D9  1803               	skipnc
  5702  03DA  2BE2               	goto	i5L_Sensor_setInactive
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5706                           ;Sensor_setActive@sensor stored from wreg
  5707  03DB  00A0               	movwf	Sensor_setActive@sensor
  5708  03DC                     i4Ll2541:	
  5709                           
  5710                           ;mtouch_sensor.c: 491: sensor->acitve = 1;
  5711  03DC  0820               	movf	Sensor_setActive@sensor,w
  5712  03DD  3E08               	addlw	8
  5713  03DE  0086               	movwf	6
  5714  03DF  0187               	clrf	7
  5715  03E0  1501               	bsf	1,2
  5716  03E1                     i4Ll444:	
  5717                           
  5718                           ;mtouch_sensor.c: 277: }
  5719  03E1  3400               	retlw	0
  5720  03E2                     i5L__ptext34:	
  5721                           ;mtouch_sensor.c: 278: else
  5722                           ;mtouch_sensor.c: 279: {
  5723                           ;mtouch_sensor.c: 280: Sensor_setInactive(sensor);
  5724                           
  5725                           
  5726                           ;psect for function _Sensor_setInactive
  5727  03E2                     i5L_Sensor_setInactive:	
  5728                           
  5729                           ;incstack = 0
  5730                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5731                           ;Sensor_setInactive@sensor stored from wreg
  5732  03E2  00A0               	movwf	Sensor_setInactive@sensor
  5733  03E3                     i5Ll2543:	
  5734                           
  5735                           ;mtouch_sensor.c: 496: sensor->acitve = 0;
  5736  03E3  0820               	movf	Sensor_setInactive@sensor,w
  5737  03E4  3E08               	addlw	8
  5738  03E5  0086               	movwf	6
  5739  03E6  0187               	clrf	7
  5740  03E7  1101               	bcf	1,2
  5741  03E8                     i5Ll447:	
  5742  03E8  3400               	retlw	0
  5743  03E9                     __end_of_Sensor_Acquisition:	
  5744  03E9                     __ptext36:	
  5745 ;; *************** function _Sensor_isEnabled *****************
  5746 ;; Defined at:
  5747 ;;		line 474 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  sensor          1    wreg     PTR struct .
  5750 ;;		 -> mtouch_sensor(18), 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;  sensor          1    0[BANK0 ] PTR struct .
  5753 ;;		 -> mtouch_sensor(18), 
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  1    wreg      unsigned char 
  5756 ;; Registers used:
  5757 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5758 ;; Tracked objects:
  5759 ;;		On entry : 1F/0
  5760 ;;		On exit  : 1F/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;Total ram usage:        1 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; Hardware stack levels required when called:    4
  5770 ;; This function calls:
  5771 ;;		Nothing
  5772 ;; This function is called by:
  5773 ;;		_Sensor_Acquisition
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           
  5778                           ;psect for function _Sensor_isEnabled
  5779  03E9                     _Sensor_isEnabled:	
  5780                           
  5781                           ;incstack = 0
  5782                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5783                           ;Sensor_isEnabled@sensor stored from wreg
  5784  03E9  00A0               	movwf	Sensor_isEnabled@sensor
  5785                           
  5786                           ;mtouch_sensor.c: 476: if(sensor!=(0))
  5787  03EA  0820               	movf	Sensor_isEnabled@sensor,w
  5788  03EB  1903               	btfsc	3,2
  5789  03EC  3400               	retlw	0
  5790                           
  5791                           ;mtouch_sensor.c: 477: return (bool)sensor->enabled;
  5792  03ED  0820               	movf	Sensor_isEnabled@sensor,w
  5793  03EE  3E08               	addlw	8
  5794  03EF  0086               	movwf	6
  5795  03F0  0187               	clrf	7
  5796  03F1  0801               	movf	1,w
  5797  03F2  3901               	andlw	1
  5798  03F3  0008               	return
  5799  03F4                     __end_of_Sensor_isEnabled:	
  5800                           ;mtouch_sensor.c: 478: else
  5801                           ;mtouch_sensor.c: 479: return 0;
  5802                           
  5803  03F4                     __ptext33:	
  5804 ;; *************** function _abs *****************
  5805 ;; Defined at:
  5806 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/abs.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;  a               2    0[BANK0 ] int 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  2    0[BANK0 ] int 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2, status,0
  5815 ;; Tracked objects:
  5816 ;;		On entry : 1F/0
  5817 ;;		On exit  : 1F/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5820 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;Total ram usage:        4 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    4
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_Sensor_Acquisition
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           
  5835                           ;psect for function _abs
  5836  03F4                     _abs:	
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _abs: [wreg+status,2+status,0]
  5840  03F4  1FA1               	btfss	abs@a+1,7
  5841  03F5  0008               	return
  5842  03F6  0920               	comf	abs@a,w
  5843  03F7  00A2               	movwf	??_abs
  5844  03F8  0921               	comf	abs@a+1,w
  5845  03F9  00A3               	movwf	??_abs+1
  5846  03FA  0AA2               	incf	??_abs,f
  5847  03FB  1903               	skipnz
  5848  03FC  0AA3               	incf	??_abs+1,f
  5849  03FD  0822               	movf	??_abs,w
  5850  03FE  00A0               	movwf	?_abs
  5851  03FF  0823               	movf	??_abs+1,w
  5852  0400  00A1               	movwf	?_abs+1
  5853  0401  0008               	return
  5854  0402                     __end_of_abs:	
  5855  0402                     __ptext31:	
  5856 ;; *************** function _Sensor_DefaultCallback *****************
  5857 ;; Defined at:
  5858 ;;		line 429 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;  sensor          1    0[BANK0 ] enum E4937
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;		None
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  1    wreg      void 
  5865 ;; Registers used:
  5866 ;;		None
  5867 ;; Tracked objects:
  5868 ;;		On entry : 1F/0
  5869 ;;		On exit  : 1F/0
  5870 ;;		Unchanged: 1F/0
  5871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5872 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;Total ram usage:        1 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    4
  5879 ;; This function calls:
  5880 ;;		Nothing
  5881 ;; This function is called by:
  5882 ;;		_Sensor_Service
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function _Sensor_DefaultCallback
  5888  0402                     _Sensor_DefaultCallback:	
  5889                           
  5890                           ;incstack = 0
  5891                           ; Regs used in _Sensor_DefaultCallback: []
  5892  0402  0008               	return
  5893  0403                     __end_of_Sensor_DefaultCallback:	
  5894  0403                     __ptext55:	
  5895 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  5896 ;; Defined at:
  5897 ;;		line 514 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  sensor          1    wreg     enum E4937
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  sensor          1    0[COMMON] enum E4937
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      void 
  5904 ;; Registers used:
  5905 ;;		wreg
  5906 ;; Tracked objects:
  5907 ;;		On entry : 1F/0
  5908 ;;		On exit  : 1F/0
  5909 ;;		Unchanged: 1F/0
  5910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5915 ;;Total ram usage:        0 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    4
  5918 ;; This function calls:
  5919 ;;		Nothing
  5920 ;; This function is called by:
  5921 ;;		_MTOUCH_Button_Initialize
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           
  5926                           ;psect for function _MTOUCH_Sensor_Calibrate
  5927  0403                     _MTOUCH_Sensor_Calibrate:	
  5928  0403                     l457:	
  5929                           ;incstack = 0
  5930                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
  5931                           
  5932  0403  0008               	return
  5933  0404                     __end_of_MTOUCH_Sensor_Calibrate:	
  5934  0404                     __ptext22:	
  5935 ;; *************** function _MTOUCH_Tick *****************
  5936 ;; Defined at:
  5937 ;;		line 108 in file "mcc_generated_files/mtouch/mtouch.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      void 
  5944 ;; Registers used:
  5945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 1F/0
  5948 ;;		On exit  : 1F/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;Total ram usage:        0 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    6
  5958 ;; This function calls:
  5959 ;;		_MTOUCH_Button_Tick
  5960 ;; This function is called by:
  5961 ;;		_MTOUCH_Service_Mainloop
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           
  5966                           ;psect for function _MTOUCH_Tick
  5967  0404                     _MTOUCH_Tick:	
  5968                           
  5969                           ;mtouch.c: 110: MTOUCH_Button_Tick();
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5973  0404  318B  2B7D         	ljmp	l2721
  5974  0406                     __end_of_MTOUCH_Tick:	
  5975                           
  5976                           	psect	bssCOMMON
  5977  007A                     __pbssCOMMON:	
  5978  007A                     _pos_d:	
  5979  007A                     	ds	2
  5980  007C                     MTOUCH_Random@seed:	
  5981  007C                     	ds	1
  5982                           
  5983                           	psect	bssBANK0
  5984  0063                     __pbssBANK0:	
  5985  0063                     _packet_sample:	
  5986  0063                     	ds	2
  5987  0065                     _pos:	
  5988  0065                     	ds	2
  5989  0067                     _envelopeCount:	
  5990  0067                     	ds	2
  5991  0069                     _sample_delay:	
  5992  0069                     	ds	1
  5993  006A                     _packet_counter:	
  5994  006A                     	ds	1
  5995  006B                     _currentScannSensor:	
  5996  006B                     	ds	1
  5997  006C                     _sensor_globalFlags:	
  5998  006C                     	ds	1
  5999  006D                     _mtouch_time_toScan:	
  6000  006D                     	ds	1
  6001                           
  6002                           	psect	bssBANK1
  6003  00A0                     __pbssBANK1:	
  6004  00A0                     _pos_f:	
  6005  00A0                     	ds	4
  6006  00A4                     _env:	
  6007  00A4                     	ds	4
  6008  00A8                     _TMR2_InterruptHandler:	
  6009  00A8                     	ds	2
  6010  00AA                     _ENV_DELAY:	
  6011  00AA                     	ds	2
  6012  00AC                     _dat_f:	
  6013  00AC                     	ds	2
  6014  00AE                     _dat_d:	
  6015  00AE                     	ds	2
  6016  00B0                     _voice_on:	
  6017  00B0                     	ds	2
  6018  00B2                     _mtouch_button:	
  6019  00B2                     	ds	32
  6020                           
  6021                           	psect	dataBANK1
  6022  00D2                     __pdataBANK1:	
  6023  00D2                     _Button_StateMachine:	
  6024  00D2                     	ds	6
  6025  00D8                     _Sensor_scanB:	
  6026  00D8                     	ds	2
  6027  00DA                     _Sensor_scanA:	
  6028  00DA                     	ds	2
  6029  00DC                     _mtouch_sensor:	
  6030  00DC                     	ds	18
  6031                           
  6032                           	psect	dataBANK2
  6033  0120                     __pdataBANK2:	
  6034  0120                     _scale:	
  6035  0120                     	ds	24
  6036  0138                     _scaleLow:	
  6037  0138                     	ds	13
  6038  0145                     _scaleHigh:	
  6039  0145                     	ds	13
  6040                           
  6041                           	psect	dataBANK3
  6042  01A0                     __pdataBANK3:	
  6043  01A0                     _onkai_d:	
  6044  01A0                     	ds	74
  6045                           
  6046                           	psect	dataBANK4
  6047  0220                     __pdataBANK4:	
  6048  0220                     _onkai_f:	
  6049  0220                     	ds	74
  6050                           
  6051                           	psect	inittext
  6052  0AB2                     init_ram:	
  6053  0AB2  00FE               	movwf	126
  6054  0AB3                     initloop:	
  6055  0AB3  0012               	moviw fsr0++
  6056  0AB4  001E               	movwi fsr1++
  6057  0AB5  3001               	movlw	1
  6058  0AB6  02FE               	subwf	126,f
  6059  0AB7  3000               	movlw	0
  6060  0AB8  3BFF               	subwfb	127,f
  6061  0AB9  087F               	movf	127,w
  6062  0ABA  047E               	iorwf	126,w
  6063  0ABB  1903               	btfsc	3,2
  6064  0ABC  3400               	retlw	0
  6065  0ABD  2AB3               	goto	initloop
  6066                           
  6067                           	psect	clrtext
  6068  0AA6                     clear_ram0:	
  6069                           ;	Called with FSR0 containing the base address, and
  6070                           ;	btemp/btemp+1 has the size to clear
  6071                           
  6072  0AA6  0064               	clrwdt	;clear the watchdog before getting into this loop
  6073  0AA7                     clrloop0:	
  6074  0AA7  3001               	movlw	1
  6075  0AA8  0180               	clrf	0	;clear RAM location pointed to by FSR
  6076  0AA9  3101               	addfsr 0,1
  6077  0AAA  02FE               	subwf	126,f
  6078  0AAB  3000               	movlw	0
  6079  0AAC  3BFF               	subwfb	127,f
  6080  0AAD  087F               	movf	127,w
  6081  0AAE  047E               	iorwf	126,w
  6082  0AAF  1903               	btfsc	3,2
  6083  0AB0  3400               	retlw	0	;all done for this memory range, return
  6084  0AB1  2AA7               	goto	clrloop0	;have we reached the end yet?
  6085                           
  6086                           	psect	cstackCOMMON
  6087  0070                     __pcstackCOMMON:	
  6088  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  6089  0070                     ?_MTOUCH_Button_InitializeAll:	
  6090                           ; 1 bytes @ 0x0
  6091                           
  6092  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  6093                           ; 1 bytes @ 0x0
  6094                           
  6095  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  6096                           ; 1 bytes @ 0x0
  6097                           
  6098  0070                     ?_MTOUCH_Sensor_SampleAll:	
  6099                           ; 1 bytes @ 0x0
  6100                           
  6101  0070                     ?_MTOUCH_Button_ServiceAll:	
  6102                           ; 1 bytes @ 0x0
  6103                           
  6104  0070                     ?_MTOUCH_Tick:	
  6105                           ; 1 bytes @ 0x0
  6106                           
  6107  0070                     ?_MTOUCH_Button_Tick:	
  6108                           ; 1 bytes @ 0x0
  6109                           
  6110  0070                     ?_MTOUCH_Sensor_Calibrate:	
  6111                           ; 1 bytes @ 0x0
  6112                           
  6113  0070                     ?_Button_Service:	
  6114                           ; 1 bytes @ 0x0
  6115                           
  6116  0070                     ?_MTOUCH_Sensor_wasSampled:	
  6117                           ; 1 bytes @ 0x0
  6118                           
  6119  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  6120                           ; 1 bytes @ 0x0
  6121                           
  6122  0070                     ?_Button_Reading_Update:	
  6123                           ; 1 bytes @ 0x0
  6124                           
  6125  0070                     ?_Button_Deviation_Update:	
  6126                           ; 1 bytes @ 0x0
  6127                           
  6128  0070                     ?_Button_Baseline_Initialize:	
  6129                           ; 1 bytes @ 0x0
  6130                           
  6131  0070                     ?_Button_Baseline_Update:	
  6132                           ; 1 bytes @ 0x0
  6133                           
  6134  0070                     ?_Button_Tick_helper:	
  6135                           ; 1 bytes @ 0x0
  6136                           
  6137  0070                     ?_MTOUCH_CVD_ScanA_0:	
  6138                           ; 1 bytes @ 0x0
  6139                           
  6140  0070                     ?_MTOUCH_CVD_ScanB_0:	
  6141                           ; 1 bytes @ 0x0
  6142                           
  6143  0070                     ?_MTOUCH_CVD_ScanA_1:	
  6144                           ; 1 bytes @ 0x0
  6145                           
  6146  0070                     ?_MTOUCH_CVD_ScanB_1:	
  6147                           ; 1 bytes @ 0x0
  6148                           
  6149  0070                     ?_MTOUCH_Sensor_Enable:	
  6150                           ; 1 bytes @ 0x0
  6151                           
  6152  0070                     ?_Sensor_Sampled_Reset:	
  6153                           ; 1 bytes @ 0x0
  6154                           
  6155  0070                     ?_Sensor_Service:	
  6156                           ; 1 bytes @ 0x0
  6157                           
  6158  0070                     ?_Sensor_Acquisition:	
  6159                           ; 1 bytes @ 0x0
  6160                           
  6161  0070                     ?_Sensor_RawSample_Update:	
  6162                           ; 1 bytes @ 0x0
  6163                           
  6164  0070                     ?_Sensor_setSampled:	
  6165                           ; 1 bytes @ 0x0
  6166                           
  6167  0070                     ?_Sensor_isEnabled:	
  6168                           ; 1 bytes @ 0x0
  6169                           
  6170  0070                     ?_Sensor_Acq_ExecutePacket:	
  6171                           ; 1 bytes @ 0x0
  6172                           
  6173  0070                     ?_Sensor_setActive:	
  6174                           ; 1 bytes @ 0x0
  6175                           
  6176  0070                     ?_Sensor_setInactive:	
  6177                           ; 1 bytes @ 0x0
  6178                           
  6179  0070                     ?_Sensor_setScanFunction:	
  6180                           ; 1 bytes @ 0x0
  6181                           
  6182  0070                     ?_Sensor_Acq_ExecuteScan:	
  6183                           ; 1 bytes @ 0x0
  6184                           
  6185  0070                     ?_MTOUCH_Delay:	
  6186                           ; 1 bytes @ 0x0
  6187                           
  6188  0070                     ?_TMR2_ISR:	
  6189                           ; 1 bytes @ 0x0
  6190                           
  6191  0070                     ?_PIN_MANAGER_Initialize:	
  6192                           ; 1 bytes @ 0x0
  6193                           
  6194  0070                     ?_OSCILLATOR_Initialize:	
  6195                           ; 1 bytes @ 0x0
  6196                           
  6197  0070                     ?_WDT_Initialize:	
  6198                           ; 1 bytes @ 0x0
  6199                           
  6200  0070                     ?_OPA2_Initialize:	
  6201                           ; 1 bytes @ 0x0
  6202                           
  6203  0070                     ?_TMR2_Initialize:	
  6204                           ; 1 bytes @ 0x0
  6205                           
  6206  0070                     ?_TMR2_DefaultInterruptHandler:	
  6207                           ; 1 bytes @ 0x0
  6208                           
  6209  0070                     ?_MTOUCH_Initialize:	
  6210                           ; 1 bytes @ 0x0
  6211                           
  6212  0070                     ?_MTOUCH_Service_Mainloop:	
  6213                           ; 1 bytes @ 0x0
  6214                           
  6215  0070                     ?_MTOUCH_Button_Initialize:	
  6216                           ; 1 bytes @ 0x0
  6217                           
  6218  0070                     ?_MTOUCH_Button_isPressed:	
  6219                           ; 1 bytes @ 0x0
  6220                           
  6221  0070                     ?_MTOUCH_Button_Deviation_Get:	
  6222                           ; 1 bytes @ 0x0
  6223                           
  6224  0070                     ?_MTOUCH_Random:	
  6225                           ; 1 bytes @ 0x0
  6226                           
  6227  0070                     ?_MTOUCH_Sensor_Initialize:	
  6228                           ; 1 bytes @ 0x0
  6229                           
  6230  0070                     ?_DAC_Initialize:	
  6231                           ; 1 bytes @ 0x0
  6232                           
  6233  0070                     ?_DAC_SetOutput:	
  6234                           ; 1 bytes @ 0x0
  6235                           
  6236  0070                     ??_DAC_SetOutput:	
  6237                           ; 1 bytes @ 0x0
  6238                           
  6239  0070                     ?_INTERRUPT_InterruptManager:	
  6240                           ; 1 bytes @ 0x0
  6241                           
  6242  0070                     ?_SYSTEM_Initialize:	
  6243                           ; 1 bytes @ 0x0
  6244                           
  6245  0070                     ?_main:	
  6246                           ; 1 bytes @ 0x0
  6247                           
  6248  0070                     ?___lbmod:	
  6249                           ; 1 bytes @ 0x0
  6250                           
  6251  0070                     MTOUCH_Sensor_isCalibrated@sensor:	
  6252                           ; 1 bytes @ 0x0
  6253                           
  6254  0070                     MTOUCH_Sensor_Calibrate@sensor:	
  6255                           ; 1 bytes @ 0x0
  6256                           
  6257  0070                     DAC_SetOutput@inputData:	
  6258                           ; 1 bytes @ 0x0
  6259                           
  6260  0070                     ___lbmod@divisor:	
  6261                           ; 1 bytes @ 0x0
  6262                           
  6263                           
  6264                           ; 1 bytes @ 0x0
  6265  0070                     	ds	1
  6266  0071                     ??___lbmod:	
  6267                           
  6268                           ; 1 bytes @ 0x1
  6269  0071                     	ds	1
  6270  0072                     ___lbmod@dividend:	
  6271                           
  6272                           ; 1 bytes @ 0x2
  6273  0072                     	ds	1
  6274  0073                     ___lbmod@counter:	
  6275                           
  6276                           ; 1 bytes @ 0x3
  6277  0073                     	ds	1
  6278  0074                     ___lbmod@rem:	
  6279                           
  6280                           ; 1 bytes @ 0x4
  6281  0074                     	ds	1
  6282  0075                     ??_TMR2_DefaultInterruptHandler:	
  6283                           
  6284                           ; 1 bytes @ 0x5
  6285  0075                     	ds	2
  6286  0077                     TMR2_DefaultInterruptHandler@wv:	
  6287                           
  6288                           ; 2 bytes @ 0x7
  6289  0077                     	ds	2
  6290  0079                     TMR2_DefaultInterruptHandler@i:	
  6291                           
  6292                           ; 1 bytes @ 0x9
  6293  0079                     	ds	1
  6294  007A                     ??_TMR2_ISR:	
  6295  007A                     ??_INTERRUPT_InterruptManager:	
  6296                           ; 1 bytes @ 0xA
  6297                           
  6298                           
  6299                           	psect	cstackBANK0
  6300  0020                     __pcstackBANK0:	
  6301                           ; 1 bytes @ 0xA
  6302                           
  6303  0020                     ?___ftge:	
  6304  0020                     ??_MTOUCH_Sensor_Scan_Initialize:	
  6305                           ; 1 bit 
  6306                           
  6307  0020                     ?_Button_DefaultCallback:	
  6308                           ; 1 bytes @ 0x0
  6309                           
  6310  0020                     ??_MTOUCH_Sensor_Calibrate:	
  6311                           ; 1 bytes @ 0x0
  6312                           
  6313  0020                     ??_MTOUCH_Sensor_isCalibrated:	
  6314                           ; 1 bytes @ 0x0
  6315                           
  6316  0020                     ??_Button_Deviation_Update:	
  6317                           ; 1 bytes @ 0x0
  6318                           
  6319  0020                     ??_Button_Baseline_Update:	
  6320                           ; 1 bytes @ 0x0
  6321                           
  6322  0020                     ??_Button_Tick_helper:	
  6323                           ; 1 bytes @ 0x0
  6324                           
  6325  0020                     ?_Sensor_DefaultCallback:	
  6326                           ; 1 bytes @ 0x0
  6327                           
  6328  0020                     ??_MTOUCH_CVD_ScanA_0:	
  6329                           ; 1 bytes @ 0x0
  6330                           
  6331  0020                     ??_MTOUCH_CVD_ScanB_0:	
  6332                           ; 1 bytes @ 0x0
  6333                           
  6334  0020                     ??_MTOUCH_CVD_ScanA_1:	
  6335                           ; 1 bytes @ 0x0
  6336                           
  6337  0020                     ??_MTOUCH_CVD_ScanB_1:	
  6338                           ; 1 bytes @ 0x0
  6339                           
  6340  0020                     ??_Sensor_Sampled_Reset:	
  6341                           ; 1 bytes @ 0x0
  6342                           
  6343  0020                     ??_Sensor_RawSample_Update:	
  6344                           ; 1 bytes @ 0x0
  6345                           
  6346  0020                     ??_Sensor_setSampled:	
  6347                           ; 1 bytes @ 0x0
  6348                           
  6349  0020                     ??_Sensor_isEnabled:	
  6350                           ; 1 bytes @ 0x0
  6351                           
  6352  0020                     ??_Sensor_setActive:	
  6353                           ; 1 bytes @ 0x0
  6354                           
  6355  0020                     ??_Sensor_setInactive:	
  6356                           ; 1 bytes @ 0x0
  6357                           
  6358  0020                     ??_Sensor_setScanFunction:	
  6359                           ; 1 bytes @ 0x0
  6360                           
  6361  0020                     ??_MTOUCH_Delay:	
  6362                           ; 1 bytes @ 0x0
  6363                           
  6364  0020                     ??_PIN_MANAGER_Initialize:	
  6365                           ; 1 bytes @ 0x0
  6366                           
  6367  0020                     ??_OSCILLATOR_Initialize:	
  6368                           ; 1 bytes @ 0x0
  6369                           
  6370  0020                     ??_WDT_Initialize:	
  6371                           ; 1 bytes @ 0x0
  6372                           
  6373  0020                     ??_OPA2_Initialize:	
  6374                           ; 1 bytes @ 0x0
  6375                           
  6376  0020                     ?_TMR2_SetInterruptHandler:	
  6377                           ; 1 bytes @ 0x0
  6378                           
  6379  0020                     ??_MTOUCH_Button_Initialize:	
  6380                           ; 1 bytes @ 0x0
  6381                           
  6382  0020                     ??_MTOUCH_Button_isPressed:	
  6383                           ; 1 bytes @ 0x0
  6384                           
  6385  0020                     ??_MTOUCH_Button_Deviation_Get:	
  6386                           ; 1 bytes @ 0x0
  6387                           
  6388  0020                     ??_MTOUCH_Random:	
  6389                           ; 1 bytes @ 0x0
  6390                           
  6391  0020                     ??_DAC_Initialize:	
  6392                           ; 1 bytes @ 0x0
  6393                           
  6394  0020                     ?_soundPlay:	
  6395                           ; 1 bytes @ 0x0
  6396                           
  6397  0020                     ?___bmul:	
  6398                           ; 1 bytes @ 0x0
  6399                           
  6400  0020                     ?_abs:	
  6401                           ; 1 bytes @ 0x0
  6402                           
  6403  0020                     ?___ftpack:	
  6404                           ; 2 bytes @ 0x0
  6405                           
  6406  0020                     MTOUCH_Button_Initialize@name:	
  6407                           ; 3 bytes @ 0x0
  6408                           
  6409  0020                     MTOUCH_Button_isPressed@name:	
  6410                           ; 1 bytes @ 0x0
  6411                           
  6412  0020                     MTOUCH_Button_Deviation_Get@name:	
  6413                           ; 1 bytes @ 0x0
  6414                           
  6415  0020                     Button_DefaultCallback@button:	
  6416                           ; 1 bytes @ 0x0
  6417                           
  6418  0020                     MTOUCH_Delay@i:	
  6419                           ; 1 bytes @ 0x0
  6420                           
  6421  0020                     Sensor_RawSample_Update@sensor:	
  6422                           ; 1 bytes @ 0x0
  6423                           
  6424  0020                     Sensor_DefaultCallback@sensor:	
  6425                           ; 1 bytes @ 0x0
  6426                           
  6427  0020                     Sensor_setScanFunction@sensor:	
  6428                           ; 1 bytes @ 0x0
  6429                           
  6430  0020                     Sensor_isEnabled@sensor:	
  6431                           ; 1 bytes @ 0x0
  6432                           
  6433  0020                     Sensor_setActive@sensor:	
  6434                           ; 1 bytes @ 0x0
  6435                           
  6436  0020                     Sensor_setInactive@sensor:	
  6437                           ; 1 bytes @ 0x0
  6438                           
  6439  0020                     Sensor_Sampled_Reset@sensor:	
  6440                           ; 1 bytes @ 0x0
  6441                           
  6442  0020                     Sensor_setSampled@sensor:	
  6443                           ; 1 bytes @ 0x0
  6444                           
  6445  0020                     soundPlay@onkai:	
  6446                           ; 1 bytes @ 0x0
  6447                           
  6448  0020                     ___bmul@multiplicand:	
  6449                           ; 1 bytes @ 0x0
  6450                           
  6451  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  6452                           ; 1 bytes @ 0x0
  6453                           
  6454  0020                     abs@a:	
  6455                           ; 2 bytes @ 0x0
  6456                           
  6457  0020                     ___ftpack@arg:	
  6458                           ; 2 bytes @ 0x0
  6459                           
  6460  0020                     ___ftge@ff1:	
  6461                           ; 3 bytes @ 0x0
  6462                           
  6463                           
  6464                           ; 3 bytes @ 0x0
  6465  0020                     	ds	1
  6466  0021                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  6467  0021                     ??_Button_DefaultCallback:	
  6468                           ; 1 bytes @ 0x1
  6469                           
  6470  0021                     ??_Sensor_DefaultCallback:	
  6471                           ; 1 bytes @ 0x1
  6472                           
  6473  0021                     ??_soundPlay:	
  6474                           ; 1 bytes @ 0x1
  6475                           
  6476  0021                     ??___bmul:	
  6477                           ; 1 bytes @ 0x1
  6478                           
  6479  0021                     MTOUCH_Button_Initialize@button:	
  6480                           ; 1 bytes @ 0x1
  6481                           
  6482  0021                     soundPlay@n:	
  6483                           ; 1 bytes @ 0x1
  6484                           
  6485  0021                     ___bmul@product:	
  6486                           ; 1 bytes @ 0x1
  6487                           
  6488                           
  6489                           ; 1 bytes @ 0x1
  6490  0021                     	ds	1
  6491  0022                     ??_MTOUCH_Button_InitializeAll:	
  6492  0022                     ??_abs:	
  6493                           ; 1 bytes @ 0x2
  6494                           
  6495  0022                     ??_TMR2_Initialize:	
  6496                           ; 1 bytes @ 0x2
  6497                           
  6498  0022                     ??_TMR2_SetInterruptHandler:	
  6499                           ; 1 bytes @ 0x2
  6500                           
  6501  0022                     Button_Tick_helper@button:	
  6502                           ; 1 bytes @ 0x2
  6503                           
  6504  0022                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  6505                           ; 1 bytes @ 0x2
  6506                           
  6507  0022                     ___bmul@multiplier:	
  6508                           ; 1 bytes @ 0x2
  6509                           
  6510                           
  6511                           ; 1 bytes @ 0x2
  6512  0022                     	ds	1
  6513  0023                     ??_MTOUCH_Button_Tick:	
  6514  0023                     ??_MTOUCH_Sensor_wasSampled:	
  6515                           ; 1 bytes @ 0x3
  6516                           
  6517  0023                     ??_MTOUCH_Sensor_Enable:	
  6518                           ; 1 bytes @ 0x3
  6519                           
  6520  0023                     ??_Sensor_Acq_ExecuteScan:	
  6521                           ; 1 bytes @ 0x3
  6522                           
  6523  0023                     ?_MTOUCH_Sensor_RawSample_Get:	
  6524                           ; 1 bytes @ 0x3
  6525                           
  6526  0023                     MTOUCH_Button_InitializeAll@button:	
  6527                           ; 2 bytes @ 0x3
  6528                           
  6529  0023                     MTOUCH_Button_Tick@i:	
  6530                           ; 1 bytes @ 0x3
  6531                           
  6532  0023                     MTOUCH_Sensor_Enable@sensor:	
  6533                           ; 1 bytes @ 0x3
  6534                           
  6535  0023                     MTOUCH_Sensor_wasSampled@sensor:	
  6536                           ; 1 bytes @ 0x3
  6537                           
  6538  0023                     ___ftpack@exp:	
  6539                           ; 1 bytes @ 0x3
  6540                           
  6541  0023                     ___ftge@ff2:	
  6542                           ; 1 bytes @ 0x3
  6543                           
  6544                           
  6545                           ; 3 bytes @ 0x3
  6546  0023                     	ds	1
  6547  0024                     ??_MTOUCH_Tick:	
  6548  0024                     ??_MTOUCH_Sensor_Initialize:	
  6549                           ; 1 bytes @ 0x4
  6550                           
  6551  0024                     MTOUCH_Sensor_Initialize@sensor:	
  6552                           ; 1 bytes @ 0x4
  6553                           
  6554  0024                     ___ftpack@sign:	
  6555                           ; 1 bytes @ 0x4
  6556                           
  6557                           
  6558                           ; 1 bytes @ 0x4
  6559  0024                     	ds	1
  6560  0025                     ??_MTOUCH_Sensor_InitializeAll:	
  6561  0025                     ??___ftpack:	
  6562                           ; 1 bytes @ 0x5
  6563                           
  6564  0025                     MTOUCH_Sensor_InitializeAll@sensor:	
  6565                           ; 1 bytes @ 0x5
  6566                           
  6567  0025                     Sensor_Acq_ExecuteScan@result:	
  6568                           ; 1 bytes @ 0x5
  6569                           
  6570                           
  6571                           ; 2 bytes @ 0x5
  6572  0025                     	ds	1
  6573  0026                     ??_MTOUCH_Sensor_RawSample_Get:	
  6574  0026                     ??_MTOUCH_Initialize:	
  6575                           ; 1 bytes @ 0x6
  6576                           
  6577  0026                     ??_SYSTEM_Initialize:	
  6578                           ; 1 bytes @ 0x6
  6579                           
  6580  0026                     ??___ftge:	
  6581                           ; 1 bytes @ 0x6
  6582                           
  6583  0026                     Button_Baseline_Update@button:	
  6584                           ; 1 bytes @ 0x6
  6585                           
  6586  0026                     MTOUCH_Sensor_RawSample_Get@name:	
  6587                           ; 1 bytes @ 0x6
  6588                           
  6589                           
  6590                           ; 1 bytes @ 0x6
  6591  0026                     	ds	1
  6592  0027                     ??_Button_Reading_Update:	
  6593  0027                     ??_Button_Baseline_Initialize:	
  6594                           ; 1 bytes @ 0x7
  6595                           
  6596  0027                     ??_Sensor_Acq_ExecutePacket:	
  6597                           ; 1 bytes @ 0x7
  6598                           
  6599  0027                     Sensor_Acq_ExecutePacket@ADCON0_temp:	
  6600                           ; 1 bytes @ 0x7
  6601                           
  6602                           
  6603                           ; 1 bytes @ 0x7
  6604  0027                     	ds	1
  6605  0028                     ?___abtoft:	
  6606  0028                     ?___ftmul:	
  6607                           ; 3 bytes @ 0x8
  6608                           
  6609  0028                     Sensor_Acq_ExecutePacket@ADCON1_temp:	
  6610                           ; 3 bytes @ 0x8
  6611                           
  6612  0028                     ___ftmul@f1:	
  6613                           ; 1 bytes @ 0x8
  6614                           
  6615                           
  6616                           ; 3 bytes @ 0x8
  6617  0028                     	ds	1
  6618  0029                     Button_Reading_Update@button:	
  6619  0029                     Sensor_Acq_ExecutePacket@ADCON2_temp:	
  6620                           ; 1 bytes @ 0x9
  6621                           
  6622                           
  6623                           ; 1 bytes @ 0x9
  6624  0029                     	ds	1
  6625  002A                     Sensor_Acq_ExecutePacket@GIE_state:	
  6626  002A                     Button_Deviation_Update@deviation:	
  6627                           ; 1 bytes @ 0xA
  6628                           
  6629                           
  6630                           ; 4 bytes @ 0xA
  6631  002A                     	ds	1
  6632  002B                     Button_Baseline_Initialize@button:	
  6633  002B                     Sensor_Acq_ExecutePacket@error:	
  6634                           ; 1 bytes @ 0xB
  6635                           
  6636  002B                     ___ftmul@f2:	
  6637                           ; 1 bytes @ 0xB
  6638                           
  6639                           
  6640                           ; 3 bytes @ 0xB
  6641  002B                     	ds	1
  6642  002C                     ?_Button_State_Initializing:	
  6643  002C                     ?_Button_State_NotPressed:	
  6644                           ; 1 bytes @ 0xC
  6645                           
  6646  002C                     ?_Button_State_Pressed:	
  6647                           ; 1 bytes @ 0xC
  6648                           
  6649  002C                     ??___abtoft:	
  6650                           ; 1 bytes @ 0xC
  6651                           
  6652  002C                     Button_State_Initializing@button:	
  6653                           ; 1 bytes @ 0xC
  6654                           
  6655  002C                     Button_State_NotPressed@button:	
  6656                           ; 1 bytes @ 0xC
  6657                           
  6658  002C                     Button_State_Pressed@button:	
  6659                           ; 1 bytes @ 0xC
  6660                           
  6661  002C                     Sensor_Acq_ExecutePacket@sensor:	
  6662                           ; 1 bytes @ 0xC
  6663                           
  6664  002C                     ___abtoft@sign:	
  6665                           ; 1 bytes @ 0xC
  6666                           
  6667                           
  6668                           ; 1 bytes @ 0xC
  6669  002C                     	ds	1
  6670  002D                     ??_Button_State_Initializing:	
  6671  002D                     ??_Button_State_NotPressed:	
  6672                           ; 1 bytes @ 0xD
  6673                           
  6674  002D                     ??_Button_State_Pressed:	
  6675                           ; 1 bytes @ 0xD
  6676                           
  6677  002D                     ??_Sensor_Acquisition:	
  6678                           ; 1 bytes @ 0xD
  6679                           
  6680  002D                     ___abtoft@c:	
  6681                           ; 1 bytes @ 0xD
  6682                           
  6683                           
  6684                           ; 1 bytes @ 0xD
  6685  002D                     	ds	1
  6686  002E                     ??___ftmul:	
  6687  002E                     Button_Deviation_Update@button:	
  6688                           ; 1 bytes @ 0xE
  6689                           
  6690                           
  6691                           ; 1 bytes @ 0xE
  6692  002E                     	ds	3
  6693  0031                     ??_Button_Service:	
  6694  0031                     Button_Service@name:	
  6695                           ; 1 bytes @ 0x11
  6696                           
  6697  0031                     Sensor_Acquisition@retry:	
  6698                           ; 1 bytes @ 0x11
  6699                           
  6700  0031                     ___ftmul@exp:	
  6701                           ; 1 bytes @ 0x11
  6702                           
  6703                           
  6704                           ; 1 bytes @ 0x11
  6705  0031                     	ds	1
  6706  0032                     Button_Service@button:	
  6707  0032                     Sensor_Acquisition@sensor:	
  6708                           ; 1 bytes @ 0x12
  6709                           
  6710  0032                     ___ftmul@f3_as_product:	
  6711                           ; 1 bytes @ 0x12
  6712                           
  6713                           
  6714                           ; 3 bytes @ 0x12
  6715  0032                     	ds	1
  6716  0033                     ??_MTOUCH_Button_ServiceAll:	
  6717  0033                     ??_Sensor_Service:	
  6718                           ; 1 bytes @ 0x13
  6719                           
  6720  0033                     MTOUCH_Button_ServiceAll@button:	
  6721                           ; 1 bytes @ 0x13
  6722                           
  6723  0033                     Sensor_Service@name:	
  6724                           ; 1 bytes @ 0x13
  6725                           
  6726                           
  6727                           ; 1 bytes @ 0x13
  6728  0033                     	ds	1
  6729  0034                     Sensor_Service@error:	
  6730                           
  6731                           ; 1 bytes @ 0x14
  6732  0034                     	ds	1
  6733  0035                     Sensor_Service@sensor:	
  6734  0035                     ___ftmul@cntr:	
  6735                           ; 1 bytes @ 0x15
  6736                           
  6737                           
  6738                           ; 1 bytes @ 0x15
  6739  0035                     	ds	1
  6740  0036                     ??_MTOUCH_Sensor_SampleAll:	
  6741  0036                     MTOUCH_Sensor_SampleAll@sensor:	
  6742                           ; 1 bytes @ 0x16
  6743                           
  6744  0036                     ___ftmul@sign:	
  6745                           ; 1 bytes @ 0x16
  6746                           
  6747                           
  6748                           ; 1 bytes @ 0x16
  6749  0036                     	ds	1
  6750  0037                     ??_MTOUCH_Service_Mainloop:	
  6751  0037                     ?___ftdiv:	
  6752                           ; 1 bytes @ 0x17
  6753                           
  6754  0037                     ___ftdiv@f2:	
  6755                           ; 3 bytes @ 0x17
  6756                           
  6757                           
  6758                           ; 3 bytes @ 0x17
  6759  0037                     	ds	3
  6760  003A                     ___ftdiv@f1:	
  6761                           
  6762                           ; 3 bytes @ 0x1A
  6763  003A                     	ds	3
  6764  003D                     ??___ftdiv:	
  6765                           
  6766                           ; 1 bytes @ 0x1D
  6767  003D                     	ds	3
  6768  0040                     ___ftdiv@cntr:	
  6769                           
  6770                           ; 1 bytes @ 0x20
  6771  0040                     	ds	1
  6772  0041                     ___ftdiv@f3:	
  6773                           
  6774                           ; 3 bytes @ 0x21
  6775  0041                     	ds	3
  6776  0044                     ___ftdiv@exp:	
  6777                           
  6778                           ; 1 bytes @ 0x24
  6779  0044                     	ds	1
  6780  0045                     ___ftdiv@sign:	
  6781                           
  6782                           ; 1 bytes @ 0x25
  6783  0045                     	ds	1
  6784  0046                     ?___ftadd:	
  6785  0046                     ___ftadd@f1:	
  6786                           ; 3 bytes @ 0x26
  6787                           
  6788                           
  6789                           ; 3 bytes @ 0x26
  6790  0046                     	ds	3
  6791  0049                     ___ftadd@f2:	
  6792                           
  6793                           ; 3 bytes @ 0x29
  6794  0049                     	ds	3
  6795  004C                     ??___ftadd:	
  6796                           
  6797                           ; 1 bytes @ 0x2C
  6798  004C                     	ds	3
  6799  004F                     ___ftadd@sign:	
  6800                           
  6801                           ; 1 bytes @ 0x2F
  6802  004F                     	ds	1
  6803  0050                     ___ftadd@exp2:	
  6804                           
  6805                           ; 1 bytes @ 0x30
  6806  0050                     	ds	1
  6807  0051                     ___ftadd@exp1:	
  6808                           
  6809                           ; 1 bytes @ 0x31
  6810  0051                     	ds	1
  6811  0052                     ??_main:	
  6812                           
  6813                           ; 1 bytes @ 0x32
  6814  0052                     	ds	1
  6815  0053                     main@state:	
  6816                           
  6817                           ; 2 bytes @ 0x33
  6818  0053                     	ds	2
  6819  0055                     main@ss:	
  6820                           
  6821                           ; 2 bytes @ 0x35
  6822  0055                     	ds	2
  6823  0057                     main@ms:	
  6824                           
  6825                           ; 2 bytes @ 0x37
  6826  0057                     	ds	2
  6827  0059                     main@ave:	
  6828                           
  6829                           ; 3 bytes @ 0x39
  6830  0059                     	ds	3
  6831  005C                     main@d:	
  6832                           
  6833                           ; 1 bytes @ 0x3C
  6834  005C                     	ds	1
  6835  005D                     main@count:	
  6836                           
  6837                           ; 2 bytes @ 0x3D
  6838  005D                     	ds	2
  6839  005F                     main@s:	
  6840                           
  6841                           ; 2 bytes @ 0x3F
  6842  005F                     	ds	2
  6843  0061                     main@i:	
  6844                           
  6845                           ; 2 bytes @ 0x41
  6846  0061                     	ds	2
  6847                           
  6848                           	psect	text1
  6849  0BD5                     __ptext1:	
  6850 ;; *************** function _soundPlay *****************
  6851 ;; Defined at:
  6852 ;;		line 88 in file "main.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  n               1    wreg     unsigned char 
  6855 ;;  onkai           1    0[BANK0 ] unsigned char 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  n               1    1[BANK0 ] unsigned char 
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      void 
  6860 ;; Registers used:
  6861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 1F/0
  6864 ;;		On exit  : 1F/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6867 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;Total ram usage:        2 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    4
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_main
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           
  6882                           ;psect for function _soundPlay
  6883  0BD5                     _soundPlay:	
  6884                           
  6885                           ;incstack = 0
  6886                           ; Regs used in _soundPlay: [wreg-fsr1h+status,2+status,0]
  6887                           ;soundPlay@n stored from wreg
  6888  0BD5  00A1               	movwf	soundPlay@n
  6889                           
  6890                           ;main.c: 90: dat_d[n] = onkai_d[onkai];
  6891  0BD6  3EAE               	addlw	(low (_dat_d| 0))& (0+255)
  6892  0BD7  0086               	movwf	6
  6893  0BD8  0187               	clrf	7
  6894  0BD9  0820               	movf	soundPlay@onkai,w
  6895  0BDA  3EA0               	addlw	(low (_onkai_d| (0+256)))& (0+255)
  6896  0BDB  0084               	movwf	4
  6897  0BDC  3001               	movlw	1	; select bank3/4
  6898  0BDD  0085               	movwf	5
  6899  0BDE  0800               	movf	0,w
  6900  0BDF  0081               	movwf	1
  6901                           
  6902                           ;main.c: 92: dat_f[n] = onkai_f[onkai];
  6903  0BE0  0821               	movf	soundPlay@n,w
  6904  0BE1  3EAC               	addlw	(low (_dat_f| 0))& (0+255)
  6905  0BE2  0086               	movwf	6
  6906  0BE3  0820               	movf	soundPlay@onkai,w
  6907  0BE4  3E20               	addlw	(low (_onkai_f| (0+512)))& (0+255)
  6908  0BE5  0084               	movwf	4
  6909  0BE6  3002               	movlw	2	; select bank4/5
  6910  0BE7  0085               	movwf	5
  6911  0BE8  0800               	movf	0,w
  6912  0BE9  0081               	movwf	1
  6913                           
  6914                           ;main.c: 95: env[n] = 0;
  6915  0BEA  3521               	lslf	soundPlay@n,w
  6916  0BEB  3EA4               	addlw	(low (_env| 0))& (0+255)
  6917  0BEC  0086               	movwf	6
  6918  0BED  3000               	movlw	0
  6919  0BEE  3FC0               	movwi [0]fsr1
  6920  0BEF  3FC1               	movwi [1]fsr1
  6921                           
  6922                           ;main.c: 96: envelopeCount[n] = 0;
  6923  0BF0  0821               	movf	soundPlay@n,w
  6924  0BF1  3E67               	addlw	(low (_envelopeCount| 0))& (0+255)
  6925  0BF2  0086               	movwf	6
  6926  0BF3  0181               	clrf	1
  6927                           
  6928                           ;main.c: 98: voice_on[n] = 1;
  6929  0BF4  0821               	movf	soundPlay@n,w
  6930  0BF5  3EB0               	addlw	(low (_voice_on| 0))& (0+255)
  6931  0BF6  0086               	movwf	6
  6932  0BF7  0181               	clrf	1
  6933  0BF8  0A81               	incf	1,f
  6934                           
  6935                           ;main.c: 99: pos_f[n] = 0;
  6936  0BF9  3521               	lslf	soundPlay@n,w
  6937  0BFA  3EA0               	addlw	(low (_pos_f| 0))& (0+255)
  6938  0BFB  0086               	movwf	6
  6939  0BFC  3000               	movlw	0
  6940  0BFD  3FC0               	movwi [0]fsr1
  6941  0BFE  3FC1               	movwi [1]fsr1
  6942                           
  6943                           ;main.c: 100: pos_d[n] = 0;
  6944  0BFF  0821               	movf	soundPlay@n,w
  6945  0C00  3E7A               	addlw	(low (_pos_d| 0))& (0+255)
  6946  0C01  0086               	movwf	6
  6947  0C02  0181               	clrf	1
  6948  0C03  0008               	return
  6949  0C04                     __end_of_soundPlay:	
  6950                           
  6951                           	psect	text3
  6952  0BA9                     __ptext3:	
  6953 ;; *************** function ___ftge *****************
  6954 ;; Defined at:
  6955 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/ftge.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;  ff1             3    0[BANK0 ] float 
  6958 ;;  ff2             3    3[BANK0 ] float 
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;		None               void
  6963 ;; Registers used:
  6964 ;;		wreg, status,2, status,0
  6965 ;; Tracked objects:
  6966 ;;		On entry : 1F/0
  6967 ;;		On exit  : 1F/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6970 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;Total ram usage:        6 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    4
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_main
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           
  6985                           ;psect for function ___ftge
  6986  0BA9                     ___ftge:	
  6987                           
  6988                           ;incstack = 0
  6989                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6990  0BA9  1FA2               	btfss	___ftge@ff1+2,7
  6991  0BAA  2BB8               	goto	l3109
  6992  0BAB  0820               	movf	___ftge@ff1,w
  6993  0BAC  3C00               	sublw	0
  6994  0BAD  00A0               	movwf	___ftge@ff1
  6995  0BAE  0821               	movf	___ftge@ff1+1,w
  6996  0BAF  1C03               	skipc
  6997  0BB0  0F21               	incfsz	___ftge@ff1+1,w
  6998  0BB1  3C00               	sublw	0
  6999  0BB2  00A1               	movwf	___ftge@ff1+1
  7000  0BB3  0822               	movf	___ftge@ff1+2,w
  7001  0BB4  1C03               	skipc
  7002  0BB5  0F22               	incfsz	___ftge@ff1+2,w
  7003  0BB6  3C80               	sublw	128
  7004  0BB7  00A2               	movwf	___ftge@ff1+2
  7005  0BB8                     l3109:	
  7006  0BB8  1FA5               	btfss	___ftge@ff2+2,7
  7007  0BB9  2BC7               	goto	l3113
  7008  0BBA  0823               	movf	___ftge@ff2,w
  7009  0BBB  3C00               	sublw	0
  7010  0BBC  00A3               	movwf	___ftge@ff2
  7011  0BBD  0824               	movf	___ftge@ff2+1,w
  7012  0BBE  1C03               	skipc
  7013  0BBF  0F24               	incfsz	___ftge@ff2+1,w
  7014  0BC0  3C00               	sublw	0
  7015  0BC1  00A4               	movwf	___ftge@ff2+1
  7016  0BC2  0825               	movf	___ftge@ff2+2,w
  7017  0BC3  1C03               	skipc
  7018  0BC4  0F25               	incfsz	___ftge@ff2+2,w
  7019  0BC5  3C80               	sublw	128
  7020  0BC6  00A5               	movwf	___ftge@ff2+2
  7021  0BC7                     l3113:	
  7022  0BC7  3080               	movlw	128
  7023  0BC8  06A2               	xorwf	___ftge@ff1+2,f
  7024  0BC9  06A5               	xorwf	___ftge@ff2+2,f
  7025  0BCA  0825               	movf	___ftge@ff2+2,w
  7026  0BCB  0222               	subwf	___ftge@ff1+2,w
  7027  0BCC  1D03               	skipz
  7028  0BCD  0008               	return
  7029  0BCE  0824               	movf	___ftge@ff2+1,w
  7030  0BCF  0221               	subwf	___ftge@ff1+1,w
  7031  0BD0  1D03               	skipz
  7032  0BD1  0008               	return
  7033  0BD2  0823               	movf	___ftge@ff2,w
  7034  0BD3  0220               	subwf	___ftge@ff1,w
  7035  0BD4  0008               	return
  7036  0BD5                     __end_of___ftge:	
  7037                           
  7038                           	psect	text6
  7039  0CF1                     __ptext6:	
  7040 ;; *************** function ___abtoft *****************
  7041 ;; Defined at:
  7042 ;;		line 33 in file "/Applications/microchip/xc8/v1.45/sources/common/abtoft.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;  c               1    wreg     char 
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;  c               1   13[BANK0 ] char 
  7047 ;;  f1              3    0        float 
  7048 ;;  sign            1   12[BANK0 ] unsigned char 
  7049 ;; Return value:  Size  Location     Type
  7050 ;;                  3    8[BANK0 ] float 
  7051 ;; Registers used:
  7052 ;;		wreg, status,2, status,0, pclath, cstack
  7053 ;; Tracked objects:
  7054 ;;		On entry : 1F/0
  7055 ;;		On exit  : 1F/0
  7056 ;;		Unchanged: 0/0
  7057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7058 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;Total ram usage:        6 bytes
  7063 ;; Hardware stack levels used:    1
  7064 ;; Hardware stack levels required when called:    5
  7065 ;; This function calls:
  7066 ;;		___ftpack
  7067 ;; This function is called by:
  7068 ;;		_main
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           
  7073                           ;psect for function ___abtoft
  7074  0CF1                     ___abtoft:	
  7075                           
  7076                           ;incstack = 0
  7077                           ; Regs used in ___abtoft: [wreg+status,2+status,0+pclath+cstack]
  7078                           ;___abtoft@c stored from wreg
  7079  0CF1  00AD               	movwf	___abtoft@c
  7080  0CF2  01AC               	clrf	___abtoft@sign
  7081  0CF3  1FAD               	btfss	___abtoft@c,7
  7082  0CF4  2CF9               	goto	l2985
  7083  0CF5  09AD               	comf	___abtoft@c,f
  7084  0CF6  0AAD               	incf	___abtoft@c,f
  7085  0CF7  01AC               	clrf	___abtoft@sign
  7086  0CF8  0AAC               	incf	___abtoft@sign,f
  7087  0CF9                     l2985:	
  7088  0CF9  082D               	movf	___abtoft@c,w
  7089  0CFA  00A0               	movwf	___ftpack@arg
  7090  0CFB  308E               	movlw	142
  7091  0CFC  01A1               	clrf	___ftpack@arg+1
  7092  0CFD  01A2               	clrf	___ftpack@arg+2
  7093  0CFE  00A3               	movwf	___ftpack@exp
  7094  0CFF  082C               	movf	___abtoft@sign,w
  7095  0D00  00A4               	movwf	___ftpack@sign
  7096  0D01  2627               	fcall	___ftpack
  7097  0D02  0820               	movf	?___ftpack,w
  7098  0D03  00A8               	movwf	?___abtoft
  7099  0D04  0821               	movf	?___ftpack+1,w
  7100  0D05  00A9               	movwf	?___abtoft+1
  7101  0D06  0822               	movf	?___ftpack+2,w
  7102  0D07  00AA               	movwf	?___abtoft+2
  7103  0D08  0008               	return
  7104  0D09                     __end_of___abtoft:	
  7105  0D09                     __ptext2:	
  7106 ;; *************** function ___ftmul *****************
  7107 ;; Defined at:
  7108 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/ftmul.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  f1              3    8[BANK0 ] float 
  7111 ;;  f2              3   11[BANK0 ] float 
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  7114 ;;  sign            1   22[BANK0 ] unsigned char 
  7115 ;;  cntr            1   21[BANK0 ] unsigned char 
  7116 ;;  exp             1   17[BANK0 ] unsigned char 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  3    8[BANK0 ] float 
  7119 ;; Registers used:
  7120 ;;		wreg, status,2, status,0, pclath, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 1F/0
  7123 ;;		On exit  : 1F/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7126 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;Total ram usage:       15 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    5
  7133 ;; This function calls:
  7134 ;;		___ftpack
  7135 ;; This function is called by:
  7136 ;;		_main
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           
  7141                           ;psect for function ___ftmul
  7142  0D09                     ___ftmul:	
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7146  0D09  0828               	movf	___ftmul@f1,w
  7147  0D0A  00AE               	movwf	??___ftmul
  7148  0D0B  0829               	movf	___ftmul@f1+1,w
  7149  0D0C  00AF               	movwf	??___ftmul+1
  7150  0D0D  082A               	movf	___ftmul@f1+2,w
  7151  0D0E  00B0               	movwf	??___ftmul+2
  7152  0D0F  1003               	clrc
  7153  0D10  0D2F               	rlf	??___ftmul+1,w
  7154  0D11  0D30               	rlf	??___ftmul+2,w
  7155  0D12  00B1               	movwf	___ftmul@exp
  7156  0D13  0831               	movf	___ftmul@exp,w
  7157  0D14  1D03               	btfss	3,2
  7158  0D15  2D1A               	goto	l3129
  7159  0D16  01A8               	clrf	?___ftmul
  7160  0D17  01A9               	clrf	?___ftmul+1
  7161  0D18  01AA               	clrf	?___ftmul+2
  7162  0D19  0008               	return
  7163  0D1A                     l3129:	
  7164  0D1A  082B               	movf	___ftmul@f2,w
  7165  0D1B  00AE               	movwf	??___ftmul
  7166  0D1C  082C               	movf	___ftmul@f2+1,w
  7167  0D1D  00AF               	movwf	??___ftmul+1
  7168  0D1E  082D               	movf	___ftmul@f2+2,w
  7169  0D1F  00B0               	movwf	??___ftmul+2
  7170  0D20  1003               	clrc
  7171  0D21  0D2F               	rlf	??___ftmul+1,w
  7172  0D22  0D30               	rlf	??___ftmul+2,w
  7173  0D23  00B6               	movwf	___ftmul@sign
  7174  0D24  0836               	movf	___ftmul@sign,w
  7175  0D25  1D03               	btfss	3,2
  7176  0D26  2D2B               	goto	l3133
  7177  0D27  01A8               	clrf	?___ftmul
  7178  0D28  01A9               	clrf	?___ftmul+1
  7179  0D29  01AA               	clrf	?___ftmul+2
  7180  0D2A  0008               	return
  7181  0D2B                     l3133:	
  7182  0D2B  0836               	movf	___ftmul@sign,w
  7183  0D2C  3E7B               	addlw	123
  7184  0D2D  07B1               	addwf	___ftmul@exp,f
  7185  0D2E  082A               	movf	___ftmul@f1+2,w
  7186  0D2F  00B6               	movwf	___ftmul@sign
  7187  0D30  082D               	movf	___ftmul@f2+2,w
  7188  0D31  06B6               	xorwf	___ftmul@sign,f
  7189  0D32  3080               	movlw	128
  7190  0D33  05B6               	andwf	___ftmul@sign,f
  7191  0D34  30FF               	movlw	255
  7192  0D35  17A9               	bsf	___ftmul@f1+1,7
  7193  0D36  17AC               	bsf	___ftmul@f2+1,7
  7194  0D37  05AB               	andwf	___ftmul@f2,f
  7195  0D38  05AC               	andwf	___ftmul@f2+1,f
  7196  0D39  3007               	movlw	7
  7197  0D3A  01AD               	clrf	___ftmul@f2+2
  7198  0D3B  01B2               	clrf	___ftmul@f3_as_product
  7199  0D3C  01B3               	clrf	___ftmul@f3_as_product+1
  7200  0D3D  01B4               	clrf	___ftmul@f3_as_product+2
  7201  0D3E  00B5               	movwf	___ftmul@cntr
  7202  0D3F                     l3151:	
  7203  0D3F  1C28               	btfss	___ftmul@f1,0
  7204  0D40  2D47               	goto	l3155
  7205  0D41  082B               	movf	___ftmul@f2,w
  7206  0D42  07B2               	addwf	___ftmul@f3_as_product,f
  7207  0D43  082C               	movf	___ftmul@f2+1,w
  7208  0D44  3DB3               	addwfc	___ftmul@f3_as_product+1,f
  7209  0D45  082D               	movf	___ftmul@f2+2,w
  7210  0D46  3DB4               	addwfc	___ftmul@f3_as_product+2,f
  7211  0D47                     l3155:	
  7212  0D47  36AA               	lsrf	___ftmul@f1+2,f
  7213  0D48  0CA9               	rrf	___ftmul@f1+1,f
  7214  0D49  0CA8               	rrf	___ftmul@f1,f
  7215  0D4A  35AB               	lslf	___ftmul@f2,f
  7216  0D4B  0DAC               	rlf	___ftmul@f2+1,f
  7217  0D4C  0DAD               	rlf	___ftmul@f2+2,f
  7218  0D4D  0BB5               	decfsz	___ftmul@cntr,f
  7219  0D4E  2D3F               	goto	l3151
  7220  0D4F  3009               	movlw	9
  7221  0D50  00B5               	movwf	___ftmul@cntr
  7222  0D51                     l3163:	
  7223  0D51  1C28               	btfss	___ftmul@f1,0
  7224  0D52  2D59               	goto	l3167
  7225  0D53  082B               	movf	___ftmul@f2,w
  7226  0D54  07B2               	addwf	___ftmul@f3_as_product,f
  7227  0D55  082C               	movf	___ftmul@f2+1,w
  7228  0D56  3DB3               	addwfc	___ftmul@f3_as_product+1,f
  7229  0D57  082D               	movf	___ftmul@f2+2,w
  7230  0D58  3DB4               	addwfc	___ftmul@f3_as_product+2,f
  7231  0D59                     l3167:	
  7232  0D59  36AA               	lsrf	___ftmul@f1+2,f
  7233  0D5A  0CA9               	rrf	___ftmul@f1+1,f
  7234  0D5B  0CA8               	rrf	___ftmul@f1,f
  7235  0D5C  36B4               	lsrf	___ftmul@f3_as_product+2,f
  7236  0D5D  0CB3               	rrf	___ftmul@f3_as_product+1,f
  7237  0D5E  0CB2               	rrf	___ftmul@f3_as_product,f
  7238  0D5F  0BB5               	decfsz	___ftmul@cntr,f
  7239  0D60  2D51               	goto	l3163
  7240  0D61  0832               	movf	___ftmul@f3_as_product,w
  7241  0D62  00A0               	movwf	___ftpack@arg
  7242  0D63  0833               	movf	___ftmul@f3_as_product+1,w
  7243  0D64  00A1               	movwf	___ftpack@arg+1
  7244  0D65  0834               	movf	___ftmul@f3_as_product+2,w
  7245  0D66  00A2               	movwf	___ftpack@arg+2
  7246  0D67  0831               	movf	___ftmul@exp,w
  7247  0D68  00A3               	movwf	___ftpack@exp
  7248  0D69  0836               	movf	___ftmul@sign,w
  7249  0D6A  00A4               	movwf	___ftpack@sign
  7250  0D6B  2627               	fcall	___ftpack
  7251  0D6C  0820               	movf	?___ftpack,w
  7252  0D6D  00A8               	movwf	?___ftmul
  7253  0D6E  0821               	movf	?___ftpack+1,w
  7254  0D6F  00A9               	movwf	?___ftmul+1
  7255  0D70  0822               	movf	?___ftpack+2,w
  7256  0D71  00AA               	movwf	?___ftmul+2
  7257  0D72  0008               	return
  7258  0D73                     __end_of___ftmul:	
  7259  0D73                     __ptext5:	
  7260 ;; *************** function ___ftadd *****************
  7261 ;; Defined at:
  7262 ;;		line 86 in file "/Applications/microchip/xc8/v1.45/sources/common/ftadd.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  f1              3   38[BANK0 ] float 
  7265 ;;  f2              3   41[BANK0 ] float 
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;  exp1            1   49[BANK0 ] unsigned char 
  7268 ;;  exp2            1   48[BANK0 ] unsigned char 
  7269 ;;  sign            1   47[BANK0 ] unsigned char 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  3   38[BANK0 ] float 
  7272 ;; Registers used:
  7273 ;;		wreg, status,2, status,0, pclath, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 1F/0
  7276 ;;		On exit  : 1F/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7279 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;Total ram usage:       12 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    5
  7286 ;; This function calls:
  7287 ;;		___ftpack
  7288 ;; This function is called by:
  7289 ;;		_main
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           
  7294                           ;psect for function ___ftadd
  7295  0D73                     ___ftadd:	
  7296                           
  7297                           ;incstack = 0
  7298                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7299  0D73  0846               	movf	___ftadd@f1,w
  7300  0D74  00CC               	movwf	??___ftadd
  7301  0D75  0847               	movf	___ftadd@f1+1,w
  7302  0D76  00CD               	movwf	??___ftadd+1
  7303  0D77  0848               	movf	___ftadd@f1+2,w
  7304  0D78  00CE               	movwf	??___ftadd+2
  7305  0D79  1003               	clrc
  7306  0D7A  0D4D               	rlf	??___ftadd+1,w
  7307  0D7B  0D4E               	rlf	??___ftadd+2,w
  7308  0D7C  00D1               	movwf	___ftadd@exp1
  7309  0D7D  0849               	movf	___ftadd@f2,w
  7310  0D7E  00CC               	movwf	??___ftadd
  7311  0D7F  084A               	movf	___ftadd@f2+1,w
  7312  0D80  00CD               	movwf	??___ftadd+1
  7313  0D81  084B               	movf	___ftadd@f2+2,w
  7314  0D82  00CE               	movwf	??___ftadd+2
  7315  0D83  1003               	clrc
  7316  0D84  0D4D               	rlf	??___ftadd+1,w
  7317  0D85  0D4E               	rlf	??___ftadd+2,w
  7318  0D86  00D0               	movwf	___ftadd@exp2
  7319  0D87  0851               	movf	___ftadd@exp1,w
  7320  0D88  1903               	btfsc	3,2
  7321  0D89  2D96               	goto	l2995
  7322  0D8A  0850               	movf	___ftadd@exp2,w
  7323  0D8B  0251               	subwf	___ftadd@exp1,w
  7324  0D8C  0850               	movf	___ftadd@exp2,w
  7325  0D8D  1803               	skipnc
  7326  0D8E  2D9E               	goto	L2
  7327  0D8F  00CC               	movwf	??___ftadd
  7328  0D90  0851               	movf	___ftadd@exp1,w
  7329  0D91  02CC               	subwf	??___ftadd,f
  7330  0D92  3019               	movlw	25
  7331  0D93  024C               	subwf	??___ftadd,w
  7332  0D94  1C03               	skipc
  7333  0D95  2D9D               	goto	l2999
  7334  0D96                     l2995:	
  7335  0D96  0849               	movf	___ftadd@f2,w
  7336  0D97  00C6               	movwf	?___ftadd
  7337  0D98  084A               	movf	___ftadd@f2+1,w
  7338  0D99  00C7               	movwf	?___ftadd+1
  7339  0D9A  084B               	movf	___ftadd@f2+2,w
  7340  0D9B  00C8               	movwf	?___ftadd+2
  7341  0D9C  0008               	return
  7342  0D9D                     l2999:	
  7343  0D9D  0850               	movf	___ftadd@exp2,w
  7344  0D9E                     L2:	
  7345  0D9E  1903               	btfsc	3,2
  7346  0D9F  0008               	return
  7347  0DA0  0851               	movf	___ftadd@exp1,w
  7348  0DA1  0250               	subwf	___ftadd@exp2,w
  7349  0DA2  1803               	skipnc
  7350  0DA3  2DAC               	goto	l3005
  7351  0DA4  0851               	movf	___ftadd@exp1,w
  7352  0DA5  00CC               	movwf	??___ftadd
  7353  0DA6  0850               	movf	___ftadd@exp2,w
  7354  0DA7  02CC               	subwf	??___ftadd,f
  7355  0DA8  3019               	movlw	25
  7356  0DA9  024C               	subwf	??___ftadd,w
  7357  0DAA  1803               	btfsc	3,0
  7358  0DAB  0008               	return
  7359  0DAC                     l3005:	
  7360  0DAC  3006               	movlw	6
  7361  0DAD  00CF               	movwf	___ftadd@sign
  7362  0DAE  1BC8               	btfsc	___ftadd@f1+2,7
  7363  0DAF  17CF               	bsf	___ftadd@sign,7
  7364  0DB0  1BCB               	btfsc	___ftadd@f2+2,7
  7365  0DB1  174F               	bsf	___ftadd@sign,6
  7366  0DB2  17C7               	bsf	___ftadd@f1+1,7
  7367  0DB3  01C8               	clrf	___ftadd@f1+2
  7368  0DB4  17CA               	bsf	___ftadd@f2+1,7
  7369  0DB5  01CB               	clrf	___ftadd@f2+2
  7370  0DB6  0850               	movf	___ftadd@exp2,w
  7371  0DB7  0251               	subwf	___ftadd@exp1,w
  7372  0DB8  1803               	skipnc
  7373  0DB9  2DD1               	goto	l3027
  7374  0DBA                     l3017:	
  7375  0DBA  35C9               	lslf	___ftadd@f2,f
  7376  0DBB  0DCA               	rlf	___ftadd@f2+1,f
  7377  0DBC  0DCB               	rlf	___ftadd@f2+2,f
  7378  0DBD  03D0               	decf	___ftadd@exp2,f
  7379  0DBE  0850               	movf	___ftadd@exp2,w
  7380  0DBF  0651               	xorwf	___ftadd@exp1,w
  7381  0DC0  1903               	skipnz
  7382  0DC1  2DCC               	goto	l3025
  7383  0DC2  03CF               	decf	___ftadd@sign,f
  7384  0DC3  084F               	movf	___ftadd@sign,w
  7385  0DC4  3907               	andlw	7
  7386  0DC5  1903               	btfsc	3,2
  7387  0DC6  2DCC               	goto	l3025
  7388  0DC7  2DBA               	goto	l3017
  7389  0DC8                     l3023:	
  7390  0DC8  36C8               	lsrf	___ftadd@f1+2,f
  7391  0DC9  0CC7               	rrf	___ftadd@f1+1,f
  7392  0DCA  0CC6               	rrf	___ftadd@f1,f
  7393  0DCB  0AD1               	incf	___ftadd@exp1,f
  7394  0DCC                     l3025:	
  7395  0DCC  0851               	movf	___ftadd@exp1,w
  7396  0DCD  0650               	xorwf	___ftadd@exp2,w
  7397  0DCE  1903               	btfsc	3,2
  7398  0DCF  2DEB               	goto	l1025
  7399  0DD0  2DC8               	goto	l3023
  7400  0DD1                     l3027:	
  7401  0DD1  0851               	movf	___ftadd@exp1,w
  7402  0DD2  0250               	subwf	___ftadd@exp2,w
  7403  0DD3  1803               	skipnc
  7404  0DD4  2DEB               	goto	l1025
  7405  0DD5                     l3029:	
  7406  0DD5  35C6               	lslf	___ftadd@f1,f
  7407  0DD6  0DC7               	rlf	___ftadd@f1+1,f
  7408  0DD7  0DC8               	rlf	___ftadd@f1+2,f
  7409  0DD8  03D1               	decf	___ftadd@exp1,f
  7410  0DD9  0850               	movf	___ftadd@exp2,w
  7411  0DDA  0651               	xorwf	___ftadd@exp1,w
  7412  0DDB  1903               	skipnz
  7413  0DDC  2DE7               	goto	l3037
  7414  0DDD  03CF               	decf	___ftadd@sign,f
  7415  0DDE  084F               	movf	___ftadd@sign,w
  7416  0DDF  3907               	andlw	7
  7417  0DE0  1903               	btfsc	3,2
  7418  0DE1  2DE7               	goto	l3037
  7419  0DE2  2DD5               	goto	l3029
  7420  0DE3                     l3035:	
  7421  0DE3  36CB               	lsrf	___ftadd@f2+2,f
  7422  0DE4  0CCA               	rrf	___ftadd@f2+1,f
  7423  0DE5  0CC9               	rrf	___ftadd@f2,f
  7424  0DE6  0AD0               	incf	___ftadd@exp2,f
  7425  0DE7                     l3037:	
  7426  0DE7  0851               	movf	___ftadd@exp1,w
  7427  0DE8  0650               	xorwf	___ftadd@exp2,w
  7428  0DE9  1D03               	skipz
  7429  0DEA  2DE3               	goto	l3035
  7430  0DEB                     l1025:	
  7431  0DEB  1FCF               	btfss	___ftadd@sign,7
  7432  0DEC  2DF6               	goto	l3043
  7433  0DED  30FF               	movlw	255
  7434  0DEE  06C6               	xorwf	___ftadd@f1,f
  7435  0DEF  06C7               	xorwf	___ftadd@f1+1,f
  7436  0DF0  06C8               	xorwf	___ftadd@f1+2,f
  7437  0DF1  0AC6               	incf	___ftadd@f1,f
  7438  0DF2  1903               	skipnz
  7439  0DF3  0AC7               	incf	___ftadd@f1+1,f
  7440  0DF4  1903               	skipnz
  7441  0DF5  0AC8               	incf	___ftadd@f1+2,f
  7442  0DF6                     l3043:	
  7443  0DF6  1F4F               	btfss	___ftadd@sign,6
  7444  0DF7  2E01               	goto	l3049
  7445  0DF8  30FF               	movlw	255
  7446  0DF9  06C9               	xorwf	___ftadd@f2,f
  7447  0DFA  06CA               	xorwf	___ftadd@f2+1,f
  7448  0DFB  06CB               	xorwf	___ftadd@f2+2,f
  7449  0DFC  0AC9               	incf	___ftadd@f2,f
  7450  0DFD  1903               	skipnz
  7451  0DFE  0ACA               	incf	___ftadd@f2+1,f
  7452  0DFF  1903               	skipnz
  7453  0E00  0ACB               	incf	___ftadd@f2+2,f
  7454  0E01                     l3049:	
  7455  0E01  01CF               	clrf	___ftadd@sign
  7456  0E02  0846               	movf	___ftadd@f1,w
  7457  0E03  07C9               	addwf	___ftadd@f2,f
  7458  0E04  0847               	movf	___ftadd@f1+1,w
  7459  0E05  3DCA               	addwfc	___ftadd@f2+1,f
  7460  0E06  0848               	movf	___ftadd@f1+2,w
  7461  0E07  3DCB               	addwfc	___ftadd@f2+2,f
  7462  0E08  1FCB               	btfss	___ftadd@f2+2,7
  7463  0E09  2E15               	goto	l3061
  7464  0E0A  30FF               	movlw	255
  7465  0E0B  06C9               	xorwf	___ftadd@f2,f
  7466  0E0C  06CA               	xorwf	___ftadd@f2+1,f
  7467  0E0D  06CB               	xorwf	___ftadd@f2+2,f
  7468  0E0E  0AC9               	incf	___ftadd@f2,f
  7469  0E0F  1903               	skipnz
  7470  0E10  0ACA               	incf	___ftadd@f2+1,f
  7471  0E11  1903               	skipnz
  7472  0E12  0ACB               	incf	___ftadd@f2+2,f
  7473  0E13  01CF               	clrf	___ftadd@sign
  7474  0E14  0ACF               	incf	___ftadd@sign,f
  7475  0E15                     l3061:	
  7476  0E15  0849               	movf	___ftadd@f2,w
  7477  0E16  00A0               	movwf	___ftpack@arg
  7478  0E17  084A               	movf	___ftadd@f2+1,w
  7479  0E18  00A1               	movwf	___ftpack@arg+1
  7480  0E19  084B               	movf	___ftadd@f2+2,w
  7481  0E1A  00A2               	movwf	___ftpack@arg+2
  7482  0E1B  0851               	movf	___ftadd@exp1,w
  7483  0E1C  00A3               	movwf	___ftpack@exp
  7484  0E1D  084F               	movf	___ftadd@sign,w
  7485  0E1E  00A4               	movwf	___ftpack@sign
  7486  0E1F  2627               	fcall	___ftpack
  7487  0E20  0820               	movf	?___ftpack,w
  7488  0E21  00C6               	movwf	?___ftadd
  7489  0E22  0821               	movf	?___ftpack+1,w
  7490  0E23  00C7               	movwf	?___ftadd+1
  7491  0E24  0822               	movf	?___ftpack+2,w
  7492  0E25  00C8               	movwf	?___ftadd+2
  7493  0E26  0008               	return
  7494  0E27                     __end_of___ftadd:	
  7495  0E27                     __ptext7:	
  7496 ;; *************** function ___ftpack *****************
  7497 ;; Defined at:
  7498 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/float.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  arg             3    0[BANK0 ] unsigned um
  7501 ;;  exp             1    3[BANK0 ] unsigned char 
  7502 ;;  sign            1    4[BANK0 ] unsigned char 
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  3    0[BANK0 ] float 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0
  7509 ;; Tracked objects:
  7510 ;;		On entry : 1F/0
  7511 ;;		On exit  : 1F/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7514 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;Total ram usage:        8 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    4
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		___abtoft
  7525 ;;		___ftadd
  7526 ;;		___ftdiv
  7527 ;;		___ftmul
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           
  7532                           ;psect for function ___ftpack
  7533  0E27                     ___ftpack:	
  7534                           
  7535                           ;incstack = 0
  7536                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7537  0E27  0823               	movf	___ftpack@exp,w
  7538  0E28  1903               	btfsc	3,2
  7539  0E29  2E2F               	goto	l989
  7540  0E2A  0822               	movf	___ftpack@arg+2,w
  7541  0E2B  0421               	iorwf	___ftpack@arg+1,w
  7542  0E2C  0420               	iorwf	___ftpack@arg,w
  7543  0E2D  1D03               	skipz
  7544  0E2E  2E37               	goto	l2897
  7545  0E2F                     l989:	
  7546  0E2F  01A0               	clrf	?___ftpack
  7547  0E30  01A1               	clrf	?___ftpack+1
  7548  0E31  01A2               	clrf	?___ftpack+2
  7549  0E32  0008               	return
  7550  0E33                     l2895:	
  7551  0E33  0AA3               	incf	___ftpack@exp,f
  7552  0E34  36A2               	lsrf	___ftpack@arg+2,f
  7553  0E35  0CA1               	rrf	___ftpack@arg+1,f
  7554  0E36  0CA0               	rrf	___ftpack@arg,f
  7555  0E37                     l2897:	
  7556  0E37  30FE               	movlw	254
  7557  0E38  0522               	andwf	___ftpack@arg+2,w
  7558  0E39  1903               	btfsc	3,2
  7559  0E3A  2E45               	goto	l2901
  7560  0E3B  2E33               	goto	l2895
  7561  0E3C                     l2899:	
  7562  0E3C  0AA3               	incf	___ftpack@exp,f
  7563  0E3D  0AA0               	incf	___ftpack@arg,f
  7564  0E3E  1903               	skipnz
  7565  0E3F  0AA1               	incf	___ftpack@arg+1,f
  7566  0E40  1903               	skipnz
  7567  0E41  0AA2               	incf	___ftpack@arg+2,f
  7568  0E42  36A2               	lsrf	___ftpack@arg+2,f
  7569  0E43  0CA1               	rrf	___ftpack@arg+1,f
  7570  0E44  0CA0               	rrf	___ftpack@arg,f
  7571  0E45                     l2901:	
  7572  0E45  30FF               	movlw	255
  7573  0E46  0522               	andwf	___ftpack@arg+2,w
  7574  0E47  1903               	btfsc	3,2
  7575  0E48  2E52               	goto	l2905
  7576  0E49  2E3C               	goto	l2899
  7577  0E4A                     l2907:	
  7578  0E4A  3002               	movlw	2
  7579  0E4B  0223               	subwf	___ftpack@exp,w
  7580  0E4C  1C03               	btfss	3,0
  7581  0E4D  2E54               	goto	l1001
  7582  0E4E  03A3               	decf	___ftpack@exp,f
  7583  0E4F  35A0               	lslf	___ftpack@arg,f
  7584  0E50  0DA1               	rlf	___ftpack@arg+1,f
  7585  0E51  0DA2               	rlf	___ftpack@arg+2,f
  7586  0E52                     l2905:	
  7587  0E52  1FA1               	btfss	___ftpack@arg+1,7
  7588  0E53  2E4A               	goto	l2907
  7589  0E54                     l1001:	
  7590  0E54  1C23               	btfss	___ftpack@exp,0
  7591  0E55  13A1               	bcf	___ftpack@arg+1,7
  7592  0E56  36A3               	lsrf	___ftpack@exp,f
  7593  0E57  0823               	movf	___ftpack@exp,w
  7594  0E58  00A7               	movwf	??___ftpack+2
  7595  0E59  01A6               	clrf	??___ftpack+1
  7596  0E5A  01A5               	clrf	??___ftpack
  7597  0E5B  0825               	movf	??___ftpack,w
  7598  0E5C  04A0               	iorwf	___ftpack@arg,f
  7599  0E5D  0826               	movf	??___ftpack+1,w
  7600  0E5E  04A1               	iorwf	___ftpack@arg+1,f
  7601  0E5F  0827               	movf	??___ftpack+2,w
  7602  0E60  04A2               	iorwf	___ftpack@arg+2,f
  7603  0E61  0824               	movf	___ftpack@sign,w
  7604  0E62  1D03               	btfss	3,2
  7605  0E63  17A2               	bsf	___ftpack@arg+2,7
  7606  0E64  0008               	return
  7607  0E65                     __end_of___ftpack:	
  7608                           
  7609                           	psect	text8
  7610  0E65                     __ptext8:	
  7611 ;; *************** function _SYSTEM_Initialize *****************
  7612 ;; Defined at:
  7613 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;		None
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;		None
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  1    wreg      void 
  7620 ;; Registers used:
  7621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : B1F/0
  7624 ;;		On exit  : 1F/1
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;Total ram usage:        0 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    9
  7634 ;; This function calls:
  7635 ;;		_DAC_Initialize
  7636 ;;		_MTOUCH_Initialize
  7637 ;;		_OPA2_Initialize
  7638 ;;		_OSCILLATOR_Initialize
  7639 ;;		_PIN_MANAGER_Initialize
  7640 ;;		_TMR2_Initialize
  7641 ;;		_WDT_Initialize
  7642 ;; This function is called by:
  7643 ;;		_main
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           
  7648                           ;psect for function _SYSTEM_Initialize
  7649  0E65                     _SYSTEM_Initialize:	
  7650                           
  7651                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  7652                           
  7653                           ;incstack = 0
  7654                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7655  0E65  2687  318E         	fcall	_PIN_MANAGER_Initialize
  7656                           
  7657                           ;mcc.c: 54: OSCILLATOR_Initialize();
  7658  0E67  267C  318E         	fcall	_OSCILLATOR_Initialize
  7659                           
  7660                           ;mcc.c: 55: WDT_Initialize();
  7661  0E69  269D  318E         	fcall	_WDT_Initialize
  7662                           
  7663                           ;mcc.c: 56: DAC_Initialize();
  7664  0E6B  2672  318E         	fcall	_DAC_Initialize
  7665                           
  7666                           ;mcc.c: 58: OPA2_Initialize();
  7667  0E6D  2678  318E         	fcall	_OPA2_Initialize
  7668                           
  7669                           ;mcc.c: 59: TMR2_Initialize();
  7670  0E6F  27E7  318E         	fcall	_TMR2_Initialize
  7671                           
  7672                           ;mcc.c: 60: MTOUCH_Initialize();
  7673  0E71  2EA0               	ljmp	l2783
  7674  0E72                     __end_of_SYSTEM_Initialize:	
  7675  0E72                     __ptext20:	
  7676 ;; *************** function _DAC_Initialize *****************
  7677 ;; Defined at:
  7678 ;;		line 58 in file "mcc_generated_files/dac.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;		None
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;		None
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      void 
  7685 ;; Registers used:
  7686 ;;		wreg
  7687 ;; Tracked objects:
  7688 ;;		On entry : B1F/1
  7689 ;;		On exit  : B1F/2
  7690 ;;		Unchanged: B00/0
  7691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;Total ram usage:        0 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    4
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_SYSTEM_Initialize
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           
  7707                           ;psect for function _DAC_Initialize
  7708  0E72                     _DAC_Initialize:	
  7709                           
  7710                           ;dac.c: 61: DAC1CON0 = 0x80;
  7711                           
  7712                           ;incstack = 0
  7713                           ; Regs used in _DAC_Initialize: [wreg]
  7714  0E72  3080               	movlw	128
  7715  0E73  0022               	movlb	2	; select bank2
  7716  0E74  0098               	movwf	24	;volatile
  7717                           
  7718                           ;dac.c: 63: DAC1CON1 = 0x33;
  7719  0E75  3033               	movlw	51
  7720  0E76  0099               	movwf	25	;volatile
  7721  0E77  0008               	return
  7722  0E78                     __end_of_DAC_Initialize:	
  7723  0E78                     __ptext14:	
  7724 ;; *************** function _OPA2_Initialize *****************
  7725 ;; Defined at:
  7726 ;;		line 58 in file "mcc_generated_files/opa2.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;		None
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;		None
  7731 ;; Return value:  Size  Location     Type
  7732 ;;                  1    wreg      void 
  7733 ;; Registers used:
  7734 ;;		wreg
  7735 ;; Tracked objects:
  7736 ;;		On entry : B1F/2
  7737 ;;		On exit  : B1F/A
  7738 ;;		Unchanged: B00/0
  7739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;Total ram usage:        0 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:    4
  7747 ;; This function calls:
  7748 ;;		Nothing
  7749 ;; This function is called by:
  7750 ;;		_SYSTEM_Initialize
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           
  7755                           ;psect for function _OPA2_Initialize
  7756  0E78                     _OPA2_Initialize:	
  7757                           
  7758                           ;opa2.c: 61: OPA2CON = 0xD2;
  7759                           
  7760                           ;incstack = 0
  7761                           ; Regs used in _OPA2_Initialize: [wreg]
  7762  0E78  30D2               	movlw	210
  7763  0E79  002A               	movlb	10	; select bank10
  7764  0E7A  0095               	movwf	21	;volatile
  7765  0E7B  0008               	return
  7766  0E7C                     __end_of_OPA2_Initialize:	
  7767  0E7C                     __ptext13:	
  7768 ;; *************** function _OSCILLATOR_Initialize *****************
  7769 ;; Defined at:
  7770 ;;		line 63 in file "mcc_generated_files/mcc.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;		None
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;		None
  7775 ;; Return value:  Size  Location     Type
  7776 ;;                  1    wreg      void 
  7777 ;; Registers used:
  7778 ;;		wreg, status,2
  7779 ;; Tracked objects:
  7780 ;;		On entry : B1F/5
  7781 ;;		On exit  : B1F/1
  7782 ;;		Unchanged: B00/0
  7783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;Total ram usage:        0 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    4
  7791 ;; This function calls:
  7792 ;;		Nothing
  7793 ;; This function is called by:
  7794 ;;		_SYSTEM_Initialize
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           
  7799                           ;psect for function _OSCILLATOR_Initialize
  7800  0E7C                     _OSCILLATOR_Initialize:	
  7801                           
  7802                           ;mcc.c: 66: OSCCON = 0x70;
  7803                           
  7804                           ;incstack = 0
  7805                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7806  0E7C  3070               	movlw	112
  7807  0E7D  0021               	movlb	1	; select bank1
  7808  0E7E  0099               	movwf	25	;volatile
  7809                           
  7810                           ;mcc.c: 68: OSCSTAT = 0x00;
  7811  0E7F  019A               	clrf	26	;volatile
  7812                           
  7813                           ;mcc.c: 70: OSCTUNE = 0x00;
  7814  0E80  0198               	clrf	24	;volatile
  7815                           
  7816                           ;mcc.c: 72: BORCON = 0x00;
  7817  0E81  0022               	movlb	2	; select bank2
  7818  0E82  0196               	clrf	22	;volatile
  7819  0E83                     l621:	
  7820                           ;mcc.c: 75: {
  7821                           
  7822  0E83  0021               	movlb	1	; select bank1
  7823  0E84  1B1A               	btfsc	26,6	;volatile
  7824  0E85  0008               	return
  7825  0E86  2E83               	goto	l621
  7826  0E87                     __end_of_OSCILLATOR_Initialize:	
  7827  0E87                     __ptext12:	
  7828 ;; *************** function _PIN_MANAGER_Initialize *****************
  7829 ;; Defined at:
  7830 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;		None
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, status,2
  7839 ;; Tracked objects:
  7840 ;;		On entry : B1F/0
  7841 ;;		On exit  : B1F/5
  7842 ;;		Unchanged: B00/0
  7843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    4
  7851 ;; This function calls:
  7852 ;;		Nothing
  7853 ;; This function is called by:
  7854 ;;		_SYSTEM_Initialize
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           
  7859                           ;psect for function _PIN_MANAGER_Initialize
  7860  0E87                     _PIN_MANAGER_Initialize:	
  7861                           
  7862                           ;pin_manager.c: 62: LATA = 0x00;
  7863                           
  7864                           ;incstack = 0
  7865                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7866  0E87  0022               	movlb	2	; select bank2
  7867  0E88  018C               	clrf	12	;volatile
  7868                           
  7869                           ;pin_manager.c: 63: LATC = 0x00;
  7870  0E89  018E               	clrf	14	;volatile
  7871                           
  7872                           ;pin_manager.c: 68: TRISA = 0x33;
  7873  0E8A  3033               	movlw	51
  7874  0E8B  0021               	movlb	1	; select bank1
  7875  0E8C  008C               	movwf	12	;volatile
  7876                           
  7877                           ;pin_manager.c: 69: TRISC = 0x37;
  7878  0E8D  3037               	movlw	55
  7879  0E8E  008E               	movwf	14	;volatile
  7880                           
  7881                           ;pin_manager.c: 74: ANSELC = 0x3F;
  7882  0E8F  303F               	movlw	63
  7883  0E90  0023               	movlb	3	; select bank3
  7884  0E91  008E               	movwf	14	;volatile
  7885                           
  7886                           ;pin_manager.c: 75: ANSELA = 0x17;
  7887  0E92  3017               	movlw	23
  7888  0E93  008C               	movwf	12	;volatile
  7889                           
  7890                           ;pin_manager.c: 80: WPUA = 0x00;
  7891  0E94  0024               	movlb	4	; select bank4
  7892  0E95  018C               	clrf	12	;volatile
  7893                           
  7894                           ;pin_manager.c: 81: WPUC = 0x00;
  7895  0E96  018E               	clrf	14	;volatile
  7896                           
  7897                           ;pin_manager.c: 82: OPTION_REGbits.nWPUEN = 1;
  7898  0E97  0021               	movlb	1	; select bank1
  7899  0E98  1795               	bsf	21,7	;volatile
  7900                           
  7901                           ;pin_manager.c: 87: ODCONA = 0x00;
  7902  0E99  0025               	movlb	5	; select bank5
  7903  0E9A  018C               	clrf	12	;volatile
  7904                           
  7905                           ;pin_manager.c: 88: ODCONC = 0x00;
  7906  0E9B  018E               	clrf	14	;volatile
  7907  0E9C  0008               	return
  7908  0E9D                     __end_of_PIN_MANAGER_Initialize:	
  7909  0E9D                     __ptext9:	
  7910 ;; *************** function _WDT_Initialize *****************
  7911 ;; Defined at:
  7912 ;;		line 79 in file "mcc_generated_files/mcc.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;		None
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;		None
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      void 
  7919 ;; Registers used:
  7920 ;;		wreg
  7921 ;; Tracked objects:
  7922 ;;		On entry : B1F/1
  7923 ;;		On exit  : B1F/1
  7924 ;;		Unchanged: B00/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;Total ram usage:        0 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    4
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_SYSTEM_Initialize
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _WDT_Initialize
  7942  0E9D                     _WDT_Initialize:	
  7943                           
  7944                           ;mcc.c: 82: WDTCON = 0x16;
  7945                           
  7946                           ;incstack = 0
  7947                           ; Regs used in _WDT_Initialize: [wreg]
  7948  0E9D  3016               	movlw	22
  7949  0E9E  0097               	movwf	23	;volatile
  7950  0E9F  0008               	return
  7951  0EA0                     __end_of_WDT_Initialize:	
  7952  0EA0                     __ptext15:	
  7953 ;; *************** function _MTOUCH_Initialize *****************
  7954 ;; Defined at:
  7955 ;;		line 67 in file "mcc_generated_files/mtouch/mtouch.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;		None
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      void 
  7962 ;; Registers used:
  7963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : B1F/0
  7966 ;;		On exit  : 1F/1
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;Total ram usage:        0 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    8
  7976 ;; This function calls:
  7977 ;;		_MTOUCH_Button_InitializeAll
  7978 ;;		_MTOUCH_Sensor_InitializeAll
  7979 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7980 ;;		_MTOUCH_Sensor_Scan_Initialize
  7981 ;; This function is called by:
  7982 ;;		_SYSTEM_Initialize
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           
  7987                           ;psect for function _MTOUCH_Initialize
  7988  0EA0                     _MTOUCH_Initialize:	
  7989  0EA0                     l2783:	
  7990                           ;incstack = 0
  7991                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7992                           
  7993                           
  7994                           ;mtouch.c: 69: MTOUCH_Sensor_InitializeAll();
  7995  0EA0  26D6  318E         	fcall	_MTOUCH_Sensor_InitializeAll
  7996                           
  7997                           ;mtouch.c: 70: MTOUCH_Button_InitializeAll();
  7998  0EA2  26A7  318E         	fcall	_MTOUCH_Button_InitializeAll
  7999                           
  8000                           ;mtouch.c: 71: MTOUCH_Sensor_Sampled_ResetAll();
  8001  0EA4  26C4  318E         	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  8002                           
  8003                           ;mtouch.c: 72: MTOUCH_Sensor_Scan_Initialize();
  8004  0EA6  2F75               	ljmp	l2365
  8005  0EA7                     __end_of_MTOUCH_Initialize:	
  8006  0EA7                     __ptext19:	
  8007 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  8008 ;; Defined at:
  8009 ;;		line 150 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  button          1    3[BANK0 ] enum E4949
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 1F/0
  8020 ;;		On exit  : 1F/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;Total ram usage:        2 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    6
  8030 ;; This function calls:
  8031 ;;		_MTOUCH_Button_Initialize
  8032 ;; This function is called by:
  8033 ;;		_MTOUCH_Initialize
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           
  8038                           ;psect for function _MTOUCH_Button_InitializeAll
  8039  0EA7                     _MTOUCH_Button_InitializeAll:	
  8040                           
  8041                           ;mtouch_button.c: 152: enum mtouch_button_names button;
  8042                           ;mtouch_button.c: 154: __builtin_memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_b
      +                          utton_init));
  8043                           
  8044                           ;incstack = 0
  8045                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8046  0EA7  30B2               	movlw	low (_mtouch_button| 0)
  8047  0EA8  0086               	movwf	6
  8048  0EA9  3000               	movlw	low (_mtouch_button_init| (0+32768))
  8049  0EAA  0187               	clrf	7
  8050  0EAB  0084               	movwf	4
  8051  0EAC  3090               	movlw	high (_mtouch_button_init| (0+32768))
  8052  0EAD  0085               	movwf	5
  8053  0EAE  3020               	movlw	32
  8054  0EAF  0020               	movlb	0	; select bank0
  8055  0EB0  00A2               	movwf	??_MTOUCH_Button_InitializeAll
  8056  0EB1  0822               	movf	??_MTOUCH_Button_InitializeAll,w
  8057  0EB2  1903               	skipnz
  8058  0EB3  2EB8               	goto	l2699
  8059  0EB4                     u174m0:	
  8060  0EB4  0012               	moviw fsr0++
  8061  0EB5  001E               	movwi fsr1++
  8062  0EB6  0BA2               	decfsz	??_MTOUCH_Button_InitializeAll,f
  8063  0EB7  2EB4               	goto	u174m0
  8064  0EB8                     l2699:	
  8065                           
  8066                           ;mtouch_button.c: 156: for (button = 0; button < 2; button++)
  8067  0EB8  0020               	movlb	0	; select bank0
  8068  0EB9  01A3               	clrf	MTOUCH_Button_InitializeAll@button
  8069  0EBA                     l2705:	
  8070                           
  8071                           ;mtouch_button.c: 157: {
  8072                           ;mtouch_button.c: 158: MTOUCH_Button_Initialize(button);
  8073  0EBA  0823               	movf	MTOUCH_Button_InitializeAll@button,w
  8074  0EBB  3183  2314  318E   	fcall	_MTOUCH_Button_Initialize
  8075  0EBE  3002               	movlw	2
  8076  0EBF  0AA3               	incf	MTOUCH_Button_InitializeAll@button,f
  8077  0EC0  0223               	subwf	MTOUCH_Button_InitializeAll@button,w
  8078  0EC1  1803               	btfsc	3,0
  8079  0EC2  0008               	return
  8080  0EC3  2EBA               	goto	l2705
  8081  0EC4                     __end_of_MTOUCH_Button_InitializeAll:	
  8082  0EC4                     __ptext25:	
  8083 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  8084 ;; Defined at:
  8085 ;;		line 526 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;		None
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  sensor          1    2[BANK0 ] PTR struct .
  8090 ;;		 -> mtouch_sensor(18), 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  1    wreg      void 
  8093 ;; Registers used:
  8094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 1F/0
  8097 ;;		On exit  : 1F/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;Total ram usage:        2 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    5
  8107 ;; This function calls:
  8108 ;;		_Sensor_Sampled_Reset
  8109 ;; This function is called by:
  8110 ;;		_MTOUCH_Initialize
  8111 ;;		_MTOUCH_Service_Mainloop
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  8117  0EC4                     _MTOUCH_Sensor_Sampled_ResetAll:	
  8118                           
  8119                           ;mtouch_sensor.c: 528: mtouch_sensor_t* sensor;
  8120                           ;mtouch_sensor.c: 529: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[2-1];senso
      +                          r++)
  8121                           
  8122                           ;incstack = 0
  8123                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  8124  0EC4  30DC               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  8125  0EC5  00A2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  8126  0EC6                     L3:	
  8127  0EC6  30E5               	movlw	(low ((_mtouch_sensor| 0+9)))& (0+255)
  8128  0EC7  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  8129  0EC8  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  8130  0EC9  0221               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  8131  0ECA  1C03               	btfss	3,0
  8132  0ECB  0008               	return
  8133                           
  8134                           ;mtouch_sensor.c: 530: {
  8135                           ;mtouch_sensor.c: 531: Sensor_Sampled_Reset(sensor);
  8136  0ECC  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  8137  0ECD                     i2L__ptext26:	
  8138                           
  8139                           ;psect for function _Sensor_Sampled_Reset
  8140  0ECD                     i2L_Sensor_Sampled_Reset:	
  8141                           
  8142                           ;incstack = 0
  8143                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8144                           ;Sensor_Sampled_Reset@sensor stored from wreg
  8145  0ECD  00A0               	movwf	Sensor_Sampled_Reset@sensor
  8146  0ECE                     i2Ll2477:	
  8147                           
  8148                           ;mtouch_sensor.c: 545: sensor->sampled = 0;
  8149  0ECE  0820               	movf	Sensor_Sampled_Reset@sensor,w
  8150  0ECF  3E08               	addlw	8
  8151  0ED0  0086               	movwf	6
  8152  0ED1  0187               	clrf	7
  8153  0ED2  1081               	bcf	1,1
  8154  0ED3                     i2Ll470:	
  8155  0ED3  3009               	movlw	9
  8156  0ED4  07A2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  8157  0ED5  2EC6               	goto	L3
  8158  0ED6                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  8159  0ED6                     __ptext16:	
  8160 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  8161 ;; Defined at:
  8162 ;;		line 172 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;		None
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;  sensor          1    5[BANK0 ] enum E4937
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      void 
  8169 ;; Registers used:
  8170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8171 ;; Tracked objects:
  8172 ;;		On entry : B1F/0
  8173 ;;		On exit  : 1F/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;Total ram usage:        1 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; Hardware stack levels required when called:    7
  8183 ;; This function calls:
  8184 ;;		_MTOUCH_Sensor_Initialize
  8185 ;; This function is called by:
  8186 ;;		_MTOUCH_Initialize
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _MTOUCH_Sensor_InitializeAll
  8192  0ED6                     _MTOUCH_Sensor_InitializeAll:	
  8193                           
  8194                           ;mtouch_sensor.c: 174: enum mtouch_sensor_names sensor;
  8195                           ;mtouch_sensor.c: 175: for (sensor = 0; sensor < 2; sensor++)
  8196                           
  8197                           ;incstack = 0
  8198                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8199  0ED6  01A5               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  8200  0ED7                     l2691:	
  8201                           
  8202                           ;mtouch_sensor.c: 176: {
  8203                           ;mtouch_sensor.c: 177: MTOUCH_Sensor_Initialize(sensor);
  8204  0ED7  0825               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  8205  0ED8  26E0  318E         	fcall	_MTOUCH_Sensor_Initialize
  8206  0EDA  3002               	movlw	2
  8207  0EDB  0AA5               	incf	MTOUCH_Sensor_InitializeAll@sensor,f
  8208  0EDC  0225               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  8209  0EDD  1803               	btfsc	3,0
  8210  0EDE  0008               	return
  8211  0EDF  2ED7               	goto	l2691
  8212  0EE0                     __end_of_MTOUCH_Sensor_InitializeAll:	
  8213  0EE0                     __ptext17:	
  8214 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  8215 ;; Defined at:
  8216 ;;		line 143 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;  sensor          1    wreg     enum E4937
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  sensor          1    4[BANK0 ] enum E4937
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      enum E4940
  8223 ;; Registers used:
  8224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8225 ;; Tracked objects:
  8226 ;;		On entry : 1F/0
  8227 ;;		On exit  : 1F/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;Total ram usage:        1 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    6
  8237 ;; This function calls:
  8238 ;;		_MTOUCH_Sensor_Enable
  8239 ;;		_Sensor_Sampled_Reset
  8240 ;;		___bmul
  8241 ;; This function is called by:
  8242 ;;		_MTOUCH_Sensor_InitializeAll
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           
  8247                           ;psect for function _MTOUCH_Sensor_Initialize
  8248  0EE0                     _MTOUCH_Sensor_Initialize:	
  8249                           
  8250                           ;incstack = 0
  8251                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8252                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  8253  0EE0  00A4               	movwf	MTOUCH_Sensor_Initialize@sensor
  8254                           
  8255                           ;mtouch_sensor.c: 145: switch(sensor)
  8256  0EE1  2EF0               	goto	l2639
  8257  0EE2                     l335:	
  8258                           ;mtouch_sensor.c: 146: {
  8259                           ;mtouch_sensor.c: 147: case 0:
  8260                           
  8261                           
  8262                           ;mtouch_sensor.c: 148: WPUCbits.WPUC0 = 0;
  8263  0EE2  0024               	movlb	4	; select bank4
  8264  0EE3  100E               	bcf	14,0	;volatile
  8265                           
  8266                           ;mtouch_sensor.c: 149: ANSELCbits.ANSC0 = 0;
  8267  0EE4  0023               	movlb	3	; select bank3
  8268  0EE5  100E               	bcf	14,0	;volatile
  8269                           
  8270                           ;mtouch_sensor.c: 150: TRISCbits.TRISC0 = 0;
  8271  0EE6  0021               	movlb	1	; select bank1
  8272  0EE7  100E               	bcf	14,0	;volatile
  8273                           
  8274                           ;mtouch_sensor.c: 151: break;
  8275  0EE8  2EF8               	goto	l2641
  8276  0EE9                     l337:	
  8277                           ;mtouch_sensor.c: 152: case 1:
  8278                           
  8279                           
  8280                           ;mtouch_sensor.c: 153: WPUCbits.WPUC1 = 0;
  8281  0EE9  0024               	movlb	4	; select bank4
  8282  0EEA  108E               	bcf	14,1	;volatile
  8283                           
  8284                           ;mtouch_sensor.c: 154: ANSELCbits.ANSC1 = 0;
  8285  0EEB  0023               	movlb	3	; select bank3
  8286  0EEC  108E               	bcf	14,1	;volatile
  8287                           
  8288                           ;mtouch_sensor.c: 155: TRISCbits.TRISC1 = 0;
  8289  0EED  0021               	movlb	1	; select bank1
  8290  0EEE  108E               	bcf	14,1	;volatile
  8291                           
  8292                           ;mtouch_sensor.c: 156: break;
  8293  0EEF  2EF8               	goto	l2641
  8294  0EF0                     l2639:	
  8295  0EF0  0824               	movf	MTOUCH_Sensor_Initialize@sensor,w
  8296                           
  8297                           ; Switch size 1, requested type "speed"
  8298                           ; Number of cases is 2, Range of values is 0 to 1
  8299                           ; switch strategies available:
  8300                           ; Name         Instructions Cycles
  8301                           ; simple_byte            7     4 (average)
  8302                           ; direct_byte           10     6 (fixed)
  8303                           ; jumptable            260     6 (fixed)
  8304                           ;	Chosen strategy is simple_byte
  8305  0EF1  3A00               	xorlw	0	; case 0
  8306  0EF2  1903               	skipnz
  8307  0EF3  2EE2               	goto	l335
  8308  0EF4  3A01               	xorlw	1	; case 1
  8309  0EF5  1903               	skipnz
  8310  0EF6  2EE9               	goto	l337
  8311  0EF7  2F07               	goto	l339
  8312  0EF8                     l2641:	
  8313                           
  8314                           ;mtouch_sensor.c: 160: MTOUCH_Sensor_Enable(sensor);
  8315  0EF8  0020               	movlb	0	; select bank0
  8316  0EF9  0824               	movf	MTOUCH_Sensor_Initialize@sensor,w
  8317  0EFA  2708               	fcall	_MTOUCH_Sensor_Enable
  8318                           
  8319                           ;mtouch_sensor.c: 161: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  8320  0EFB  3009               	movlw	9
  8321  0EFC  00A0               	movwf	___bmul@multiplicand
  8322  0EFD  0824               	movf	MTOUCH_Sensor_Initialize@sensor,w
  8323  0EFE  3183  2345         	fcall	___bmul
  8324  0F00  3EDC               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  8325  0F01                     i1L__ptext26:	
  8326                           
  8327                           ;psect for function _Sensor_Sampled_Reset
  8328  0F01                     i1L_Sensor_Sampled_Reset:	
  8329                           
  8330                           ;incstack = 0
  8331                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8332                           ;Sensor_Sampled_Reset@sensor stored from wreg
  8333  0F01  00A0               	movwf	Sensor_Sampled_Reset@sensor
  8334  0F02                     i1Ll2477:	
  8335                           
  8336                           ;mtouch_sensor.c: 545: sensor->sampled = 0;
  8337  0F02  0820               	movf	Sensor_Sampled_Reset@sensor,w
  8338  0F03  3E08               	addlw	8
  8339  0F04  0086               	movwf	6
  8340  0F05  0187               	clrf	7
  8341  0F06  1081               	bcf	1,1
  8342  0F07                     i1Ll470:	
  8343  0F07                     l339:	
  8344  0F07  0008               	return
  8345  0F08                     __end_of_MTOUCH_Sensor_Initialize:	
  8346  0F08                     __ptext18:	
  8347 ;; *************** function _MTOUCH_Sensor_Enable *****************
  8348 ;; Defined at:
  8349 ;;		line 460 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8350 ;; Parameters:    Size  Location     Type
  8351 ;;  sensor          1    wreg     enum E4937
  8352 ;; Auto vars:     Size  Location     Type
  8353 ;;  sensor          1    3[BANK0 ] enum E4937
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  1    wreg      void 
  8356 ;; Registers used:
  8357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8358 ;; Tracked objects:
  8359 ;;		On entry : 1F/0
  8360 ;;		On exit  : 1F/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;Total ram usage:        1 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    5
  8370 ;; This function calls:
  8371 ;;		___bmul
  8372 ;; This function is called by:
  8373 ;;		_MTOUCH_Sensor_Initialize
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           
  8378                           ;psect for function _MTOUCH_Sensor_Enable
  8379  0F08                     _MTOUCH_Sensor_Enable:	
  8380                           
  8381                           ;incstack = 0
  8382                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8383                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  8384  0F08  00A3               	movwf	MTOUCH_Sensor_Enable@sensor
  8385                           
  8386                           ;mtouch_sensor.c: 462: if(sensor < 2)
  8387  0F09  3002               	movlw	2
  8388  0F0A  0223               	subwf	MTOUCH_Sensor_Enable@sensor,w
  8389  0F0B  1803               	skipnc
  8390  0F0C  0008               	return
  8391                           
  8392                           ;mtouch_sensor.c: 463: mtouch_sensor[sensor].enabled = 1;
  8393  0F0D  3009               	movlw	9
  8394  0F0E  00A0               	movwf	___bmul@multiplicand
  8395  0F0F  0823               	movf	MTOUCH_Sensor_Enable@sensor,w
  8396  0F10  3183  2345         	fcall	___bmul
  8397  0F12  3EE4               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8398  0F13  0086               	movwf	6
  8399  0F14  0187               	clrf	7
  8400  0F15  1401               	bsf	1,0
  8401  0F16  0008               	return
  8402  0F17                     __end_of_MTOUCH_Sensor_Enable:	
  8403  0F17                     __ptext37:	
  8404 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  8405 ;; Defined at:
  8406 ;;		line 292 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;  sensor          1    wreg     PTR struct .
  8409 ;;		 -> mtouch_sensor(18), 
  8410 ;; Auto vars:     Size  Location     Type
  8411 ;;  sensor          1   12[BANK0 ] PTR struct .
  8412 ;;		 -> mtouch_sensor(18), 
  8413 ;;  error           1   11[BANK0 ] enum E4940
  8414 ;;  GIE_state       1   10[BANK0 ] unsigned char 
  8415 ;;  ADCON2_temp     1    9[BANK0 ] unsigned char 
  8416 ;;  ADCON1_temp     1    8[BANK0 ] unsigned char 
  8417 ;;  ADCON0_temp     1    7[BANK0 ] unsigned char 
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  1    wreg      enum E4940
  8420 ;; Registers used:
  8421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 1F/0
  8424 ;;		On exit  : 1F/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;Total ram usage:        6 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    6
  8434 ;; This function calls:
  8435 ;;		_MTOUCH_Delay
  8436 ;;		_MTOUCH_Random
  8437 ;;		_MTOUCH_Sensor_Scan_Initialize
  8438 ;;		_Sensor_Acq_ExecuteScan
  8439 ;;		_Sensor_setScanFunction
  8440 ;; This function is called by:
  8441 ;;		_Sensor_Acquisition
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           
  8446                           ;psect for function _Sensor_Acq_ExecutePacket
  8447  0F17                     _Sensor_Acq_ExecutePacket:	
  8448                           
  8449                           ;incstack = 0
  8450                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8451                           ;Sensor_Acq_ExecutePacket@sensor stored from wreg
  8452  0F17  00AC               	movwf	Sensor_Acq_ExecutePacket@sensor
  8453                           
  8454                           ;mtouch_sensor.c: 295: enum mtouch_sensor_error error = MTOUCH_SENSOR_ERROR_none;
  8455  0F18  01AB               	clrf	Sensor_Acq_ExecutePacket@error
  8456                           
  8457                           ;mtouch_sensor.c: 296: uint8_t ADCON0_temp;
  8458                           ;mtouch_sensor.c: 297: uint8_t ADCON1_temp;
  8459                           ;mtouch_sensor.c: 298: uint8_t ADCON2_temp;
  8460                           ;mtouch_sensor.c: 300: uint8_t GIE_state;
  8461                           ;mtouch_sensor.c: 302: ADCON0_temp = ADCON0;
  8462  0F19  0021               	movlb	1	; select bank1
  8463  0F1A  081D               	movf	29,w	;volatile
  8464  0F1B  0020               	movlb	0	; select bank0
  8465  0F1C  00A7               	movwf	Sensor_Acq_ExecutePacket@ADCON0_temp
  8466                           
  8467                           ;mtouch_sensor.c: 303: ADCON1_temp = ADCON1;
  8468  0F1D  0021               	movlb	1	; select bank1
  8469  0F1E  081E               	movf	30,w	;volatile
  8470  0F1F  0020               	movlb	0	; select bank0
  8471  0F20  00A8               	movwf	Sensor_Acq_ExecutePacket@ADCON1_temp
  8472                           
  8473                           ;mtouch_sensor.c: 304: ADCON2_temp = ADCON2;
  8474  0F21  0021               	movlb	1	; select bank1
  8475  0F22  081F               	movf	31,w	;volatile
  8476  0F23  0020               	movlb	0	; select bank0
  8477  0F24  00A9               	movwf	Sensor_Acq_ExecutePacket@ADCON2_temp
  8478                           
  8479                           ;mtouch_sensor.c: 305: MTOUCH_Sensor_Scan_Initialize();
  8480  0F25  2775  318E         	fcall	_MTOUCH_Sensor_Scan_Initialize
  8481                           
  8482                           ;mtouch_sensor.c: 307: GIE_state = INTCONbits.GIE;
  8483  0F27  3000               	movlw	0
  8484  0F28  1B8B               	btfsc	11,7	;volatile
  8485  0F29  3001               	movlw	1
  8486  0F2A  0020               	movlb	0	; select bank0
  8487  0F2B  00AA               	movwf	Sensor_Acq_ExecutePacket@GIE_state
  8488                           
  8489                           ;mtouch_sensor.c: 309: Sensor_setScanFunction(sensor);
  8490  0F2C  082C               	movf	Sensor_Acq_ExecutePacket@sensor,w
  8491  0F2D  27D4  318E         	fcall	_Sensor_setScanFunction
  8492                           
  8493                           ;mtouch_sensor.c: 311: currentScannSensor = sensor->sensor_name;
  8494  0F2F  0020               	movlb	0	; select bank0
  8495  0F30  082C               	movf	Sensor_Acq_ExecutePacket@sensor,w
  8496  0F31  0086               	movwf	6
  8497  0F32  0187               	clrf	7
  8498  0F33  0801               	movf	1,w
  8499  0F34  00EB               	movwf	_currentScannSensor
  8500                           
  8501                           ;mtouch_sensor.c: 312: packet_counter = sensor->oversampling;
  8502  0F35  082C               	movf	Sensor_Acq_ExecutePacket@sensor,w
  8503  0F36  0086               	movwf	6
  8504  0F37  3F45               	moviw [5]fsr1
  8505  0F38  00EA               	movwf	_packet_counter
  8506                           
  8507                           ;mtouch_sensor.c: 313: packet_sample = 0;
  8508  0F39  01E3               	clrf	_packet_sample
  8509  0F3A  01E4               	clrf	_packet_sample+1
  8510                           
  8511                           ;mtouch_sensor.c: 314: sensor_globalFlags.packet_done = 0;
  8512  0F3B  106C               	bcf	_sensor_globalFlags,0	;volatile
  8513                           
  8514                           ;mtouch_sensor.c: 315: sample_delay = MTOUCH_Random();
  8515  0F3C  276B  318E         	fcall	_MTOUCH_Random
  8516  0F3E  00E9               	movwf	_sample_delay
  8517                           
  8518                           ;mtouch_sensor.c: 316: packet_sample = 0;
  8519  0F3F  01E3               	clrf	_packet_sample
  8520  0F40  01E4               	clrf	_packet_sample+1
  8521                           
  8522                           ;mtouch_sensor.c: 318: sensor_globalFlags.interrupted = 0;
  8523  0F41  10EC               	bcf	_sensor_globalFlags,1	;volatile
  8524  0F42                     l2519:	
  8525                           
  8526                           ;mtouch_sensor.c: 322: {
  8527                           ;mtouch_sensor.c: 323: INTCONbits.GIE = (uint8_t)0;
  8528  0F42  138B               	bcf	11,7	;volatile
  8529                           
  8530                           ;mtouch_sensor.c: 324: Sensor_Acq_ExecuteScan();
  8531  0F43  277B  318E         	fcall	_Sensor_Acq_ExecuteScan
  8532                           
  8533                           ;mtouch_sensor.c: 325: INTCONbits.GIE = GIE_state;
  8534  0F45  0C2A               	rrf	Sensor_Acq_ExecutePacket@GIE_state,w
  8535  0F46  1C03               	skipc
  8536  0F47  138B               	bcf	11,7	;volatile
  8537  0F48  1803               	skipnc
  8538  0F49  178B               	bsf	11,7	;volatile
  8539                           
  8540                           ;mtouch_sensor.c: 326: MTOUCH_Delay();
  8541  0F4A  2764  318E         	fcall	_MTOUCH_Delay
  8542  0F4C                     l381:	
  8543                           ;mtouch_sensor.c: 327: while(ADCON0bits.GO_nDONE == 1);
  8544                           
  8545  0F4C  0021               	movlb	1	; select bank1
  8546  0F4D  189D               	btfsc	29,1	;volatile
  8547  0F4E  2F4C               	goto	l381
  8548                           
  8549                           ;mtouch_sensor.c: 328: } while(sensor_globalFlags.packet_done == 0);
  8550  0F4F  0020               	movlb	0	; select bank0
  8551  0F50  1C6C               	btfss	_sensor_globalFlags,0	;volatile
  8552  0F51  2F42               	goto	l2519
  8553                           
  8554                           ;mtouch_sensor.c: 331: ADCON0 = ADCON0_temp;
  8555  0F52  0827               	movf	Sensor_Acq_ExecutePacket@ADCON0_temp,w
  8556  0F53  0021               	movlb	1	; select bank1
  8557  0F54  009D               	movwf	29	;volatile
  8558                           
  8559                           ;mtouch_sensor.c: 332: ADCON1 = ADCON1_temp;
  8560  0F55  0020               	movlb	0	; select bank0
  8561  0F56  0828               	movf	Sensor_Acq_ExecutePacket@ADCON1_temp,w
  8562  0F57  0021               	movlb	1	; select bank1
  8563  0F58  009E               	movwf	30	;volatile
  8564                           
  8565                           ;mtouch_sensor.c: 333: ADCON2 = ADCON2_temp;
  8566  0F59  0020               	movlb	0	; select bank0
  8567  0F5A  0829               	movf	Sensor_Acq_ExecutePacket@ADCON2_temp,w
  8568  0F5B  0021               	movlb	1	; select bank1
  8569  0F5C  009F               	movwf	31	;volatile
  8570                           
  8571                           ;mtouch_sensor.c: 335: if(sensor_globalFlags.interrupted)
  8572  0F5D  0020               	movlb	0	; select bank0
  8573  0F5E  1CEC               	btfss	_sensor_globalFlags,1	;volatile
  8574  0F5F  2F62               	goto	l385
  8575                           
  8576                           ;mtouch_sensor.c: 336: {
  8577                           ;mtouch_sensor.c: 337: error = MTOUCH_SENSOR_ERROR_interruptedScan;
  8578  0F60  30FA               	movlw	250
  8579  0F61  00AB               	movwf	Sensor_Acq_ExecutePacket@error
  8580  0F62                     l385:	
  8581                           
  8582                           ;mtouch_sensor.c: 338: }
  8583                           ;mtouch_sensor.c: 340: return error;
  8584  0F62  082B               	movf	Sensor_Acq_ExecutePacket@error,w
  8585  0F63  0008               	return
  8586  0F64                     __end_of_Sensor_Acq_ExecutePacket:	
  8587  0F64                     __ptext46:	
  8588 ;; *************** function _MTOUCH_Delay *****************
  8589 ;; Defined at:
  8590 ;;		line 343 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;		None
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  i               1    0[BANK0 ] unsigned char 
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  1    wreg      void 
  8597 ;; Registers used:
  8598 ;;		wreg, status,2, status,0
  8599 ;; Tracked objects:
  8600 ;;		On entry : 1F/0
  8601 ;;		On exit  : 1F/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;Total ram usage:        1 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    4
  8611 ;; This function calls:
  8612 ;;		Nothing
  8613 ;; This function is called by:
  8614 ;;		_Sensor_Acq_ExecutePacket
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           
  8619                           ;psect for function _MTOUCH_Delay
  8620  0F64                     _MTOUCH_Delay:	
  8621                           
  8622                           ;mtouch_sensor.c: 345: for(uint8_t i = sample_delay;i>0;i--)
  8623                           
  8624                           ;incstack = 0
  8625                           ; Regs used in _MTOUCH_Delay: [wreg+status,2+status,0]
  8626  0F64  0869               	movf	_sample_delay,w
  8627  0F65  00A0               	movwf	MTOUCH_Delay@i
  8628  0F66                     l2439:	
  8629  0F66  0820               	movf	MTOUCH_Delay@i,w
  8630  0F67  1903               	btfsc	3,2
  8631  0F68  0008               	return
  8632                           
  8633                           ;mtouch_sensor.c: 346: { }
  8634  0F69  03A0               	decf	MTOUCH_Delay@i,f
  8635  0F6A  2F66               	goto	l2439
  8636  0F6B                     __end_of_MTOUCH_Delay:	
  8637  0F6B                     __ptext45:	
  8638 ;; *************** function _MTOUCH_Random *****************
  8639 ;; Defined at:
  8640 ;;		line 66 in file "mcc_generated_files/mtouch/mtouch_random.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;		None
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;		None
  8645 ;; Return value:  Size  Location     Type
  8646 ;;                  1    wreg      unsigned char 
  8647 ;; Registers used:
  8648 ;;		wreg, status,2, status,0
  8649 ;; Tracked objects:
  8650 ;;		On entry : 1F/0
  8651 ;;		On exit  : 1F/0
  8652 ;;		Unchanged: 1F/0
  8653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;Total ram usage:        0 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    4
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_Sensor_Acq_ExecutePacket
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           
  8669                           ;psect for function _MTOUCH_Random
  8670  0F6B                     _MTOUCH_Random:	
  8671                           
  8672                           ;mtouch_random.c: 68: static MTOUCH_RANDOM_t seed = (MTOUCH_RANDOM_t)0;
  8673                           ;mtouch_random.c: 70: if ((seed & (MTOUCH_RANDOM_t)1) != (MTOUCH_RANDOM_t)0)
  8674                           
  8675                           ;incstack = 0
  8676                           ; Regs used in _MTOUCH_Random: [wreg+status,2+status,0]
  8677  0F6B  1C7C               	btfss	MTOUCH_Random@seed,0
  8678  0F6C  2F6F               	goto	l253
  8679                           
  8680                           ;mtouch_random.c: 71: {
  8681                           ;mtouch_random.c: 73: seed = seed >> (uint8_t)1;
  8682  0F6D  36FC               	lsrf	MTOUCH_Random@seed,f
  8683                           
  8684                           ;mtouch_random.c: 74: }
  8685  0F6E  2F72               	goto	l2389
  8686  0F6F                     l253:	
  8687  0F6F  30B4               	movlw	180
  8688                           
  8689                           ;mtouch_random.c: 75: else
  8690                           ;mtouch_random.c: 76: {
  8691                           ;mtouch_random.c: 81: seed = seed >> (uint8_t)1;
  8692  0F70  36FC               	lsrf	MTOUCH_Random@seed,f
  8693                           
  8694                           ;mtouch_random.c: 82: seed = seed ^ (MTOUCH_RANDOM_t)0xB4;
  8695  0F71  06FC               	xorwf	MTOUCH_Random@seed,f
  8696  0F72                     l2389:	
  8697                           
  8698                           ;mtouch_random.c: 83: }
  8699                           ;mtouch_random.c: 85: return (uint8_t)seed & 0x0F;
  8700  0F72  087C               	movf	MTOUCH_Random@seed,w
  8701  0F73  390F               	andlw	15
  8702  0F74  0008               	return
  8703  0F75                     __end_of_MTOUCH_Random:	
  8704  0F75                     __ptext44:	
  8705 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  8706 ;; Defined at:
  8707 ;;		line 187 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;		None
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;		None
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      void 
  8714 ;; Registers used:
  8715 ;;		wreg, status,2
  8716 ;; Tracked objects:
  8717 ;;		On entry : 1F/0
  8718 ;;		On exit  : 1F/1
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;Total ram usage:        0 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    4
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_MTOUCH_Initialize
  8732 ;;		_Sensor_Acq_ExecutePacket
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           
  8737                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  8738  0F75                     _MTOUCH_Sensor_Scan_Initialize:	
  8739  0F75                     l2365:	
  8740                           ;incstack = 0
  8741                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2]
  8742                           
  8743                           
  8744                           ;mtouch_sensor.c: 190: ADCON0 = (uint8_t)0;
  8745  0F75  0021               	movlb	1	; select bank1
  8746  0F76  019D               	clrf	29	;volatile
  8747                           
  8748                           ;mtouch_sensor.c: 191: ADCON1 = (uint8_t)( 0x1<<7 | 0x2<<4 | 0x0 );
  8749  0F77  30A0               	movlw	160
  8750  0F78  009E               	movwf	30	;volatile
  8751                           
  8752                           ;mtouch_sensor.c: 192: ADCON2 = (uint8_t)0;
  8753  0F79  019F               	clrf	31	;volatile
  8754  0F7A  0008               	return
  8755  0F7B                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  8756  0F7B                     __ptext39:	
  8757 ;; *************** function _Sensor_Acq_ExecuteScan *****************
  8758 ;; Defined at:
  8759 ;;		line 359 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;		None
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;  result          2    5[BANK0 ] unsigned int 
  8764 ;; Return value:  Size  Location     Type
  8765 ;;                  1    wreg      void 
  8766 ;; Registers used:
  8767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8768 ;; Tracked objects:
  8769 ;;		On entry : 1F/0
  8770 ;;		On exit  : 1F/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;Total ram usage:        4 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    5
  8780 ;; This function calls:
  8781 ;;		_MTOUCH_CVD_ScanA_0
  8782 ;;		_MTOUCH_CVD_ScanA_1
  8783 ;;		_MTOUCH_CVD_ScanB_0
  8784 ;;		_MTOUCH_CVD_ScanB_1
  8785 ;;		___bmul
  8786 ;; This function is called by:
  8787 ;;		_Sensor_Acq_ExecutePacket
  8788 ;; This function uses a non-reentrant model
  8789 ;;
  8790                           
  8791                           
  8792                           ;psect for function _Sensor_Acq_ExecuteScan
  8793  0F7B                     _Sensor_Acq_ExecuteScan:	
  8794                           
  8795                           ;mtouch_sensor.c: 361: mtouch_sensor_adcsample_t result = ADRES;
  8796                           
  8797                           ;incstack = 0
  8798                           ; Regs used in _Sensor_Acq_ExecuteScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8799  0F7B  0021               	movlb	1	; select bank1
  8800  0F7C  081C               	movf	28,w	;volatile
  8801  0F7D  0020               	movlb	0	; select bank0
  8802  0F7E  00A6               	movwf	Sensor_Acq_ExecuteScan@result+1
  8803  0F7F  0021               	movlb	1	; select bank1
  8804  0F80  081B               	movf	27,w	;volatile
  8805  0F81  0020               	movlb	0	; select bank0
  8806  0F82  00A5               	movwf	Sensor_Acq_ExecuteScan@result
  8807                           
  8808                           ;mtouch_sensor.c: 363: if(sensor_globalFlags.packet_done)
  8809  0F83  186C               	btfsc	_sensor_globalFlags,0	;volatile
  8810  0F84  0008               	return
  8811                           
  8812                           ;mtouch_sensor.c: 366: if (packet_counter != (uint8_t)0)
  8813  0F85  086A               	movf	_packet_counter,w
  8814  0F86  1D03               	btfss	3,2
  8815  0F87  2F97               	goto	l2411
  8816  0F88  2FCE               	goto	l2421
  8817  0F89                     l2405:	
  8818  0F89  0021               	movlb	1	; select bank1
  8819  0F8A  085B               	movf	(_Sensor_scanA+1)^(0+128),w
  8820  0F8B  008A               	movwf	10
  8821  0F8C  085A               	movf	_Sensor_scanA^(0+128),w
  8822  0F8D  000A               	callw
  8823  0F8E  318E               	pagesel	$
  8824  0F8F  2FAF               	goto	l2413
  8825  0F90                     l2407:	
  8826  0F90  0021               	movlb	1	; select bank1
  8827  0F91  0859               	movf	(_Sensor_scanB+1)^(0+128),w
  8828  0F92  008A               	movwf	10
  8829  0F93  0858               	movf	_Sensor_scanB^(0+128),w
  8830  0F94  000A               	callw
  8831  0F95  318E               	pagesel	$
  8832  0F96  2FAF               	goto	l2413
  8833  0F97                     l2411:	
  8834  0F97  086A               	movf	_packet_counter,w
  8835  0F98  3901               	andlw	1
  8836  0F99  00A3               	movwf	??_Sensor_Acq_ExecuteScan
  8837  0F9A  01A4               	clrf	??_Sensor_Acq_ExecuteScan+1
  8838                           
  8839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8840                           ; Switch size 1, requested type "time"
  8841                           ; Number of cases is 1, Range of values is 0 to 0
  8842                           ; switch strategies available:
  8843                           ; Name         Instructions Cycles
  8844                           ; direct_byte            8     6 (fixed)
  8845                           ; simple_byte            4     3 (average)
  8846                           ; jumptable            260     6 (fixed)
  8847                           ;	Chosen strategy is direct_byte
  8848  0F9B  0824               	movf	??_Sensor_Acq_ExecuteScan+1,w
  8849  0F9C  0084               	movwf	4
  8850  0F9D  3001               	movlw	1
  8851  0F9E  0204               	subwf	4,w
  8852  0F9F  1803               	skipnc
  8853  0FA0  2FAF               	goto	l2413
  8854  0FA1  3180               	movlp	high S3315
  8855  0FA2  3504               	lslf	4,w
  8856  0FA3  3E02               	addlw	low S3315
  8857  0FA4  0082               	movwf	2
  8858  0FA5                     l3313:	
  8859                           
  8860                           ; Switch size 1, requested type "time"
  8861                           ; Number of cases is 2, Range of values is 0 to 1
  8862                           ; switch strategies available:
  8863                           ; Name         Instructions Cycles
  8864                           ; direct_byte           10     6 (fixed)
  8865                           ; simple_byte            7     4 (average)
  8866                           ; jumptable            260     6 (fixed)
  8867                           ;	Chosen strategy is direct_byte
  8868  0FA5  0823               	movf	??_Sensor_Acq_ExecuteScan,w
  8869  0FA6  0084               	movwf	4
  8870  0FA7  3002               	movlw	2
  8871  0FA8  0204               	subwf	4,w
  8872  0FA9  1803               	skipnc
  8873  0FAA  2FAF               	goto	l2413
  8874  0FAB  3188               	movlp	high S3317
  8875  0FAC  3504               	lslf	4,w
  8876  0FAD  3E00               	addlw	low S3317
  8877  0FAE  0082               	movwf	2
  8878  0FAF                     l2413:	
  8879                           
  8880                           ;mtouch_sensor.c: 376: if(packet_counter!=mtouch_sensor[currentScannSensor].oversampling
      +                          )
  8881  0FAF  3009               	movlw	9
  8882  0FB0  0020               	movlb	0	; select bank0
  8883  0FB1  00A0               	movwf	___bmul@multiplicand
  8884  0FB2  086B               	movf	_currentScannSensor,w
  8885  0FB3  3183  2345  318E   	fcall	___bmul
  8886  0FB6  3EE1               	addlw	(low ((_mtouch_sensor| 0+5)))& (0+255)
  8887  0FB7  0086               	movwf	6
  8888  0FB8  0187               	clrf	7
  8889  0FB9  0801               	movf	1,w
  8890  0FBA  066A               	xorwf	_packet_counter,w
  8891  0FBB  1903               	skipnz
  8892  0FBC  2FCC               	goto	l402
  8893                           
  8894                           ;mtouch_sensor.c: 377: {
  8895                           ;mtouch_sensor.c: 378: if(packet_counter & 0x01)
  8896  0FBD  1C6A               	btfss	_packet_counter,0
  8897  0FBE  2FC8               	goto	l2419
  8898                           
  8899                           ;mtouch_sensor.c: 379: {
  8900                           ;mtouch_sensor.c: 380: result = ((mtouch_sensor_adcsample_t)1024) - result;
  8901  0FBF  3004               	movlw	4
  8902  0FC0  01A3               	clrf	??_Sensor_Acq_ExecuteScan
  8903  0FC1  00A4               	movwf	??_Sensor_Acq_ExecuteScan+1
  8904  0FC2  0825               	movf	Sensor_Acq_ExecuteScan@result,w
  8905  0FC3  0223               	subwf	??_Sensor_Acq_ExecuteScan,w
  8906  0FC4  00A5               	movwf	Sensor_Acq_ExecuteScan@result
  8907  0FC5  0826               	movf	Sensor_Acq_ExecuteScan@result+1,w
  8908  0FC6  3B24               	subwfb	??_Sensor_Acq_ExecuteScan+1,w
  8909  0FC7  00A6               	movwf	Sensor_Acq_ExecuteScan@result+1
  8910  0FC8                     l2419:	
  8911                           
  8912                           ;mtouch_sensor.c: 381: }
  8913                           ;mtouch_sensor.c: 382: packet_sample += result;
  8914  0FC8  0825               	movf	Sensor_Acq_ExecuteScan@result,w
  8915  0FC9  07E3               	addwf	_packet_sample,f
  8916  0FCA  0826               	movf	Sensor_Acq_ExecuteScan@result+1,w
  8917  0FCB  3DE4               	addwfc	_packet_sample+1,f
  8918  0FCC                     l402:	
  8919                           
  8920                           ;mtouch_sensor.c: 383: }
  8921                           ;mtouch_sensor.c: 384: packet_counter--;
  8922  0FCC  03EA               	decf	_packet_counter,f
  8923                           
  8924                           ;mtouch_sensor.c: 385: }
  8925  0FCD  0008               	return
  8926  0FCE                     l2421:	
  8927                           
  8928                           ;mtouch_sensor.c: 386: else
  8929                           ;mtouch_sensor.c: 387: {
  8930                           ;mtouch_sensor.c: 388: packet_sample += result;
  8931  0FCE  0825               	movf	Sensor_Acq_ExecuteScan@result,w
  8932  0FCF  07E3               	addwf	_packet_sample,f
  8933  0FD0  0826               	movf	Sensor_Acq_ExecuteScan@result+1,w
  8934  0FD1  3DE4               	addwfc	_packet_sample+1,f
  8935                           
  8936                           ;mtouch_sensor.c: 389: sensor_globalFlags.packet_done = (uint8_t)1;
  8937  0FD2  146C               	bsf	_sensor_globalFlags,0	;volatile
  8938  0FD3  0008               	return
  8939  0FD4                     __end_of_Sensor_Acq_ExecuteScan:	
  8940  0FD4                     __ptext38:	
  8941 ;; *************** function _Sensor_setScanFunction *****************
  8942 ;; Defined at:
  8943 ;;		line 441 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;  sensor          1    wreg     PTR struct .
  8946 ;;		 -> mtouch_sensor(18), 
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  sensor          1    0[BANK0 ] PTR struct .
  8949 ;;		 -> mtouch_sensor(18), 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8954 ;; Tracked objects:
  8955 ;;		On entry : 1F/0
  8956 ;;		On exit  : 1F/1
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        1 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    4
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_Sensor_Acq_ExecutePacket
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           
  8974                           ;psect for function _Sensor_setScanFunction
  8975  0FD4                     _Sensor_setScanFunction:	
  8976                           
  8977                           ;incstack = 0
  8978                           ; Regs used in _Sensor_setScanFunction: [wreg+fsr1l+fsr1h+status,2+status,0]
  8979                           ;Sensor_setScanFunction@sensor stored from wreg
  8980  0FD4  00A0               	movwf	Sensor_setScanFunction@sensor
  8981                           
  8982                           ;mtouch_sensor.c: 443: Sensor_scanA = sensor->scanA;
  8983  0FD5  0A20               	incf	Sensor_setScanFunction@sensor,w
  8984  0FD6  0086               	movwf	6
  8985  0FD7  0187               	clrf	7
  8986  0FD8  3F40               	moviw [0]fsr1
  8987  0FD9  0021               	movlb	1	; select bank1
  8988  0FDA  00DA               	movwf	_Sensor_scanA^(0+128)
  8989  0FDB  3F41               	moviw [1]fsr1
  8990  0FDC  00DB               	movwf	(_Sensor_scanA+1)^(0+128)
  8991                           
  8992                           ;mtouch_sensor.c: 444: Sensor_scanB = sensor->scanB;
  8993  0FDD  0020               	movlb	0	; select bank0
  8994  0FDE  0820               	movf	Sensor_setScanFunction@sensor,w
  8995  0FDF  3E03               	addlw	3
  8996  0FE0  0086               	movwf	6
  8997  0FE1  3F40               	moviw [0]fsr1
  8998  0FE2  0021               	movlb	1	; select bank1
  8999  0FE3  00D8               	movwf	_Sensor_scanB^(0+128)
  9000  0FE4  3F41               	moviw [1]fsr1
  9001  0FE5  00D9               	movwf	(_Sensor_scanB+1)^(0+128)
  9002  0FE6  0008               	return
  9003  0FE7                     __end_of_Sensor_setScanFunction:	
  9004  0FE7                     __ptext10:	
  9005 ;; *************** function _TMR2_Initialize *****************
  9006 ;; Defined at:
  9007 ;;		line 69 in file "mcc_generated_files/tmr2.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;		None
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;		None
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  1    wreg      void 
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0, pclath, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : B1F/A
  9018 ;;		On exit  : B1F/0
  9019 ;;		Unchanged: B00/0
  9020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;Total ram usage:        0 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    5
  9028 ;; This function calls:
  9029 ;;		_TMR2_SetInterruptHandler
  9030 ;; This function is called by:
  9031 ;;		_SYSTEM_Initialize
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           
  9036                           ;psect for function _TMR2_Initialize
  9037  0FE7                     _TMR2_Initialize:	
  9038                           
  9039                           ;tmr2.c: 74: PR2 = 0xFF;
  9040                           
  9041                           ;incstack = 0
  9042                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9043  0FE7  30FF               	movlw	255
  9044  0FE8  0020               	movlb	0	; select bank0
  9045  0FE9  009B               	movwf	27	;volatile
  9046                           
  9047                           ;tmr2.c: 77: TMR2 = 0x00;
  9048  0FEA  019A               	clrf	26	;volatile
  9049                           
  9050                           ;tmr2.c: 80: PIR1bits.TMR2IF = 0;
  9051  0FEB  1091               	bcf	17,1	;volatile
  9052                           
  9053                           ;tmr2.c: 83: PIE1bits.TMR2IE = 1;
  9054  0FEC  0021               	movlb	1	; select bank1
  9055  0FED  1491               	bsf	17,1	;volatile
  9056                           
  9057                           ;tmr2.c: 86: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  9058  0FEE  3080               	movlw	low _TMR2_DefaultInterruptHandler
  9059  0FEF  0020               	movlb	0	; select bank0
  9060  0FF0  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9061  0FF1  300C               	movlw	high _TMR2_DefaultInterruptHandler
  9062  0FF2  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9063  0FF3  27F8               	fcall	_TMR2_SetInterruptHandler
  9064                           
  9065                           ;tmr2.c: 89: T2CON = 0x1C;
  9066  0FF4  301C               	movlw	28
  9067  0FF5  0020               	movlb	0	; select bank0
  9068  0FF6  009C               	movwf	28	;volatile
  9069  0FF7  0008               	return
  9070  0FF8                     __end_of_TMR2_Initialize:	
  9071  0FF8                     __ptext11:	
  9072 ;; *************** function _TMR2_SetInterruptHandler *****************
  9073 ;; Defined at:
  9074 ;;		line 129 in file "mcc_generated_files/tmr2.c"
  9075 ;; Parameters:    Size  Location     Type
  9076 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  9077 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  9078 ;; Auto vars:     Size  Location     Type
  9079 ;;		None
  9080 ;; Return value:  Size  Location     Type
  9081 ;;                  1    wreg      void 
  9082 ;; Registers used:
  9083 ;;		wreg
  9084 ;; Tracked objects:
  9085 ;;		On entry : B1F/0
  9086 ;;		On exit  : B1F/1
  9087 ;;		Unchanged: B00/0
  9088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9089 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9092 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9093 ;;Total ram usage:        2 bytes
  9094 ;; Hardware stack levels used:    1
  9095 ;; Hardware stack levels required when called:    4
  9096 ;; This function calls:
  9097 ;;		Nothing
  9098 ;; This function is called by:
  9099 ;;		_TMR2_Initialize
  9100 ;; This function uses a non-reentrant model
  9101 ;;
  9102                           
  9103                           
  9104                           ;psect for function _TMR2_SetInterruptHandler
  9105  0FF8                     _TMR2_SetInterruptHandler:	
  9106                           
  9107                           ;tmr2.c: 130: TMR2_InterruptHandler = InterruptHandler;
  9108                           
  9109                           ;incstack = 0
  9110                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  9111  0FF8  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  9112  0FF9  0021               	movlb	1	; select bank1
  9113  0FFA  00A9               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
  9114  0FFB  0020               	movlb	0	; select bank0
  9115  0FFC  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  9116  0FFD  0021               	movlb	1	; select bank1
  9117  0FFE  00A8               	movwf	_TMR2_InterruptHandler^(0+128)
  9118  0FFF  0008               	return
  9119  1000                     __end_of_TMR2_SetInterruptHandler:	
  9120                           
  9121                           	psect	text23
  9122  0B7D                     __ptext23:	
  9123 ;; *************** function _MTOUCH_Button_Tick *****************
  9124 ;; Defined at:
  9125 ;;		line 272 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  i               1    3[BANK0 ] unsigned char 
  9130 ;; Return value:  Size  Location     Type
  9131 ;;                  1    wreg      void 
  9132 ;; Registers used:
  9133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9134 ;; Tracked objects:
  9135 ;;		On entry : 1F/0
  9136 ;;		On exit  : 1F/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;Total ram usage:        1 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    5
  9146 ;; This function calls:
  9147 ;;		_Button_Tick_helper
  9148 ;; This function is called by:
  9149 ;;		_MTOUCH_Tick
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           
  9154                           ;psect for function _MTOUCH_Button_Tick
  9155  0B7D                     _MTOUCH_Button_Tick:	
  9156  0B7D                     l2721:	
  9157                           ;incstack = 0
  9158                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9159                           
  9160                           
  9161                           ;mtouch_button.c: 274: uint8_t i;
  9162                           ;mtouch_button.c: 275: for (i = 0; i < 2; i++)
  9163  0B7D  01A3               	clrf	MTOUCH_Button_Tick@i
  9164  0B7E                     l2727:	
  9165                           
  9166                           ;mtouch_button.c: 276: {
  9167                           ;mtouch_button.c: 277: Button_Tick_helper(&mtouch_button[i]);
  9168  0B7E  0E23               	swapf	MTOUCH_Button_Tick@i,w
  9169  0B7F  39F0               	andlw	240
  9170  0B80  3EB2               	addlw	(low (_mtouch_button| 0))& (0+255)
  9171  0B81  2389  318B         	fcall	_Button_Tick_helper
  9172  0B83  3002               	movlw	2
  9173  0B84  0AA3               	incf	MTOUCH_Button_Tick@i,f
  9174  0B85  0223               	subwf	MTOUCH_Button_Tick@i,w
  9175  0B86  1803               	btfsc	3,0
  9176  0B87  0008               	return
  9177  0B88  2B7E               	goto	l2727
  9178  0B89                     __end_of_MTOUCH_Button_Tick:	
  9179  0B89                     __ptext24:	
  9180 ;; *************** function _Button_Tick_helper *****************
  9181 ;; Defined at:
  9182 ;;		line 280 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;  button          1    wreg     PTR struct .
  9185 ;;		 -> mtouch_button(32), 
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  button          1    2[BANK0 ] PTR struct .
  9188 ;;		 -> mtouch_button(32), 
  9189 ;; Return value:  Size  Location     Type
  9190 ;;                  1    wreg      void 
  9191 ;; Registers used:
  9192 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9193 ;; Tracked objects:
  9194 ;;		On entry : 1F/0
  9195 ;;		On exit  : 1F/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;Total ram usage:        3 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; Hardware stack levels required when called:    4
  9205 ;; This function calls:
  9206 ;;		Nothing
  9207 ;; This function is called by:
  9208 ;;		_MTOUCH_Button_Tick
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           
  9213                           ;psect for function _Button_Tick_helper
  9214  0B89                     _Button_Tick_helper:	
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  9218                           ;Button_Tick_helper@button stored from wreg
  9219  0B89  00A2               	movwf	Button_Tick_helper@button
  9220                           
  9221                           ;mtouch_button.c: 283: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  9222  0B8A  3E02               	addlw	2
  9223  0B8B  0086               	movwf	6
  9224  0B8C  3002               	movlw	2
  9225  0B8D  0187               	clrf	7
  9226  0B8E  0601               	xorwf	1,w
  9227  0B8F  1D03               	btfss	3,2
  9228  0B90  0008               	return
  9229                           
  9230                           ;mtouch_button.c: 284: {
  9231                           ;mtouch_button.c: 285: (button->counter)++;
  9232  0B91  0822               	movf	Button_Tick_helper@button,w
  9233  0B92  3E0A               	addlw	10
  9234  0B93  0086               	movwf	6
  9235  0B94  3001               	movlw	1
  9236  0B95  0781               	addwf	1,f
  9237  0B96  3141               	addfsr 1,1
  9238  0B97  1803               	skipnc
  9239  0B98  0A81               	incf	1,f
  9240                           
  9241                           ;mtouch_button.c: 286: if (button->counter == (mtouch_button_statecounter_t)0)
  9242  0B99  0822               	movf	Button_Tick_helper@button,w
  9243  0B9A  3E0A               	addlw	10
  9244  0B9B  0086               	movwf	6
  9245  0B9C  0187               	clrf	7
  9246  0B9D  0016               	moviw fsr1++
  9247  0B9E  0401               	iorwf	1,w
  9248  0B9F  1D03               	btfss	3,2
  9249  0BA0  0008               	return
  9250                           
  9251                           ;mtouch_button.c: 287: {
  9252                           ;mtouch_button.c: 288: button->counter = (mtouch_button_statecounter_t)0xFFFF;
  9253  0BA1  0822               	movf	Button_Tick_helper@button,w
  9254  0BA2  3E0A               	addlw	10
  9255  0BA3  0086               	movwf	6
  9256  0BA4  30FF               	movlw	255
  9257  0BA5  0187               	clrf	7
  9258  0BA6  3FC0               	movwi [0]fsr1
  9259  0BA7  3FC1               	movwi [1]fsr1
  9260  0BA8  0008               	return
  9261  0BA9                     __end_of_Button_Tick_helper:	
  9262                           
  9263                           	psect	text26
  9264  0000                     __ptext26:	
  9265 ;; *************** function _Sensor_Sampled_Reset *****************
  9266 ;; Defined at:
  9267 ;;		line 543 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;  sensor          1    wreg     PTR struct .
  9270 ;;		 -> mtouch_sensor(18), 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;  sensor          1    0[BANK0 ] PTR struct .
  9273 ;;		 -> mtouch_sensor(18), 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  1    wreg      void 
  9276 ;; Registers used:
  9277 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9278 ;; Tracked objects:
  9279 ;;		On entry : 1F/0
  9280 ;;		On exit  : 1F/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;Total ram usage:        1 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    4
  9290 ;; This function calls:
  9291 ;;		Nothing
  9292 ;; This function is called by:
  9293 ;;		_MTOUCH_Sensor_Initialize
  9294 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298  0000                     _Sensor_Sampled_Reset:	
  9299                           ;psect for function _Sensor_Sampled_Reset
  9300                           
  9301  0000                     __end_of_Sensor_Sampled_Reset:	
  9302                           ;mtouch_sensor.c: 545: sensor->sampled = 0;
  9303                           
  9304                           ;incstack = 0
  9305                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  9306                           ;Sensor_Sampled_Reset@sensor stored from wreg
  9307                           
  9308                           
  9309                           	psect	text29
  9310  0000                     __ptext29:	
  9311 ;; *************** function _Sensor_setSampled *****************
  9312 ;; Defined at:
  9313 ;;		line 548 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;  sensor          1    wreg     PTR struct .
  9316 ;;		 -> mtouch_sensor(18), 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;  sensor          1    0[BANK0 ] PTR struct .
  9319 ;;		 -> mtouch_sensor(18), 
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  1    wreg      void 
  9322 ;; Registers used:
  9323 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9324 ;; Tracked objects:
  9325 ;;		On entry : 1F/0
  9326 ;;		On exit  : 1F/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;Total ram usage:        1 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    4
  9336 ;; This function calls:
  9337 ;;		Nothing
  9338 ;; This function is called by:
  9339 ;;		_Sensor_Service
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343  0000                     _Sensor_setSampled:	
  9344                           ;psect for function _Sensor_setSampled
  9345                           
  9346  0000                     __end_of_Sensor_setSampled:	
  9347                           ;mtouch_sensor.c: 550: sensor->sampled = 1;
  9348                           
  9349                           ;incstack = 0
  9350                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  9351                           ;Sensor_setSampled@sensor stored from wreg
  9352                           
  9353                           
  9354                           	psect	text30
  9355  0ACB                     __ptext30:	
  9356 ;; *************** function _Sensor_RawSample_Update *****************
  9357 ;; Defined at:
  9358 ;;		line 409 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;  sensor          1    wreg     PTR struct .
  9361 ;;		 -> mtouch_sensor(18), 
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  sensor          1    0[BANK0 ] PTR struct .
  9364 ;;		 -> mtouch_sensor(18), 
  9365 ;; Return value:  Size  Location     Type
  9366 ;;                  1    wreg      void 
  9367 ;; Registers used:
  9368 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9369 ;; Tracked objects:
  9370 ;;		On entry : 1F/0
  9371 ;;		On exit  : 1F/0
  9372 ;;		Unchanged: 0/0
  9373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;Total ram usage:        1 bytes
  9379 ;; Hardware stack levels used:    1
  9380 ;; Hardware stack levels required when called:    4
  9381 ;; This function calls:
  9382 ;;		Nothing
  9383 ;; This function is called by:
  9384 ;;		_Sensor_Service
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           
  9389                           ;psect for function _Sensor_RawSample_Update
  9390  0ACB                     _Sensor_RawSample_Update:	
  9391                           
  9392                           ;incstack = 0
  9393                           ; Regs used in _Sensor_RawSample_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  9394                           ;Sensor_RawSample_Update@sensor stored from wreg
  9395  0ACB  00A0               	movwf	Sensor_RawSample_Update@sensor
  9396                           
  9397                           ;mtouch_sensor.c: 411: if (INTCONbits.GIE == (uint8_t)1)
  9398  0ACC  1F8B               	btfss	11,7	;volatile
  9399  0ACD  2AD8               	goto	l2681
  9400                           
  9401                           ;mtouch_sensor.c: 412: {
  9402                           ;mtouch_sensor.c: 413: INTCONbits.GIE = (uint8_t)0;
  9403  0ACE  138B               	bcf	11,7	;volatile
  9404                           
  9405                           ;mtouch_sensor.c: 414: sensor->rawSample = packet_sample;
  9406  0ACF  3E06               	addlw	6
  9407  0AD0  0086               	movwf	6
  9408  0AD1  0187               	clrf	7
  9409  0AD2  0863               	movf	_packet_sample,w
  9410  0AD3  3FC0               	movwi [0]fsr1
  9411  0AD4  0864               	movf	_packet_sample+1,w
  9412  0AD5  3FC1               	movwi [1]fsr1
  9413                           
  9414                           ;mtouch_sensor.c: 415: INTCONbits.GIE = (uint8_t)1;
  9415  0AD6  178B               	bsf	11,7	;volatile
  9416                           
  9417                           ;mtouch_sensor.c: 416: }
  9418  0AD7  0008               	return
  9419  0AD8                     l2681:	
  9420                           
  9421                           ;mtouch_sensor.c: 417: else
  9422                           ;mtouch_sensor.c: 418: {
  9423                           ;mtouch_sensor.c: 419: sensor->rawSample = packet_sample;
  9424  0AD8  0820               	movf	Sensor_RawSample_Update@sensor,w
  9425  0AD9  3E06               	addlw	6
  9426  0ADA  0086               	movwf	6
  9427  0ADB  0187               	clrf	7
  9428  0ADC  0863               	movf	_packet_sample,w
  9429  0ADD  3FC0               	movwi [0]fsr1
  9430  0ADE  0864               	movf	_packet_sample+1,w
  9431  0ADF  3FC1               	movwi [1]fsr1
  9432  0AE0  0008               	return
  9433  0AE1                     __end_of_Sensor_RawSample_Update:	
  9434                           
  9435                           	psect	text34
  9436  0000                     __ptext34:	
  9437 ;; *************** function _Sensor_setInactive *****************
  9438 ;; Defined at:
  9439 ;;		line 494 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9440 ;; Parameters:    Size  Location     Type
  9441 ;;  sensor          1    wreg     PTR struct .
  9442 ;;		 -> mtouch_sensor(18), 
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;  sensor          1    0[BANK0 ] PTR struct .
  9445 ;;		 -> mtouch_sensor(18), 
  9446 ;; Return value:  Size  Location     Type
  9447 ;;                  1    wreg      void 
  9448 ;; Registers used:
  9449 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9450 ;; Tracked objects:
  9451 ;;		On entry : 1F/0
  9452 ;;		On exit  : 1F/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;Total ram usage:        1 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:    4
  9462 ;; This function calls:
  9463 ;;		Nothing
  9464 ;; This function is called by:
  9465 ;;		_Sensor_Acquisition
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469  0000                     _Sensor_setInactive:	
  9470                           ;psect for function _Sensor_setInactive
  9471                           
  9472  0000                     __end_of_Sensor_setInactive:	
  9473                           ;mtouch_sensor.c: 496: sensor->acitve = 0;
  9474                           
  9475                           ;incstack = 0
  9476                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9477                           ;Sensor_setInactive@sensor stored from wreg
  9478                           
  9479                           
  9480                           	psect	text35
  9481  0000                     __ptext35:	
  9482 ;; *************** function _Sensor_setActive *****************
  9483 ;; Defined at:
  9484 ;;		line 489 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;  sensor          1    wreg     PTR struct .
  9487 ;;		 -> mtouch_sensor(18), 
  9488 ;; Auto vars:     Size  Location     Type
  9489 ;;  sensor          1    0[BANK0 ] PTR struct .
  9490 ;;		 -> mtouch_sensor(18), 
  9491 ;; Return value:  Size  Location     Type
  9492 ;;                  1    wreg      void 
  9493 ;; Registers used:
  9494 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9495 ;; Tracked objects:
  9496 ;;		On entry : 1F/0
  9497 ;;		On exit  : 1F/0
  9498 ;;		Unchanged: 0/0
  9499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;Total ram usage:        1 bytes
  9505 ;; Hardware stack levels used:    1
  9506 ;; Hardware stack levels required when called:    4
  9507 ;; This function calls:
  9508 ;;		Nothing
  9509 ;; This function is called by:
  9510 ;;		_Sensor_Acquisition
  9511 ;; This function uses a non-reentrant model
  9512 ;;
  9513                           
  9514  0000                     _Sensor_setActive:	
  9515                           ;psect for function _Sensor_setActive
  9516                           
  9517  0000                     __end_of_Sensor_setActive:	
  9518                           ;mtouch_sensor.c: 491: sensor->acitve = 1;
  9519                           
  9520                           ;incstack = 0
  9521                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9522                           ;Sensor_setActive@sensor stored from wreg
  9523                           
  9524                           
  9525                           	psect	swtext1
  9526  0002                     __pswtext1:	
  9527  0002                     S3315:	
  9528  0002  318F  2FA5         	ljmp	l3313
  9529                           
  9530                           	psect	swtext2
  9531  0800                     __pswtext2:	
  9532  0800                     S3317:	
  9533  0800  318F  2F89         	ljmp	l2405
  9534  0802  318F  2F90         	ljmp	l2407
  9535                           
  9536                           	psect	text40
  9537  0B5D                     __ptext40:	
  9538 ;; *************** function _MTOUCH_CVD_ScanB_0 *****************
  9539 ;; Defined at:
  9540 ;;		line 137 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9541 ;; Parameters:    Size  Location     Type
  9542 ;;		None
  9543 ;; Auto vars:     Size  Location     Type
  9544 ;;		None
  9545 ;; Return value:  Size  Location     Type
  9546 ;;                  1    wreg      void 
  9547 ;; Registers used:
  9548 ;;		wreg
  9549 ;; Tracked objects:
  9550 ;;		On entry : 1F/1
  9551 ;;		On exit  : 0/0
  9552 ;;		Unchanged: 0/0
  9553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9558 ;;Total ram usage:        0 bytes
  9559 ;; Hardware stack levels used:    1
  9560 ;; Hardware stack levels required when called:    4
  9561 ;; This function calls:
  9562 ;;		Nothing
  9563 ;; This function is called by:
  9564 ;;		_Sensor_Acq_ExecuteScan
  9565 ;; This function uses a non-reentrant model
  9566 ;;
  9567                           
  9568                           
  9569                           ;psect for function _MTOUCH_CVD_ScanB_0
  9570  0B5D                     _MTOUCH_CVD_ScanB_0:	
  9571                           
  9572                           ;incstack = 0
  9573                           ; Regs used in _MTOUCH_CVD_ScanB_0: [wreg]
  9574  0B5D  0022               	banksel	270	;# 
  9575  0B5E  108E               	bcf	14,1	;# 
  9576  0B5F  0021               	banksel	157	;# 
  9577  0B60  3015               	movlw	21	;# 
  9578  0B61  009D               	movwf	29	;# 
  9579                           
  9580                           ;mtouch_sensor_scan.c: 149: _delay(10);
  9581  0B62  3003               	movlw	3
  9582  0B63                     u2517:	
  9583  0B63  0B89               	decfsz	9,f
  9584  0B64  2B63               	goto	u2517
  9585  0B65  0000               	nop
  9586  0B66  308E               	movlw	142	;# 
  9587  0B67  0084               	movwf	4	;# 
  9588  0B68  3000               	movlw	0	;# 
  9589  0B69  0085               	movwf	5	;# 
  9590  0B6A  300C               	movlw	12	;# 
  9591  0B6B  0086               	movwf	6	;# 
  9592  0B6C  3001               	movlw	1	;# 
  9593  0B6D  0087               	movwf	7	;# 
  9594  0B6E  3011               	movlw	17	;# 
  9595  0B6F  1400               	bsf	0,0	;# 
  9596                           
  9597                           ;mtouch_sensor_scan.c: 167: _delay(0);
  9598  0B70  009D               	movwf	29	;# 
  9599  0B71  1101               	bcf	1,2	;# 
  9600                           
  9601                           ;mtouch_sensor_scan.c: 174: _delay(5);
  9602  0B72  3200               	nop2	;2 cycle nop
  9603  0B73  3200               	nop2	;2 cycle nop
  9604  0B74  0000               	nop
  9605  0B75  0021               	banksel	157	;# 
  9606  0B76  149D               	bsf	29,1	;# 
  9607                           
  9608                           ;mtouch_sensor_scan.c: 181: _delay(3);
  9609  0B77  3200               	nop2	;2 cycle nop
  9610  0B78  0000               	nop
  9611  0B79  0022               	banksel	270	;# 
  9612  0B7A  100E               	bcf	14,0	;# 
  9613  0B7B  1000               	bcf	0,0	;# 
  9614  0B7C  0008               	return
  9615  0B7D                     __end_of_MTOUCH_CVD_ScanB_0:	
  9616                           
  9617                           	psect	text41
  9618  0B3D                     __ptext41:	
  9619 ;; *************** function _MTOUCH_CVD_ScanB_1 *****************
  9620 ;; Defined at:
  9621 ;;		line 264 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;		None
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;		None
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  1    wreg      void 
  9628 ;; Registers used:
  9629 ;;		wreg
  9630 ;; Tracked objects:
  9631 ;;		On entry : 1F/1
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;Total ram usage:        0 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    4
  9642 ;; This function calls:
  9643 ;;		Nothing
  9644 ;; This function is called by:
  9645 ;;		_Sensor_Acq_ExecuteScan
  9646 ;; This function uses a non-reentrant model
  9647 ;;
  9648                           
  9649                           
  9650                           ;psect for function _MTOUCH_CVD_ScanB_1
  9651  0B3D                     _MTOUCH_CVD_ScanB_1:	
  9652                           
  9653                           ;incstack = 0
  9654                           ; Regs used in _MTOUCH_CVD_ScanB_1: [wreg]
  9655  0B3D  0022               	banksel	270	;# 
  9656  0B3E  100E               	bcf	14,0	;# 
  9657  0B3F  0021               	banksel	157	;# 
  9658  0B40  3011               	movlw	17	;# 
  9659  0B41  009D               	movwf	29	;# 
  9660                           
  9661                           ;mtouch_sensor_scan.c: 276: _delay(10);
  9662  0B42  3003               	movlw	3
  9663  0B43                     u2527:	
  9664  0B43  0B89               	decfsz	9,f
  9665  0B44  2B43               	goto	u2527
  9666  0B45  0000               	nop
  9667  0B46  308E               	movlw	142	;# 
  9668  0B47  0084               	movwf	4	;# 
  9669  0B48  3000               	movlw	0	;# 
  9670  0B49  0085               	movwf	5	;# 
  9671  0B4A  300C               	movlw	12	;# 
  9672  0B4B  0086               	movwf	6	;# 
  9673  0B4C  3001               	movlw	1	;# 
  9674  0B4D  0087               	movwf	7	;# 
  9675  0B4E  3015               	movlw	21	;# 
  9676  0B4F  1480               	bsf	0,1	;# 
  9677                           
  9678                           ;mtouch_sensor_scan.c: 294: _delay(0);
  9679  0B50  009D               	movwf	29	;# 
  9680  0B51  1101               	bcf	1,2	;# 
  9681                           
  9682                           ;mtouch_sensor_scan.c: 301: _delay(5);
  9683  0B52  3200               	nop2	;2 cycle nop
  9684  0B53  3200               	nop2	;2 cycle nop
  9685  0B54  0000               	nop
  9686  0B55  0021               	banksel	157	;# 
  9687  0B56  149D               	bsf	29,1	;# 
  9688                           
  9689                           ;mtouch_sensor_scan.c: 308: _delay(3);
  9690  0B57  3200               	nop2	;2 cycle nop
  9691  0B58  0000               	nop
  9692  0B59  0022               	banksel	270	;# 
  9693  0B5A  108E               	bcf	14,1	;# 
  9694  0B5B  1080               	bcf	0,1	;# 
  9695  0B5C  0008               	return
  9696  0B5D                     __end_of_MTOUCH_CVD_ScanB_1:	
  9697                           
  9698                           	psect	text42
  9699  0B1D                     __ptext42:	
  9700 ;; *************** function _MTOUCH_CVD_ScanA_0 *****************
  9701 ;; Defined at:
  9702 ;;		line 74 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;		None
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;		None
  9707 ;; Return value:  Size  Location     Type
  9708 ;;                  1    wreg      void 
  9709 ;; Registers used:
  9710 ;;		wreg
  9711 ;; Tracked objects:
  9712 ;;		On entry : 1F/1
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;Total ram usage:        0 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    4
  9723 ;; This function calls:
  9724 ;;		Nothing
  9725 ;; This function is called by:
  9726 ;;		_Sensor_Acq_ExecuteScan
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           
  9731                           ;psect for function _MTOUCH_CVD_ScanA_0
  9732  0B1D                     _MTOUCH_CVD_ScanA_0:	
  9733                           
  9734                           ;incstack = 0
  9735                           ; Regs used in _MTOUCH_CVD_ScanA_0: [wreg]
  9736  0B1D  0022               	banksel	270	;# 
  9737  0B1E  148E               	bsf	14,1	;# 
  9738  0B1F  0021               	banksel	157	;# 
  9739  0B20  3015               	movlw	21	;# 
  9740  0B21  009D               	movwf	29	;# 
  9741                           
  9742                           ;mtouch_sensor_scan.c: 86: _delay(10);
  9743  0B22  3003               	movlw	3
  9744  0B23                     u2537:	
  9745  0B23  0B89               	decfsz	9,f
  9746  0B24  2B23               	goto	u2537
  9747  0B25  0000               	nop
  9748  0B26  308E               	movlw	142	;# 
  9749  0B27  0084               	movwf	4	;# 
  9750  0B28  3000               	movlw	0	;# 
  9751  0B29  0085               	movwf	5	;# 
  9752  0B2A  300C               	movlw	12	;# 
  9753  0B2B  0086               	movwf	6	;# 
  9754  0B2C  3001               	movlw	1	;# 
  9755  0B2D  0087               	movwf	7	;# 
  9756  0B2E  3011               	movlw	17	;# 
  9757  0B2F  1400               	bsf	0,0	;# 
  9758                           
  9759                           ;mtouch_sensor_scan.c: 104: _delay(0);
  9760  0B30  009D               	movwf	29	;# 
  9761  0B31  1501               	bsf	1,2	;# 
  9762                           
  9763                           ;mtouch_sensor_scan.c: 110: _delay(5);
  9764  0B32  3200               	nop2	;2 cycle nop
  9765  0B33  3200               	nop2	;2 cycle nop
  9766  0B34  0000               	nop
  9767  0B35  0021               	banksel	157	;# 
  9768  0B36  149D               	bsf	29,1	;# 
  9769                           
  9770                           ;mtouch_sensor_scan.c: 117: _delay(3);
  9771  0B37  3200               	nop2	;2 cycle nop
  9772  0B38  0000               	nop
  9773  0B39  0022               	banksel	270	;# 
  9774  0B3A  140E               	bsf	14,0	;# 
  9775  0B3B  1000               	bcf	0,0	;# 
  9776  0B3C  0008               	return
  9777  0B3D                     __end_of_MTOUCH_CVD_ScanA_0:	
  9778                           
  9779                           	psect	text43
  9780  0AFD                     __ptext43:	
  9781 ;; *************** function _MTOUCH_CVD_ScanA_1 *****************
  9782 ;; Defined at:
  9783 ;;		line 201 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;		None
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;		None
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      void 
  9790 ;; Registers used:
  9791 ;;		wreg
  9792 ;; Tracked objects:
  9793 ;;		On entry : 1F/1
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;Total ram usage:        0 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    4
  9804 ;; This function calls:
  9805 ;;		Nothing
  9806 ;; This function is called by:
  9807 ;;		_Sensor_Acq_ExecuteScan
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           
  9812                           ;psect for function _MTOUCH_CVD_ScanA_1
  9813  0AFD                     _MTOUCH_CVD_ScanA_1:	
  9814                           
  9815                           ;incstack = 0
  9816                           ; Regs used in _MTOUCH_CVD_ScanA_1: [wreg]
  9817  0AFD  0022               	banksel	270	;# 
  9818  0AFE  140E               	bsf	14,0	;# 
  9819  0AFF  0021               	banksel	157	;# 
  9820  0B00  3011               	movlw	17	;# 
  9821  0B01  009D               	movwf	29	;# 
  9822                           
  9823                           ;mtouch_sensor_scan.c: 213: _delay(10);
  9824  0B02  3003               	movlw	3
  9825  0B03                     u2547:	
  9826  0B03  0B89               	decfsz	9,f
  9827  0B04  2B03               	goto	u2547
  9828  0B05  0000               	nop
  9829  0B06  308E               	movlw	142	;# 
  9830  0B07  0084               	movwf	4	;# 
  9831  0B08  3000               	movlw	0	;# 
  9832  0B09  0085               	movwf	5	;# 
  9833  0B0A  300C               	movlw	12	;# 
  9834  0B0B  0086               	movwf	6	;# 
  9835  0B0C  3001               	movlw	1	;# 
  9836  0B0D  0087               	movwf	7	;# 
  9837  0B0E  3015               	movlw	21	;# 
  9838  0B0F  1480               	bsf	0,1	;# 
  9839                           
  9840                           ;mtouch_sensor_scan.c: 231: _delay(0);
  9841  0B10  009D               	movwf	29	;# 
  9842  0B11  1501               	bsf	1,2	;# 
  9843                           
  9844                           ;mtouch_sensor_scan.c: 237: _delay(5);
  9845  0B12  3200               	nop2	;2 cycle nop
  9846  0B13  3200               	nop2	;2 cycle nop
  9847  0B14  0000               	nop
  9848  0B15  0021               	banksel	157	;# 
  9849  0B16  149D               	bsf	29,1	;# 
  9850                           
  9851                           ;mtouch_sensor_scan.c: 244: _delay(3);
  9852  0B17  3200               	nop2	;2 cycle nop
  9853  0B18  0000               	nop
  9854  0B19  0022               	banksel	270	;# 
  9855  0B1A  148E               	bsf	14,1	;# 
  9856  0B1B  1080               	bcf	0,1	;# 
  9857  0B1C  0008               	return
  9858  0B1D                     __end_of_MTOUCH_CVD_ScanA_1:	
  9859                           
  9860                           	psect	text53
  9861  0606                     __ptext53:	
  9862 ;; *************** function _Button_State_Pressed *****************
  9863 ;; Defined at:
  9864 ;;		line 248 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;  button          1   12[BANK0 ] PTR struct .
  9867 ;;		 -> mtouch_button(32), 
  9868 ;; Auto vars:     Size  Location     Type
  9869 ;;		None
  9870 ;; Return value:  Size  Location     Type
  9871 ;;                  1    wreg      void 
  9872 ;; Registers used:
  9873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9874 ;; Tracked objects:
  9875 ;;		On entry : 1F/0
  9876 ;;		On exit  : 1F/0
  9877 ;;		Unchanged: 0/0
  9878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9879 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;Total ram usage:        3 bytes
  9884 ;; Hardware stack levels used:    1
  9885 ;; Hardware stack levels required when called:    6
  9886 ;; This function calls:
  9887 ;;		_Button_DefaultCallback
  9888 ;;		_MTOUCH_Button_Initialize
  9889 ;; This function is called by:
  9890 ;;		_Button_Service
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894                           
  9895                           ;psect for function _Button_State_Pressed
  9896  0606                     _Button_State_Pressed:	
  9897                           
  9898                           ;mtouch_button.c: 251: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
  9899                           
  9900                           ;incstack = 0
  9901                           ; Regs used in _Button_State_Pressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9902  0606  082C               	movf	Button_State_Pressed@button,w
  9903  0607  3E0A               	addlw	10
  9904  0608  0086               	movwf	6
  9905  0609  0187               	clrf	7
  9906  060A  3F40               	moviw [0]fsr1
  9907  060B  00AD               	movwf	??_Button_State_Pressed
  9908  060C  3F41               	moviw [1]fsr1
  9909  060D  00AE               	movwf	??_Button_State_Pressed+1
  9910  060E  3003               	movlw	3
  9911  060F  022E               	subwf	??_Button_State_Pressed+1,w
  9912  0610  30E8               	movlw	232
  9913  0611  1903               	skipnz
  9914  0612  022D               	subwf	??_Button_State_Pressed,w
  9915                           
  9916                           ;mtouch_button.c: 252: {
  9917                           ;mtouch_button.c: 253: MTOUCH_Button_Initialize(button->name);
  9918  0613  082C               	movf	Button_State_Pressed@button,w
  9919  0614  1C03               	skipc
  9920  0615  2E21               	goto	L9
  9921  0616  0086               	movwf	6
  9922  0617  0801               	movf	1,w
  9923  0618  3183  2314  3186   	fcall	_MTOUCH_Button_Initialize
  9924                           
  9925                           ;mtouch_button.c: 254: callback_notPressed(button->name);
  9926  061B  082C               	movf	Button_State_Pressed@button,w
  9927  061C  0086               	movwf	6
  9928  061D  0187               	clrf	7
  9929  061E  0801               	movf	1,w
  9930  061F  00A0               	movwf	Button_DefaultCallback@button
  9931  0620  2F2E               	ljmp	l242
  9932  0621                     L9:	
  9933                           ;mtouch_button.c: 258: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold) >> 1))
  9934                           
  9935                           ;mtouch_button.c: 255: }
  9936                           
  9937  0621  3E09               	addlw	9
  9938  0622  0086               	movwf	6
  9939  0623  0187               	clrf	7
  9940  0624  0801               	movf	1,w
  9941  0625  3A80               	xorlw	128
  9942  0626  00AD               	movwf	??_Button_State_Pressed
  9943  0627  082C               	movf	Button_State_Pressed@button,w
  9944  0628  3E0E               	addlw	14
  9945  0629  0086               	movwf	6
  9946  062A  3701               	asrf	1,w
  9947  062B  3A80               	xorlw	128
  9948  062C  02AD               	subwf	??_Button_State_Pressed,f
  9949  062D  1803               	skipnc
  9950  062E  0008               	return
  9951                           
  9952                           ;mtouch_button.c: 259: {
  9953                           ;mtouch_button.c: 260: button->state = MTOUCH_BUTTON_STATE_notPressed;
  9954  062F  082C               	movf	Button_State_Pressed@button,w
  9955  0630  3E02               	addlw	2
  9956  0631  0086               	movwf	6
  9957  0632  0181               	clrf	1
  9958  0633  0A81               	incf	1,f
  9959                           
  9960                           ;mtouch_button.c: 261: button->counter = (mtouch_button_statecounter_t)0;
  9961  0634  082C               	movf	Button_State_Pressed@button,w
  9962  0635  3E0A               	addlw	10
  9963  0636  0086               	movwf	6
  9964  0637  3000               	movlw	0
  9965  0638  3FC0               	movwi [0]fsr1
  9966  0639  3FC1               	movwi [1]fsr1
  9967                           
  9968                           ;mtouch_button.c: 262: callback_notPressed(button->name);
  9969  063A  082C               	movf	Button_State_Pressed@button,w
  9970  063B  0086               	movwf	6
  9971  063C  0801               	movf	1,w
  9972  063D  00A0               	movwf	Button_DefaultCallback@button
  9973  063E  2F2E               	ljmp	l242
  9974  063F                     __end_of_Button_State_Pressed:	
  9975  063F                     __ptext52:	
  9976 ;; *************** function _Button_State_Initializing *****************
  9977 ;; Defined at:
  9978 ;;		line 194 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;  button          1   12[BANK0 ] PTR struct .
  9981 ;;		 -> mtouch_button(32), 
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;		None
  9984 ;; Return value:  Size  Location     Type
  9985 ;;                  1    wreg      void 
  9986 ;; Registers used:
  9987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9988 ;; Tracked objects:
  9989 ;;		On entry : 1F/0
  9990 ;;		On exit  : 1F/0
  9991 ;;		Unchanged: 0/0
  9992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9993 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;Total ram usage:        5 bytes
  9998 ;; Hardware stack levels used:    1
  9999 ;; Hardware stack levels required when called:    7
 10000 ;; This function calls:
 10001 ;;		_Button_Baseline_Initialize
 10002 ;;		_Button_Baseline_Update
 10003 ;; This function is called by:
 10004 ;;		_Button_Service
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008                           
 10009                           ;psect for function _Button_State_Initializing
 10010  063F                     _Button_State_Initializing:	
 10011                           
 10012                           ;mtouch_button.c: 197: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_statecounter_t)16)/2)
 10013                           
 10014                           ;incstack = 0
 10015                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10016  063F  082C               	movf	Button_State_Initializing@button,w
 10017  0640  3E0A               	addlw	10
 10018  0641  0086               	movwf	6
 10019  0642  0187               	clrf	7
 10020  0643  3F40               	moviw [0]fsr1
 10021  0644  00AD               	movwf	??_Button_State_Initializing
 10022  0645  3F41               	moviw [1]fsr1
 10023  0646  00AE               	movwf	??_Button_State_Initializing+1
 10024  0647  3000               	movlw	0
 10025  0648  022E               	subwf	??_Button_State_Initializing+1,w
 10026  0649  3009               	movlw	9
 10027  064A  1903               	skipnz
 10028  064B  022D               	subwf	??_Button_State_Initializing,w
 10029                           
 10030                           ;mtouch_button.c: 198: {
 10031                           ;mtouch_button.c: 199: Button_Baseline_Initialize(button);
 10032  064C  082C               	movf	Button_State_Initializing@button,w
 10033  064D  1803               	skipnc
 10034  064E  2E52               	goto	L8
 10035  064F  2692  3186         	fcall	_Button_Baseline_Initialize
 10036                           
 10037                           ;mtouch_button.c: 200: } else {
 10038  0651  2E54               	goto	l2593
 10039  0652                     L8:	
 10040                           ;mtouch_button.c: 201: Button_Baseline_Update(button);
 10041                           
 10042  0652  272F  3186         	fcall	_Button_Baseline_Update
 10043  0654                     l2593:	
 10044                           
 10045                           ;mtouch_button.c: 202: }
 10046                           ;mtouch_button.c: 205: (button->counter)++;
 10047  0654  082C               	movf	Button_State_Initializing@button,w
 10048  0655  3E0A               	addlw	10
 10049  0656  0086               	movwf	6
 10050  0657  3001               	movlw	1
 10051  0658  0187               	clrf	7
 10052  0659  0781               	addwf	1,f
 10053  065A  3141               	addfsr 1,1
 10054  065B  1803               	skipnc
 10055  065C  0A81               	incf	1,f
 10056                           
 10057                           ;mtouch_button.c: 206: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_statecounter_t)16))
 10058  065D  082C               	movf	Button_State_Initializing@button,w
 10059  065E  3E0A               	addlw	10
 10060  065F  0086               	movwf	6
 10061  0660  0187               	clrf	7
 10062  0661  3F40               	moviw [0]fsr1
 10063  0662  00AD               	movwf	??_Button_State_Initializing
 10064  0663  3F41               	moviw [1]fsr1
 10065  0664  00AE               	movwf	??_Button_State_Initializing+1
 10066  0665  3000               	movlw	0
 10067  0666  022E               	subwf	??_Button_State_Initializing+1,w
 10068  0667  3010               	movlw	16
 10069  0668  1903               	skipnz
 10070  0669  022D               	subwf	??_Button_State_Initializing,w
 10071  066A  1C03               	skipc
 10072  066B  0008               	return
 10073                           
 10074                           ;mtouch_button.c: 207: {
 10075                           ;mtouch_button.c: 208: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4));
 10076  066C  082C               	movf	Button_State_Initializing@button,w
 10077  066D  3E05               	addlw	5
 10078  066E  0086               	movwf	6
 10079  066F  3F40               	moviw [0]fsr1
 10080  0670  00AD               	movwf	??_Button_State_Initializing
 10081  0671  3F41               	moviw [1]fsr1
 10082  0672  00AE               	movwf	??_Button_State_Initializing+1
 10083  0673  3F42               	moviw [2]fsr1
 10084  0674  00AF               	movwf	??_Button_State_Initializing+2
 10085  0675  3F43               	moviw [3]fsr1
 10086  0676  00B0               	movwf	??_Button_State_Initializing+3
 10087  0677  3004               	movlw	4
 10088  0678                     u1595:	
 10089  0678  36B0               	lsrf	??_Button_State_Initializing+3,f
 10090  0679  0CAF               	rrf	??_Button_State_Initializing+2,f
 10091  067A  0CAE               	rrf	??_Button_State_Initializing+1,f
 10092  067B  0CAD               	rrf	??_Button_State_Initializing,f
 10093  067C  0B89               	decfsz	9,f
 10094  067D  2E78               	goto	u1595
 10095  067E  082C               	movf	Button_State_Initializing@button,w
 10096  067F  3E03               	addlw	3
 10097  0680  0086               	movwf	6
 10098  0681  0187               	clrf	7
 10099  0682  082D               	movf	??_Button_State_Initializing,w
 10100  0683  3FC0               	movwi [0]fsr1
 10101  0684  082E               	movf	??_Button_State_Initializing+1,w
 10102  0685  3FC1               	movwi [1]fsr1
 10103                           
 10104                           ;mtouch_button.c: 209: button->state = MTOUCH_BUTTON_STATE_notPressed;
 10105  0686  082C               	movf	Button_State_Initializing@button,w
 10106  0687  3E02               	addlw	2
 10107  0688  0086               	movwf	6
 10108  0689  0181               	clrf	1
 10109  068A  0A81               	incf	1,f
 10110                           
 10111                           ;mtouch_button.c: 210: button->counter = (mtouch_button_statecounter_t)0;
 10112  068B  082C               	movf	Button_State_Initializing@button,w
 10113  068C  3E0A               	addlw	10
 10114  068D  0086               	movwf	6
 10115  068E  3000               	movlw	0
 10116  068F  3FC0               	movwi [0]fsr1
 10117  0690  3FC1               	movwi [1]fsr1
 10118  0691  0008               	return
 10119  0692                     __end_of_Button_State_Initializing:	
 10120  0692                     __ptext58:	
 10121 ;; *************** function _Button_Baseline_Initialize *****************
 10122 ;; Defined at:
 10123 ;;		line 422 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;  button          1    wreg     PTR struct .
 10126 ;;		 -> mtouch_button(32), 
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;  button          1   11[BANK0 ] PTR struct .
 10129 ;;		 -> mtouch_button(32), 
 10130 ;; Return value:  Size  Location     Type
 10131 ;;                  1    wreg      void 
 10132 ;; Registers used:
 10133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10134 ;; Tracked objects:
 10135 ;;		On entry : 1F/0
 10136 ;;		On exit  : 1F/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;Total ram usage:        5 bytes
 10144 ;; Hardware stack levels used:    1
 10145 ;; Hardware stack levels required when called:    6
 10146 ;; This function calls:
 10147 ;;		_MTOUCH_Sensor_RawSample_Get
 10148 ;; This function is called by:
 10149 ;;		_Button_State_Initializing
 10150 ;; This function uses a non-reentrant model
 10151 ;;
 10152                           
 10153                           
 10154                           ;psect for function _Button_Baseline_Initialize
 10155  0692                     _Button_Baseline_Initialize:	
 10156                           
 10157                           ;incstack = 0
 10158                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10159                           ;Button_Baseline_Initialize@button stored from wreg
 10160  0692  00AB               	movwf	Button_Baseline_Initialize@button
 10161                           
 10162                           ;mtouch_button.c: 424: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
 10163  0693  0A2B               	incf	Button_Baseline_Initialize@button,w
 10164  0694  0086               	movwf	6
 10165  0695  0187               	clrf	7
 10166  0696  0801               	movf	1,w
 10167  0697  3183  2300  3186   	fcall	_MTOUCH_Sensor_RawSample_Get
 10168  069A  0823               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 10169  069B  00A7               	movwf	??_Button_Baseline_Initialize
 10170  069C  0824               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 10171  069D  00A8               	movwf	??_Button_Baseline_Initialize+1
 10172  069E  01A9               	clrf	??_Button_Baseline_Initialize+2
 10173  069F  01AA               	clrf	??_Button_Baseline_Initialize+3
 10174  06A0  082B               	movf	Button_Baseline_Initialize@button,w
 10175  06A1  3E05               	addlw	5
 10176  06A2  0086               	movwf	6
 10177  06A3  0187               	clrf	7
 10178  06A4  0827               	movf	??_Button_Baseline_Initialize,w
 10179  06A5  3FC0               	movwi [0]fsr1
 10180  06A6  0828               	movf	??_Button_Baseline_Initialize+1,w
 10181  06A7  3FC1               	movwi [1]fsr1
 10182  06A8  0829               	movf	??_Button_Baseline_Initialize+2,w
 10183  06A9  3FC2               	movwi [2]fsr1
 10184  06AA  082A               	movf	??_Button_Baseline_Initialize+3,w
 10185  06AB  3FC3               	movwi [3]fsr1
 10186                           
 10187                           ;mtouch_button.c: 425: button->baseline <<= ((uint8_t)4);
 10188  06AC  082B               	movf	Button_Baseline_Initialize@button,w
 10189  06AD  3E05               	addlw	5
 10190  06AE  0086               	movwf	6
 10191  06AF  3004               	movlw	4
 10192  06B0                     u1415:	
 10193  06B0  3581               	lslf	1,f
 10194  06B1  3141               	addfsr 1,1
 10195  06B2  0D81               	rlf	1,f
 10196  06B3  3141               	addfsr 1,1
 10197  06B4  0D81               	rlf	1,f
 10198  06B5  3141               	addfsr 1,1
 10199  06B6  0D81               	rlf	1,f
 10200  06B7  317D               	addfsr 1,-3
 10201  06B8  0B89               	decfsz	9,f
 10202  06B9  2EB0               	goto	u1415
 10203  06BA  0008               	return
 10204  06BB                     __end_of_Button_Baseline_Initialize:	
 10205  06BB                     __ptext51:	
 10206 ;; *************** function _Button_State_NotPressed *****************
 10207 ;; Defined at:
 10208 ;;		line 213 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;  button          1   12[BANK0 ] PTR struct .
 10211 ;;		 -> mtouch_button(32), 
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;		None
 10214 ;; Return value:  Size  Location     Type
 10215 ;;                  1    wreg      void 
 10216 ;; Registers used:
 10217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10218 ;; Tracked objects:
 10219 ;;		On entry : 1F/0
 10220 ;;		On exit  : 1F/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10223 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;Total ram usage:        3 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    6
 10230 ;; This function calls:
 10231 ;;		_Button_Baseline_Update
 10232 ;;		_Button_DefaultCallback
 10233 ;;		_MTOUCH_Button_Initialize
 10234 ;; This function is called by:
 10235 ;;		_Button_Service
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           
 10240                           ;psect for function _Button_State_NotPressed
 10241  06BB                     _Button_State_NotPressed:	
 10242                           
 10243                           ;mtouch_button.c: 216: if ((button->deviation) < (mtouch_button_deviation_t)(mtouch_butt
      +                          on_deviation_t)-10)
 10244                           
 10245                           ;incstack = 0
 10246                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10247  06BB  082C               	movf	Button_State_NotPressed@button,w
 10248  06BC  3E09               	addlw	9
 10249  06BD  0086               	movwf	6
 10250  06BE  0187               	clrf	7
 10251  06BF  0801               	movf	1,w
 10252  06C0  3A80               	xorlw	128
 10253  06C1  3E8A               	addlw	138
 10254                           
 10255                           ;mtouch_button.c: 217: {
 10256                           ;mtouch_button.c: 218: (button->counter)++;
 10257  06C2  082C               	movf	Button_State_NotPressed@button,w
 10258  06C3  1803               	skipnc
 10259  06C4  2EE8               	goto	L5
 10260  06C5  3E0A               	addlw	10
 10261  06C6  0086               	movwf	6
 10262  06C7  3001               	movlw	1
 10263  06C8  0781               	addwf	1,f
 10264  06C9  3141               	addfsr 1,1
 10265  06CA  1803               	skipnc
 10266  06CB  0A81               	incf	1,f
 10267                           
 10268                           ;mtouch_button.c: 219: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)32))
 10269  06CC  082C               	movf	Button_State_NotPressed@button,w
 10270  06CD  3E0A               	addlw	10
 10271  06CE  0086               	movwf	6
 10272  06CF  0187               	clrf	7
 10273  06D0  3F40               	moviw [0]fsr1
 10274  06D1  00AD               	movwf	??_Button_State_NotPressed
 10275  06D2  3F41               	moviw [1]fsr1
 10276  06D3  00AE               	movwf	??_Button_State_NotPressed+1
 10277  06D4  3000               	movlw	0
 10278  06D5  022E               	subwf	??_Button_State_NotPressed+1,w
 10279  06D6  3021               	movlw	33
 10280  06D7  1903               	skipnz
 10281  06D8  022D               	subwf	??_Button_State_NotPressed,w
 10282                           
 10283                           ;mtouch_button.c: 220: {
 10284                           ;mtouch_button.c: 221: button->counter = (mtouch_button_statecounter_t)0;
 10285  06D9  082C               	movf	Button_State_NotPressed@button,w
 10286  06DA  1C03               	skipc
 10287  06DB  2F0F               	goto	L6
 10288  06DC  3E0A               	addlw	10
 10289  06DD  0086               	movwf	6
 10290  06DE  3000               	movlw	0
 10291  06DF  3FC0               	movwi [0]fsr1
 10292  06E0  3FC1               	movwi [1]fsr1
 10293                           
 10294                           ;mtouch_button.c: 222: MTOUCH_Button_Initialize(button->name);
 10295  06E1  082C               	movf	Button_State_NotPressed@button,w
 10296  06E2  0086               	movwf	6
 10297  06E3  0801               	movf	1,w
 10298  06E4  3183  2314  3186   	fcall	_MTOUCH_Button_Initialize
 10299  06E7  2F0E               	goto	l142
 10300  06E8                     L5:	
 10301                           ;mtouch_button.c: 226: else if ((button->deviation) > (button->threshold))
 10302                           
 10303  06E8  3E0E               	addlw	14
 10304  06E9  0086               	movwf	6
 10305  06EA  0187               	clrf	7
 10306  06EB  0801               	movf	1,w
 10307  06EC  3A80               	xorlw	128
 10308  06ED  00AD               	movwf	??_Button_State_NotPressed
 10309  06EE  082C               	movf	Button_State_NotPressed@button,w
 10310  06EF  3E09               	addlw	9
 10311  06F0  0086               	movwf	6
 10312  06F1  0801               	movf	1,w
 10313  06F2  3A80               	xorlw	128
 10314  06F3  02AD               	subwf	??_Button_State_NotPressed,f
 10315                           
 10316                           ;mtouch_button.c: 227: {
 10317                           ;mtouch_button.c: 229: button->state = MTOUCH_BUTTON_STATE_pressed;
 10318  06F4  082C               	movf	Button_State_NotPressed@button,w
 10319  06F5  1803               	skipnc
 10320  06F6  2F08               	goto	L7
 10321  06F7  3E02               	addlw	2
 10322  06F8  0086               	movwf	6
 10323  06F9  3002               	movlw	2
 10324  06FA  0081               	movwf	1
 10325                           
 10326                           ;mtouch_button.c: 230: button->counter = (mtouch_button_statecounter_t)0;
 10327  06FB  082C               	movf	Button_State_NotPressed@button,w
 10328  06FC  3E0A               	addlw	10
 10329  06FD  0086               	movwf	6
 10330  06FE  3000               	movlw	0
 10331  06FF  3FC0               	movwi [0]fsr1
 10332  0700  3FC1               	movwi [1]fsr1
 10333                           
 10334                           ;mtouch_button.c: 231: callback_pressed(button->name);
 10335  0701  082C               	movf	Button_State_NotPressed@button,w
 10336  0702  0086               	movwf	6
 10337  0703  0801               	movf	1,w
 10338  0704  00A0               	movwf	Button_DefaultCallback@button
 10339  0705  272E  3186         	fcall	_Button_DefaultCallback
 10340                           
 10341                           ;mtouch_button.c: 232: }
 10342  0707  2F0E               	goto	l142
 10343  0708                     L7:	
 10344                           ;mtouch_button.c: 233: else
 10345                           ;mtouch_button.c: 234: {
 10346                           ;mtouch_button.c: 236: button->counter = (mtouch_button_statecounter_t)0;
 10347                           
 10348  0708  3E0A               	addlw	10
 10349  0709  0086               	movwf	6
 10350  070A  3000               	movlw	0
 10351  070B  0187               	clrf	7
 10352  070C  3FC0               	movwi [0]fsr1
 10353  070D  3FC1               	movwi [1]fsr1
 10354  070E                     l142:	
 10355                           
 10356                           ;mtouch_button.c: 237: }
 10357                           ;mtouch_button.c: 240: (button->baseline_count)++;
 10358  070E  082C               	movf	Button_State_NotPressed@button,w
 10359  070F                     L6:	
 10360  070F  3E0C               	addlw	12
 10361  0710  0086               	movwf	6
 10362  0711  3001               	movlw	1
 10363  0712  0187               	clrf	7
 10364  0713  0781               	addwf	1,f
 10365  0714  3141               	addfsr 1,1
 10366  0715  1803               	skipnc
 10367  0716  0A81               	incf	1,f
 10368                           
 10369                           ;mtouch_button.c: 241: if ((button->baseline_count) > ((mtouch_button_baselinecounter_t)
      +                          32))
 10370  0717  082C               	movf	Button_State_NotPressed@button,w
 10371  0718  3E0C               	addlw	12
 10372  0719  0086               	movwf	6
 10373  071A  0187               	clrf	7
 10374  071B  3F40               	moviw [0]fsr1
 10375  071C  00AD               	movwf	??_Button_State_NotPressed
 10376  071D  3F41               	moviw [1]fsr1
 10377  071E  00AE               	movwf	??_Button_State_NotPressed+1
 10378  071F  3000               	movlw	0
 10379  0720  022E               	subwf	??_Button_State_NotPressed+1,w
 10380  0721  3021               	movlw	33
 10381  0722  1903               	skipnz
 10382  0723  022D               	subwf	??_Button_State_NotPressed,w
 10383  0724  1C03               	skipc
 10384  0725  0008               	return
 10385                           
 10386                           ;mtouch_button.c: 242: {
 10387                           ;mtouch_button.c: 243: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10388  0726  082C               	movf	Button_State_NotPressed@button,w
 10389  0727  3E0C               	addlw	12
 10390  0728  0086               	movwf	6
 10391  0729  3000               	movlw	0
 10392  072A  3FC0               	movwi [0]fsr1
 10393  072B  3FC1               	movwi [1]fsr1
 10394                           
 10395                           ;mtouch_button.c: 244: Button_Baseline_Update(button);
 10396  072C  082C               	movf	Button_State_NotPressed@button,w
 10397  072D  2F2F               	ljmp	_Button_Baseline_Update
 10398  072E                     __end_of_Button_State_NotPressed:	
 10399  072E                     __ptext56:	
 10400 ;; *************** function _Button_DefaultCallback *****************
 10401 ;; Defined at:
 10402 ;;		line 470 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10403 ;; Parameters:    Size  Location     Type
 10404 ;;  button          1    0[BANK0 ] enum E4949
 10405 ;; Auto vars:     Size  Location     Type
 10406 ;;		None
 10407 ;; Return value:  Size  Location     Type
 10408 ;;                  1    wreg      void 
 10409 ;; Registers used:
 10410 ;;		None
 10411 ;; Tracked objects:
 10412 ;;		On entry : 1F/0
 10413 ;;		On exit  : 1F/0
 10414 ;;		Unchanged: 1F/0
 10415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10416 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;Total ram usage:        1 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    4
 10423 ;; This function calls:
 10424 ;;		Nothing
 10425 ;; This function is called by:
 10426 ;;		_Button_State_NotPressed
 10427 ;;		_Button_State_Pressed
 10428 ;; This function uses a non-reentrant model
 10429 ;;
 10430                           
 10431                           
 10432                           ;psect for function _Button_DefaultCallback
 10433  072E                     _Button_DefaultCallback:	
 10434  072E                     l242:	
 10435                           ;incstack = 0
 10436                           ; Regs used in _Button_DefaultCallback: []
 10437                           
 10438  072E  0008               	return
 10439  072F                     __end_of_Button_DefaultCallback:	
 10440  072F                     __ptext57:	
 10441 ;; *************** function _Button_Baseline_Update *****************
 10442 ;; Defined at:
 10443 ;;		line 428 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10444 ;; Parameters:    Size  Location     Type
 10445 ;;  button          1    wreg     PTR struct .
 10446 ;;		 -> mtouch_button(32), 
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;  button          1    6[BANK0 ] PTR struct .
 10449 ;;		 -> mtouch_button(32), 
 10450 ;; Return value:  Size  Location     Type
 10451 ;;                  1    wreg      void 
 10452 ;; Registers used:
 10453 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10454 ;; Tracked objects:
 10455 ;;		On entry : 1F/0
 10456 ;;		On exit  : 1F/0
 10457 ;;		Unchanged: 0/0
 10458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;Total ram usage:        7 bytes
 10464 ;; Hardware stack levels used:    1
 10465 ;; Hardware stack levels required when called:    4
 10466 ;; This function calls:
 10467 ;;		Nothing
 10468 ;; This function is called by:
 10469 ;;		_Button_State_Initializing
 10470 ;;		_Button_State_NotPressed
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           
 10475                           ;psect for function _Button_Baseline_Update
 10476  072F                     _Button_Baseline_Update:	
 10477                           
 10478                           ;incstack = 0
 10479                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 10480                           ;Button_Baseline_Update@button stored from wreg
 10481  072F  00A6               	movwf	Button_Baseline_Update@button
 10482                           
 10483                           ;mtouch_button.c: 430: if (GIE == (uint8_t)1)
 10484  0730  1F8B               	btfss	11,7	;volatile
 10485  0731  2F73               	goto	l2471
 10486                           
 10487                           ;mtouch_button.c: 431: {
 10488                           ;mtouch_button.c: 432: GIE = (uint8_t)0;
 10489  0732  138B               	bcf	11,7	;volatile
 10490                           
 10491                           ;mtouch_button.c: 433: button->baseline -= (button->baseline) >> ((uint8_t)4);
 10492  0733  3E05               	addlw	5
 10493  0734  0086               	movwf	6
 10494  0735  0187               	clrf	7
 10495  0736  3F40               	moviw [0]fsr1
 10496  0737  00A0               	movwf	??_Button_Baseline_Update
 10497  0738  3F41               	moviw [1]fsr1
 10498  0739  00A1               	movwf	??_Button_Baseline_Update+1
 10499  073A  3F42               	moviw [2]fsr1
 10500  073B  00A2               	movwf	??_Button_Baseline_Update+2
 10501  073C  3F43               	moviw [3]fsr1
 10502  073D  00A3               	movwf	??_Button_Baseline_Update+3
 10503  073E  3004               	movlw	4
 10504  073F                     u1435:	
 10505  073F  36A3               	lsrf	??_Button_Baseline_Update+3,f
 10506  0740  0CA2               	rrf	??_Button_Baseline_Update+2,f
 10507  0741  0CA1               	rrf	??_Button_Baseline_Update+1,f
 10508  0742  0CA0               	rrf	??_Button_Baseline_Update,f
 10509  0743  0B89               	decfsz	9,f
 10510  0744  2F3F               	goto	u1435
 10511  0745  0826               	movf	Button_Baseline_Update@button,w
 10512  0746  3E05               	addlw	5
 10513  0747  0086               	movwf	6
 10514  0748  0187               	clrf	7
 10515  0749  0820               	movf	??_Button_Baseline_Update,w
 10516  074A  0281               	subwf	1,f
 10517  074B  3141               	addfsr 1,1
 10518  074C  0821               	movf	??_Button_Baseline_Update+1,w
 10519  074D  3B81               	subwfb	1,f
 10520  074E  3141               	addfsr 1,1
 10521  074F  0822               	movf	??_Button_Baseline_Update+2,w
 10522  0750  3B81               	subwfb	1,f
 10523  0751  3141               	addfsr 1,1
 10524  0752  0823               	movf	??_Button_Baseline_Update+3,w
 10525  0753  3B81               	subwfb	1,f
 10526  0754  317D               	addfsr 1,-3
 10527                           
 10528                           ;mtouch_button.c: 434: button->baseline += button->reading;
 10529  0755  0826               	movf	Button_Baseline_Update@button,w
 10530  0756  3E03               	addlw	3
 10531  0757  0086               	movwf	6
 10532  0758  0187               	clrf	7
 10533  0759  3F40               	moviw [0]fsr1
 10534  075A  00A0               	movwf	??_Button_Baseline_Update
 10535  075B  3F41               	moviw [1]fsr1
 10536  075C  00A1               	movwf	??_Button_Baseline_Update+1
 10537  075D  0820               	movf	??_Button_Baseline_Update,w
 10538  075E  00A2               	movwf	??_Button_Baseline_Update+2
 10539  075F  0821               	movf	??_Button_Baseline_Update+1,w
 10540  0760  00A3               	movwf	??_Button_Baseline_Update+3
 10541  0761  01A4               	clrf	??_Button_Baseline_Update+4
 10542  0762  01A5               	clrf	??_Button_Baseline_Update+5
 10543  0763  0826               	movf	Button_Baseline_Update@button,w
 10544  0764  3E05               	addlw	5
 10545  0765  0086               	movwf	6
 10546  0766  0822               	movf	??_Button_Baseline_Update+2,w
 10547  0767  0781               	addwf	1,f
 10548  0768  3141               	addfsr 1,1
 10549  0769  0823               	movf	??_Button_Baseline_Update+3,w
 10550  076A  3D81               	addwfc	1,f
 10551  076B  3141               	addfsr 1,1
 10552  076C  0824               	movf	??_Button_Baseline_Update+4,w
 10553  076D  3D81               	addwfc	1,f
 10554  076E  3141               	addfsr 1,1
 10555  076F  0825               	movf	??_Button_Baseline_Update+5,w
 10556  0770  3D81               	addwfc	1,f
 10557                           
 10558                           ;mtouch_button.c: 435: GIE = (uint8_t)1;
 10559  0771  178B               	bsf	11,7	;volatile
 10560                           
 10561                           ;mtouch_button.c: 436: }
 10562  0772  0008               	return
 10563  0773                     l2471:	
 10564                           
 10565                           ;mtouch_button.c: 437: else
 10566                           ;mtouch_button.c: 438: {
 10567                           ;mtouch_button.c: 439: button->baseline -= (button->baseline) >> ((uint8_t)4);
 10568  0773  0826               	movf	Button_Baseline_Update@button,w
 10569  0774  3E05               	addlw	5
 10570  0775  0086               	movwf	6
 10571  0776  0187               	clrf	7
 10572  0777  3F40               	moviw [0]fsr1
 10573  0778  00A0               	movwf	??_Button_Baseline_Update
 10574  0779  3F41               	moviw [1]fsr1
 10575  077A  00A1               	movwf	??_Button_Baseline_Update+1
 10576  077B  3F42               	moviw [2]fsr1
 10577  077C  00A2               	movwf	??_Button_Baseline_Update+2
 10578  077D  3F43               	moviw [3]fsr1
 10579  077E  00A3               	movwf	??_Button_Baseline_Update+3
 10580  077F  3004               	movlw	4
 10581  0780                     u1445:	
 10582  0780  36A3               	lsrf	??_Button_Baseline_Update+3,f
 10583  0781  0CA2               	rrf	??_Button_Baseline_Update+2,f
 10584  0782  0CA1               	rrf	??_Button_Baseline_Update+1,f
 10585  0783  0CA0               	rrf	??_Button_Baseline_Update,f
 10586  0784  0B89               	decfsz	9,f
 10587  0785  2F80               	goto	u1445
 10588  0786  0826               	movf	Button_Baseline_Update@button,w
 10589  0787  3E05               	addlw	5
 10590  0788  0086               	movwf	6
 10591  0789  0187               	clrf	7
 10592  078A  0820               	movf	??_Button_Baseline_Update,w
 10593  078B  0281               	subwf	1,f
 10594  078C  3141               	addfsr 1,1
 10595  078D  0821               	movf	??_Button_Baseline_Update+1,w
 10596  078E  3B81               	subwfb	1,f
 10597  078F  3141               	addfsr 1,1
 10598  0790  0822               	movf	??_Button_Baseline_Update+2,w
 10599  0791  3B81               	subwfb	1,f
 10600  0792  3141               	addfsr 1,1
 10601  0793  0823               	movf	??_Button_Baseline_Update+3,w
 10602  0794  3B81               	subwfb	1,f
 10603  0795  317D               	addfsr 1,-3
 10604                           
 10605                           ;mtouch_button.c: 440: button->baseline += button->reading;
 10606  0796  0826               	movf	Button_Baseline_Update@button,w
 10607  0797  3E03               	addlw	3
 10608  0798  0086               	movwf	6
 10609  0799  0187               	clrf	7
 10610  079A  3F40               	moviw [0]fsr1
 10611  079B  00A0               	movwf	??_Button_Baseline_Update
 10612  079C  3F41               	moviw [1]fsr1
 10613  079D  00A1               	movwf	??_Button_Baseline_Update+1
 10614  079E  0820               	movf	??_Button_Baseline_Update,w
 10615  079F  00A2               	movwf	??_Button_Baseline_Update+2
 10616  07A0  0821               	movf	??_Button_Baseline_Update+1,w
 10617  07A1  00A3               	movwf	??_Button_Baseline_Update+3
 10618  07A2  01A4               	clrf	??_Button_Baseline_Update+4
 10619  07A3  01A5               	clrf	??_Button_Baseline_Update+5
 10620  07A4  0826               	movf	Button_Baseline_Update@button,w
 10621  07A5  3E05               	addlw	5
 10622  07A6  0086               	movwf	6
 10623  07A7  0822               	movf	??_Button_Baseline_Update+2,w
 10624  07A8  0781               	addwf	1,f
 10625  07A9  3141               	addfsr 1,1
 10626  07AA  0823               	movf	??_Button_Baseline_Update+3,w
 10627  07AB  3D81               	addwfc	1,f
 10628  07AC  3141               	addfsr 1,1
 10629  07AD  0824               	movf	??_Button_Baseline_Update+4,w
 10630  07AE  3D81               	addwfc	1,f
 10631  07AF  3141               	addfsr 1,1
 10632  07B0  0825               	movf	??_Button_Baseline_Update+5,w
 10633  07B1  3D81               	addwfc	1,f
 10634  07B2  0008               	return
 10635  07B3                     __end_of_Button_Baseline_Update:	
 10636                           
 10637                           	psect	intentry
 10638  0004                     __pintentry:	
 10639 ;; *************** function _INTERRUPT_InterruptManager *****************
 10640 ;; Defined at:
 10641 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;		None
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;		None
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  1    wreg      void 
 10648 ;; Registers used:
 10649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;Total ram usage:        0 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:    3
 10662 ;; This function calls:
 10663 ;;		_TMR2_ISR
 10664 ;; This function is called by:
 10665 ;;		Interrupt level 1
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669  0004                     _INTERRUPT_InterruptManager:	
 10670                           
 10671                           ;incstack = 0
 10672  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10673                           
 10674                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10675  0005  3180               	pagesel	$
 10676                           
 10677                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
 10678  0006  1F0B               	btfss	11,6	;volatile
 10679  0007  2810               	goto	i1l553
 10680                           
 10681                           ;interrupt_manager.c: 56: {
 10682                           ;interrupt_manager.c: 57: if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 10683  0008  0021               	movlb	1	; select bank1
 10684  0009  1C91               	btfss	17,1	;volatile
 10685  000A  2810               	goto	i1l553
 10686  000B  0020               	movlb	0	; select bank0
 10687  000C  1C91               	btfss	17,1	;volatile
 10688  000D  2810               	goto	i1l553
 10689                           
 10690                           ;interrupt_manager.c: 58: {
 10691                           ;interrupt_manager.c: 59: TMR2_ISR();
 10692  000E  318A  22BE         	fcall	_TMR2_ISR
 10693  0010                     i1l553:	
 10694                           ;interrupt_manager.c: 60: }
 10695                           
 10696  0010  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10697  0011  0009               	retfie
 10698  0012                     __end_of_INTERRUPT_InterruptManager:	
 10699                           
 10700                           	psect	text66
 10701  0ABE                     __ptext66:	
 10702 ;; *************** function _TMR2_ISR *****************
 10703 ;; Defined at:
 10704 ;;		line 120 in file "mcc_generated_files/tmr2.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;		None
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;		None
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      void 
 10711 ;; Registers used:
 10712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 1F/0
 10715 ;;		On exit  : 1F/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;Total ram usage:        0 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    2
 10725 ;; This function calls:
 10726 ;;		Absolute function
 10727 ;;		_TMR2_DefaultInterruptHandler
 10728 ;; This function is called by:
 10729 ;;		_INTERRUPT_InterruptManager
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           
 10734                           ;psect for function _TMR2_ISR
 10735  0ABE                     _TMR2_ISR:	
 10736                           
 10737                           ;tmr2.c: 121: if (TMR2_InterruptHandler) {
 10738                           
 10739                           ;incstack = 0
 10740                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10741  0ABE  0021               	movlb	1	; select bank1
 10742  0ABF  0828               	movf	_TMR2_InterruptHandler^(0+128),w
 10743  0AC0  0429               	iorwf	(_TMR2_InterruptHandler+1)^(0+128),w
 10744  0AC1  1903               	btfsc	3,2
 10745  0AC2  2AC8               	goto	i1l2959
 10746                           
 10747                           ;tmr2.c: 122: TMR2_InterruptHandler();
 10748  0AC3  0829               	movf	(_TMR2_InterruptHandler+1)^(0+128),w
 10749  0AC4  008A               	movwf	10
 10750  0AC5  0828               	movf	_TMR2_InterruptHandler^(0+128),w
 10751  0AC6  000A               	callw
 10752  0AC7  318A               	pagesel	$
 10753  0AC8                     i1l2959:	
 10754                           
 10755                           ;tmr2.c: 123: }
 10756                           ;tmr2.c: 125: PIR1bits.TMR2IF = 0;
 10757  0AC8  0020               	movlb	0	; select bank0
 10758  0AC9  1091               	bcf	17,1	;volatile
 10759  0ACA  0008               	return
 10760  0ACB                     __end_of_TMR2_ISR:	
 10761                           
 10762                           	psect	text67
 10763  0C80                     __ptext67:	
 10764 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 10765 ;; Defined at:
 10766 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;		None
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  wv              2    7[COMMON] unsigned int 
 10771 ;;  i               1    9[COMMON] unsigned char 
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  1    wreg      void 
 10774 ;; Registers used:
 10775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10776 ;; Tracked objects:
 10777 ;;		On entry : 1F/1
 10778 ;;		On exit  : 1F/2
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;Total ram usage:        5 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:    1
 10788 ;; This function calls:
 10789 ;;		_DAC_SetOutput
 10790 ;;		___lbmod
 10791 ;; This function is called by:
 10792 ;;		_TMR2_Initialize
 10793 ;;		_TMR2_ISR
 10794 ;; This function uses a non-reentrant model
 10795 ;;
 10796                           
 10797                           
 10798                           ;psect for function _TMR2_DefaultInterruptHandler
 10799  0C80                     _TMR2_DefaultInterruptHandler:	
 10800                           
 10801                           ;tmr2.c: 138: unsigned char i;
 10802                           ;tmr2.c: 141: if (envelopeCount[i] <= 0) {
 10803                           
 10804                           ;incstack = 0
 10805                           ; Regs used in _TMR2_DefaultInterruptHandler: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 10806  0C80  0879               	movf	TMR2_DefaultInterruptHandler@i,w
 10807  0C81  3E67               	addlw	(low (_envelopeCount| 0))& (0+255)
 10808  0C82  0086               	movwf	6
 10809  0C83  0187               	clrf	7
 10810  0C84  0801               	movf	1,w
 10811  0C85  1D03               	btfss	3,2
 10812  0C86  2C9B               	goto	i1l2869
 10813                           
 10814                           ;tmr2.c: 142: if (env[i] <= 128) {
 10815  0C87  3579               	lslf	TMR2_DefaultInterruptHandler@i,w
 10816  0C88  3EA4               	addlw	(low (_env| 0))& (0+255)
 10817  0C89  0086               	movwf	6
 10818  0C8A  3F40               	moviw [0]fsr1
 10819  0C8B  00F5               	movwf	??_TMR2_DefaultInterruptHandler
 10820  0C8C  3F41               	moviw [1]fsr1
 10821  0C8D  00F6               	movwf	??_TMR2_DefaultInterruptHandler+1
 10822  0C8E  3000               	movlw	0
 10823  0C8F  0276               	subwf	??_TMR2_DefaultInterruptHandler+1,w
 10824  0C90  3081               	movlw	129
 10825  0C91  1903               	skipnz
 10826  0C92  0275               	subwf	??_TMR2_DefaultInterruptHandler,w
 10827  0C93  1803               	skipnc
 10828  0C94  2CA0               	goto	i1l2873
 10829                           
 10830                           ;tmr2.c: 144: envelopeCount[i] = ENV_DELAY;
 10831  0C95  0879               	movf	TMR2_DefaultInterruptHandler@i,w
 10832  0C96  3E67               	addlw	(low (_envelopeCount| 0))& (0+255)
 10833  0C97  0086               	movwf	6
 10834  0C98  082A               	movf	_ENV_DELAY^(0+128),w
 10835  0C99  0081               	movwf	1
 10836  0C9A  2CA0               	goto	i1l2873
 10837  0C9B                     i1l2869:	
 10838                           
 10839                           ;tmr2.c: 147: envelopeCount[i]--;
 10840  0C9B  0879               	movf	TMR2_DefaultInterruptHandler@i,w
 10841  0C9C  3E67               	addlw	(low (_envelopeCount| 0))& (0+255)
 10842  0C9D  0086               	movwf	6
 10843  0C9E  0187               	clrf	7
 10844  0C9F  0381               	decf	1,f
 10845  0CA0                     i1l2873:	
 10846                           
 10847                           ;tmr2.c: 151: pos_d[i] += dat_d[i];
 10848  0CA0  082E               	movf	_dat_d^(0+128),w
 10849  0CA1  07FA               	addwf	_pos_d,f
 10850                           
 10851                           ;tmr2.c: 152: pos_f[i] += dat_f[i];
 10852  0CA2  082C               	movf	_dat_f^(0+128),w
 10853  0CA3  07A0               	addwf	_pos_f^(0+128),f
 10854  0CA4  1803               	skipnc
 10855  0CA5  0AA1               	incf	(_pos_f+1)^(0+128),f
 10856                           
 10857                           ;tmr2.c: 153: pos[i] = pos_d[i] + (pos_f[i] >> 8);
 10858  0CA6  0821               	movf	(_pos_f^(0+128)+1),w
 10859  0CA7  077A               	addwf	_pos_d,w
 10860  0CA8  0020               	movlb	0	; select bank0
 10861  0CA9  00E5               	movwf	_pos
 10862                           
 10863                           ;tmr2.c: 156: pos_d[i] += dat_d[i];
 10864  0CAA  0021               	movlb	1	; select bank1
 10865  0CAB  082F               	movf	(_dat_d^(0+128)+1),w
 10866  0CAC  07FB               	addwf	_pos_d+1,f
 10867                           
 10868                           ;tmr2.c: 157: pos_f[i] += dat_f[i];
 10869  0CAD  082D               	movf	(_dat_f^(0+128)+1),w
 10870  0CAE  07A2               	addwf	(_pos_f^(0+128)+2),f
 10871  0CAF  1803               	skipnc
 10872  0CB0  0AA3               	incf	((_pos_f+1)^(0+128)+2),f
 10873                           
 10874                           ;tmr2.c: 158: pos[i] = pos_d[i] + (pos_f[i] >> 8) + env[i];
 10875  0CB1  0823               	movf	((_pos_f+1)^(0+128)+2),w
 10876  0CB2  077B               	addwf	_pos_d+1,w
 10877  0CB3  0726               	addwf	(_env^(0+128)+2),w
 10878  0CB4  0020               	movlb	0	; select bank0
 10879  0CB5  00E6               	movwf	_pos+1
 10880                           
 10881                           ;tmr2.c: 160: wv = waveTable[pos[0]] + waveTable[pos[1]%0xFF];
 10882  0CB6  30FF               	movlw	255
 10883  0CB7  00F0               	movwf	___lbmod@divisor
 10884  0CB8  0866               	movf	_pos+1,w
 10885  0CB9  24D9  318C         	fcall	___lbmod
 10886  0CBB  3EF0               	addlw	240
 10887  0CBC  0086               	movwf	6
 10888  0CBD  3022               	movlw	34
 10889  0CBE  0187               	clrf	7
 10890  0CBF  3D87               	addwfc	7,f
 10891  0CC0  0865               	movf	_pos,w
 10892  0CC1  3EF0               	addlw	240
 10893  0CC2  0084               	movwf	4
 10894  0CC3  3022               	movlw	34
 10895  0CC4  0185               	clrf	5
 10896  0CC5  3D85               	addwfc	5,f
 10897  0CC6  0800               	movf	0,w
 10898  0CC7  0701               	addwf	1,w
 10899  0CC8  00F5               	movwf	??_TMR2_DefaultInterruptHandler
 10900  0CC9  01F6               	clrf	??_TMR2_DefaultInterruptHandler+1
 10901  0CCA  0DF6               	rlf	??_TMR2_DefaultInterruptHandler+1,f
 10902  0CCB  00F7               	movwf	TMR2_DefaultInterruptHandler@wv
 10903  0CCC  0876               	movf	??_TMR2_DefaultInterruptHandler+1,w
 10904  0CCD  00F8               	movwf	TMR2_DefaultInterruptHandler@wv+1
 10905                           
 10906                           ;tmr2.c: 162: DAC_SetOutput(wv >> 1);
 10907  0CCE  00F6               	movwf	??_TMR2_DefaultInterruptHandler+1
 10908  0CCF  0877               	movf	TMR2_DefaultInterruptHandler@wv,w
 10909  0CD0  00F5               	movwf	??_TMR2_DefaultInterruptHandler
 10910  0CD1  36F6               	lsrf	??_TMR2_DefaultInterruptHandler+1,f
 10911  0CD2  0CF5               	rrf	??_TMR2_DefaultInterruptHandler,f
 10912  0CD3  0875               	movf	??_TMR2_DefaultInterruptHandler,w
 10913  0CD4  2CD5               	ljmp	_DAC_SetOutput
 10914  0CD5                     __end_of_TMR2_DefaultInterruptHandler:	
 10915  0CD5                     __ptext69:	
 10916 ;; *************** function _DAC_SetOutput *****************
 10917 ;; Defined at:
 10918 ;;		line 66 in file "mcc_generated_files/dac.c"
 10919 ;; Parameters:    Size  Location     Type
 10920 ;;  inputData       1    wreg     unsigned char 
 10921 ;; Auto vars:     Size  Location     Type
 10922 ;;  inputData       1    0[COMMON] unsigned char 
 10923 ;; Return value:  Size  Location     Type
 10924 ;;                  1    wreg      void 
 10925 ;; Registers used:
 10926 ;;		wreg
 10927 ;; Tracked objects:
 10928 ;;		On entry : 1F/0
 10929 ;;		On exit  : 1F/2
 10930 ;;		Unchanged: 0/0
 10931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;Total ram usage:        1 bytes
 10937 ;; Hardware stack levels used:    1
 10938 ;; This function calls:
 10939 ;;		Nothing
 10940 ;; This function is called by:
 10941 ;;		_TMR2_DefaultInterruptHandler
 10942 ;; This function uses a non-reentrant model
 10943 ;;
 10944                           
 10945                           
 10946                           ;psect for function _DAC_SetOutput
 10947  0CD5                     _DAC_SetOutput:	
 10948                           
 10949                           ;incstack = 0
 10950                           ; Regs used in _DAC_SetOutput: [wreg]
 10951                           ;DAC_SetOutput@inputData stored from wreg
 10952  0CD5  00F0               	movwf	DAC_SetOutput@inputData
 10953                           
 10954                           ;dac.c: 68: DAC1CON1 = inputData;
 10955  0CD6  0022               	movlb	2	; select bank2
 10956  0CD7  0099               	movwf	25	;volatile
 10957  0CD8  0008               	return
 10958  0CD9                     __end_of_DAC_SetOutput:	
 10959  007E                     btemp	set	126	;btemp
 10960  007E                     int$flags	set	126
 10961  007E                     wtemp0	set	126
 10962  0CD9                     __ptext68:	
 10963 ;; *************** function ___lbmod *****************
 10964 ;; Defined at:
 10965 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/lbmod.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  dividend        1    wreg     unsigned char 
 10968 ;;  divisor         1    0[COMMON] unsigned char 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;  dividend        1    2[COMMON] unsigned char 
 10971 ;;  rem             1    4[COMMON] unsigned char 
 10972 ;;  counter         1    3[COMMON] unsigned char 
 10973 ;; Return value:  Size  Location     Type
 10974 ;;                  1    wreg      unsigned char 
 10975 ;; Registers used:
 10976 ;;		wreg, status,2, status,0
 10977 ;; Tracked objects:
 10978 ;;		On entry : 1F/0
 10979 ;;		On exit  : 1F/0
 10980 ;;		Unchanged: 1F/0
 10981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10982 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;Total ram usage:        5 bytes
 10987 ;; Hardware stack levels used:    1
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_TMR2_DefaultInterruptHandler
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           
 10996                           ;psect for function ___lbmod
 10997  0CD9                     ___lbmod:	
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 11001                           ;___lbmod@dividend stored from wreg
 11002  0CD9  00F2               	movwf	___lbmod@dividend
 11003  0CDA  3008               	movlw	8
 11004  0CDB  00F3               	movwf	___lbmod@counter
 11005  0CDC  01F4               	clrf	___lbmod@rem
 11006  0CDD                     i1l2769:	
 11007  0CDD  0872               	movf	___lbmod@dividend,w
 11008  0CDE  00F1               	movwf	??___lbmod
 11009  0CDF  3007               	movlw	7
 11010  0CE0                     u182_25:	
 11011  0CE0  36F1               	lsrf	??___lbmod,f
 11012  0CE1  0B89               	decfsz	9,f
 11013  0CE2  2CE0               	goto	u182_25
 11014  0CE3  3574               	lslf	___lbmod@rem,w
 11015  0CE4  0471               	iorwf	??___lbmod,w
 11016  0CE5  00F4               	movwf	___lbmod@rem
 11017  0CE6  35F2               	lslf	___lbmod@dividend,f
 11018  0CE7  0870               	movf	___lbmod@divisor,w
 11019  0CE8  0274               	subwf	___lbmod@rem,w
 11020  0CE9  1C03               	skipc
 11021  0CEA  2CED               	goto	i1l2777
 11022  0CEB  0870               	movf	___lbmod@divisor,w
 11023  0CEC  02F4               	subwf	___lbmod@rem,f
 11024  0CED                     i1l2777:	
 11025  0CED  0BF3               	decfsz	___lbmod@counter,f
 11026  0CEE  2CDD               	goto	i1l2769
 11027  0CEF  0874               	movf	___lbmod@rem,w
 11028  0CF0  0008               	return
 11029  0CF1                     __end_of___lbmod:	


Data Sizes:
    Strings     0
    Constant    32
    Data        738
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      13
    BANK0            80     67      78
    BANK1            80      0      78
    BANK2            80      0      50
    BANK3            80      0      74
    BANK4            80      0      74
    BANK5            80      0       0
    BANK6            16      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    Button_Service$1648$0	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_Service$1648	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 32
		 -> mtouch_button_init(CODE[32]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    Sensor_Service@sensor	PTR struct . size(1) Largest target is 18
		 -> mtouch_sensor(BANK1[18]), 

    S421$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    S421$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_1(), MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_1(), MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E4937,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_Service@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 32
		 -> mtouch_button(BANK1[32]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E4949,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E4949,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_ISR->_TMR2_DefaultInterruptHandler
    _TMR2_DefaultInterruptHandler->___lbmod

Critical Paths under _main in BANK0

    _main->___ftadd
    ___ftmul->___ftpack
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv
    ___abtoft->___ftpack
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_Acq_ExecuteScan
    _Sensor_Acq_ExecuteScan->___bmul
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _MTOUCH_Sensor_wasSampled->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   22874
                                             50 BANK0     17    17      0
        _MTOUCH_Button_Deviation_Get
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                           ___abtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                          _soundPlay
 ---------------------------------------------------------------------------------
 (1) _soundPlay                                            2     1      1     274
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    2946
                                              8 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               6     0      6     288
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3052
                                             23 BANK0     15     9      6
                           ___abtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             12     6      6    3584
                                             38 BANK0     12     6      6
                           ___abtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___abtoft                                             9     5      4    2557
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2466
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1945
                     _DAC_Initialize
                  _MTOUCH_Initialize
                    _OPA2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OPA2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    1847
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1490
                                              5 BANK0      1     1      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             1     1      0    1422
                                              4 BANK0      1     1      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 1     1      0     656
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0     201
                                              2 BANK0      2     2      0
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0    7661
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   1     1      0     189
                                              3 BANK0      1     1      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              1     1      0    2579
                                             22 BANK0      1     1      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       3     3      0    2511
                                             19 BANK0      3     3      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                  _Sensor_setSampled
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1      53
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   6     6      0    1558
                                             13 BANK0      6     6      0
           _Sensor_Acq_ExecutePacket
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     164
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Acq_ExecutePacket                             6     6      0    1018
                                              7 BANK0      6     6      0
                       _MTOUCH_Delay
                      _MTOUCH_Random
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_Acq_ExecuteScan
             _Sensor_setScanFunction
 ---------------------------------------------------------------------------------
 (6) _Sensor_setScanFunction                               1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecuteScan                               4     4      0     680
                                              3 BANK0      4     4      0
                 _MTOUCH_CVD_ScanA_0 *
                 _MTOUCH_CVD_ScanA_1 *
                 _MTOUCH_CVD_ScanB_0 *
                 _MTOUCH_CVD_ScanB_1 *
                             ___bmul
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_CVD_ScanB_1                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_CVD_ScanB_0                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_CVD_ScanA_1                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_CVD_ScanA_0                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Random                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Delay                                         1     1      0      46
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    4737
                                             19 BANK0      1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       2     2      0    4669
                                             17 BANK0      2     2      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             1     1      0     656
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1     521
                                             12 BANK0      3     2      1
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1     882
                                             12 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             2     2      0     133
                                              0 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1222
                                             12 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     764
                                              7 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                3     3      0     865
                                              7 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     1      3     656
                                              3 BANK0      4     1      3
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               3     2      1     612
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     191
                                              0 BANK0     15    15      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_Deviation_Get                          1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     701
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0     701
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR2_DefaultInterruptHandler                        5     5      0     701
                                              5 COMMON     5     5      0
                      _DAC_SetOutput
                            ___lbmod
 ---------------------------------------------------------------------------------
 (11) ___lbmod                                             5     4      1     235
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (11) _DAC_SetOutput                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_Deviation_Get
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _MTOUCH_Sensor_RawSample_Get
             ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Delay
             _MTOUCH_Random
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_Acq_ExecuteScan
               _MTOUCH_CVD_ScanA_0 *
               _MTOUCH_CVD_ScanA_1 *
               _MTOUCH_CVD_ScanB_0 *
               _MTOUCH_CVD_ScanB_1 *
               ___bmul *
             _Sensor_setScanFunction
           _Sensor_isEnabled
           _Sensor_setActive
           _Sensor_setInactive
           _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
         _Sensor_setSampled
         ___bmul
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
   _SYSTEM_Initialize
     _DAC_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OPA2_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   ___abtoft
     ___ftpack
   ___ftadd
     ___abtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___abtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftdiv
     ___abtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftge
   ___ftmul
     ___ftpack
   _soundPlay

 _INTERRUPT_InterruptManager (ROOT)
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
       _DAC_SetOutput
       ___lbmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     43      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      32       9       62.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4A      11       92.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4A      13       92.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 11 18:32:51 2018

        __end_of_TMR2_SetInterruptHandler 1000              ?_MTOUCH_Sensor_RawSample_Get 0023  
                                       pc 0002                            ___bmul@product 0021  
                             __CFG_CP$OFF 0000                    _Sensor_setScanFunction 0FD4  
         __size_of_Sensor_Acq_ExecuteScan 0059                __end_of_Sensor_setInactive 0000  
                            ___ftadd@exp1 0051                              ___ftadd@exp2 0050  
                                     LATA 010C                               __CFG_LVP$ON 0000  
                                     LATC 010E                              ___ftadd@sign 004F  
                                     l142 070E                                       l242 072E  
                                     l402 0FCC                                       l253 0F6F  
                                     l335 0EE2                                       l337 0EE9  
                                     l339 0F07                                       l444 0006  
                                     l381 0F4C                                       l621 0E83  
                                     l470 0006                                       l447 0006  
                                     l457 0403                                       l385 0F62  
                                     l473 0006                                       _GIE 005F  
                                     l989 0E2F                                       _PR2 001B  
                                     _abs 03F4                                       _env 00A4  
                                     _pos 0065                           _TMR2_Initialize 0FE7  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000          ??_MTOUCH_Sensor_Sampled_ResetAll 0021  
         ?_MTOUCH_Sensor_Sampled_ResetAll 0070          __size_of_MTOUCH_Sensor_SampleAll 000D  
       __size_of_MTOUCH_Sensor_Initialize 0028                                      S3315 0002  
                                    S3317 0800                 ?_MTOUCH_Sensor_Initialize 0070  
                                    INDF0 0000                                      INDF1 0001  
                                    FSR0H 0005                                      FSR1H 0007  
                                    FSR0L 0004                                      FSR1L 0006  
                      _MTOUCH_CVD_ScanA_0 0B1D                        _MTOUCH_CVD_ScanA_1 0AFD  
                      _MTOUCH_CVD_ScanB_0 0B5D                        _MTOUCH_CVD_ScanB_1 0B3D  
                            ___ftdiv@cntr 0040                              ___ftdiv@sign 0045  
                                    l1001 0E54                                      l1025 0DEB  
                                    l1043 018C                                      ?_abs 0020  
                                    l3005 0DAC                                      l3023 0DC8  
                                    l3025 0DCC                                      l3017 0DBA  
                                    l3113 0BC7                                      l2411 0F97  
                                    l3043 0DF6                                      l3035 0DE3  
                                    l3027 0DD1                                      l2413 0FAF  
                                    l2405 0F89                                      l2421 0FCE  
                                    l3061 0E15                                      l3037 0DE7  
                                    l3029 0DD5                                      l3109 0BB8  
                                    l3133 0D2B                                      l2407 0F90  
                                    l3151 0D3F                                      l3313 0FA5  
                                    l3049 0E01                                      l3129 0D1A  
                                    l3241 0143                                      l3209 00AC  
                                    l2419 0FC8                                      l3091 019F  
                                    l3163 0D51                                      l3155 0D47  
                                    l3251 0165                                      l3227 0115  
                                    l2365 0F75                                      l2541 0001  
                                    l3069 017B                                      l3237 0133  
                                    l2471 0773                                      l2439 0F66  
                                    l2519 0F42                                      l2543 0001  
                                    l3167 0D59                                      l2721 0B7D  
                                    l2705 0EBA                                      l2641 0EF8  
                                    l3097 01B5                                      l3249 0160  
                                    l2379 0311                                      l2571 02D3  
                                    l2581 0289                                      l2389 0F72  
                                    l2653 03AB                                      l2661 03AE  
                                    l2477 0001                                      l2901 0E45  
                                    l3197 007A                                      l2815 01F8  
                                    l2727 0B7E                                      l2639 0EF0  
                                    l2585 029B                                      l2593 0654  
                                    l2681 0AD8                                      l2905 0E52  
                                    l2579 0284                                      l2683 0001  
                                    l2755 0391                                      l2691 0ED7  
                                    l2907 0E4A                                      l2757 039F  
                                    l2749 0381                                      l2783 0EA0  
                                    l2795 0369                                      l2699 0EB8  
                                    l2895 0E33                                      l2897 0E37  
                                    l2985 0CF9                                      l2899 0E3C  
                                    l2995 0D96                                      TRISC 008E  
                                    l2999 0D9D                                      _LATA 010C  
                                    u1415 06B0                                      _LATC 010E  
                                    u1435 073F                                      u1540 0273  
                                    u1445 0780                                      u1535 0246  
                                    u2415 00A0                                      u1545 026F  
                                    u2505 015B                                      u1715 03D8  
                                    u2275 01AC                                      u2517 0B63  
                                    u2527 0B43                                      u2455 0110  
                                    u2537 0B23                                      u1595 0678  
                                    u2547 0B03                                      u2485 012E  
                                    u2495 013E                                      _PLLR 04D6  
              Button_State_Pressed@button 002C                                      _TMR2 001A  
                 __end_of_OPA2_Initialize 0E7C                                      _WPUA 020C  
                                    _WPUC 020E         __size_of_Sensor_Acq_ExecutePacket 004D  
               ?_Sensor_Acq_ExecutePacket 0070                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      abs@a 0020  
                                    _main 0072      __size_of_MTOUCH_Button_InitializeAll 001D  
                            ___ftpack@arg 0020                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
    __size_of_MTOUCH_Sensor_InitializeAll 000A                                      btemp 007E  
                     ?_MTOUCH_CVD_ScanA_0 0070                       ?_MTOUCH_CVD_ScanA_1 0070  
                     ?_MTOUCH_CVD_ScanB_0 0070                       ?_MTOUCH_CVD_ScanB_1 0070  
                           __CFG_BOREN$ON 0000                                      start 0012  
                       ___bmul@multiplier 0022                             __CFG_MCLRE$ON 0000  
                            ___ftmul@cntr 0035                              ___ftmul@sign 0036  
                                   ADCON0 009D                  ?_MTOUCH_Service_Mainloop 0070  
        __size_of_MTOUCH_Button_isPressed 0010             __size_of_Button_State_Pressed 0039  
                                   ??_abs 0022                            soundPlay@onkai 0020  
             ?_Button_Baseline_Initialize 0070             ??_MTOUCH_Sensor_RawSample_Get 0026  
           Sensor_RawSample_Update@sensor 0020                             __CFG_PLLEN$ON 0000  
               __size_of_Sensor_isEnabled 000B            __size_of_OSCILLATOR_Initialize 000B  
           __end_of_OSCILLATOR_Initialize 0E87                                     ?_main 0070  
                                   _ADRES 009B                           __end_of___ftadd 0E27  
                           __CFG_WDTE$OFF 0000                      ??_MTOUCH_CVD_ScanA_0 0020  
                    ??_MTOUCH_CVD_ScanA_1 0020                           __end_of___lbmod 0CF1  
                    ??_MTOUCH_CVD_ScanB_0 0020                      ??_MTOUCH_CVD_ScanB_1 0020  
                         __end_of___ftdiv 01CD                           __end_of___ftmul 0D73  
                                   _T2CON 001C                   __size_of_Button_Service 0038  
                                   i1l553 0010                                     u174m0 0EB4  
                                   _TRISA 008C                                     _TRISC 008E  
         __size_of_Button_DefaultCallback 0001                          __end_of_TMR2_ISR 0ACB  
                                   _dat_d 00AE                                     _dat_f 00AC  
         __size_of_Sensor_DefaultCallback 0001                   __size_of_Sensor_Service 002C  
   __end_of_MTOUCH_Sensor_Scan_Initialize 0F7B    __size_of_MTOUCH_Sensor_Scan_Initialize 0006  
           _MTOUCH_Sensor_Scan_Initialize 0F75                            _WDT_Initialize 0E9D  
                 Sensor_setSampled@sensor 0020                                     _scale 0120  
                           ___ftpack@sign 0024                                     _pos_d 007A  
                                   _pos_f 00A0                    _Sensor_Acq_ExecuteScan 0F7B  
                                   main@d 005C                                     main@i 0061  
        __size_of_Button_State_NotPressed 0073                                     main@s 005F  
                                   pclath 000A                      _Sensor_Sampled_Reset 0000  
                                   status 0003                                     wtemp0 007E  
               __size_of_Sensor_setActive 0000                    Sensor_isEnabled@sensor 0020  
                        ??_DAC_Initialize 0020                           __initialization 0014  
                            __end_of_main 016A                     __end_of_MTOUCH_Random 0F75  
                 __end_of_TMR2_Initialize 0FF8                            __CFG_LPBOR$OFF 0000  
             ?_INTERRUPT_InterruptManager 0070          __end_of_MTOUCH_Button_Initialize 0335  
                _TMR2_SetInterruptHandler 0FF8                                    ??_main 0052  
                 _MTOUCH_Sensor_Calibrate 0403                   ??_Button_Reading_Update 0027  
    MTOUCH_Sensor_Sampled_ResetAll@sensor 0022                  ?_Button_Deviation_Update 0070  
                  __end_of_WDT_Initialize 0EA0                              ?_MTOUCH_Tick 0070  
            Button_Baseline_Update@button 0026                          __end_of___abtoft 0D09  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADCON2 009F      __size_of_MTOUCH_Sensor_RawSample_Get 0014  
                          __CFG_ZCDDIS$ON 0000                                    _ANSELA 018C  
                                  _ANSELC 018E                          __end_of___ftpack 0E65  
                                  _BORCON 0116                                    _ODCONA 028C  
                                  _ODCONC 028E                                    i1l2777 0CED  
                                  i1l2769 0CDD                                    i1l2873 0CA0  
                                  i1l2869 0C9B                                    i1l2959 0AC8  
                   ?_Sensor_Sampled_Reset 0070                                    u182_25 0CE0  
                        ?_OPA2_Initialize 0070                                    _OSCCON 0099  
                                  _WDTCON 0097         MTOUCH_Button_InitializeAll@button 0023  
                           _envelopeCount 0067                             _envelopeTable 21F0  
                  _Button_DefaultCallback 072E           __end_of_MTOUCH_Service_Mainloop 01F7  
                          __CFG_PWRTE$OFF 0000                    _Sensor_DefaultCallback 0402  
                           _packet_sample 0063                                    ___bmul 0345  
                                  ___ftge 0BA9              Sensor_DefaultCallback@sensor 0020  
                               ??___ftadd 004C                            __CFG_STVREN$ON 0000  
                               ??___lbmod 0071                                 ??___ftdiv 003D  
                               ??___ftmul 002E          __end_of_MTOUCH_Button_ServiceAll 0201  
                                  main@ms 0057                                    main@ss 0055  
                   ___ftmul@f3_as_product 0032                              __pdataBIGRAM 21F0  
                 _MTOUCH_Sensor_SampleAll 0368              Button_DefaultCallback@button 0020  
                         ?_WDT_Initialize 0070                  ?_Sensor_RawSample_Update 0070  
              __end_of_Sensor_Acquisition 03E9                   ?_Button_Baseline_Update 0070  
TMR2_SetInterruptHandler@InterruptHandler 0020                                ___abtoft@c 002D  
         MTOUCH_Sensor_RawSample_Get@name 0026                         _SYSTEM_Initialize 0E65  
                         ___lbmod@divisor 0070                   __end_of__initialization 006F  
     __size_of_Button_Baseline_Initialize 0029                           ___lbmod@counter 0073  
          ?_MTOUCH_Sensor_Scan_Initialize 0070                                ___ftadd@f1 0046  
                              ___ftadd@f2 0049                                ___ftge@ff1 0020  
                              ___ftge@ff2 0023                        ?_SYSTEM_Initialize 0070  
                     _Button_StateMachine 00D2                                ___ftdiv@f1 003A  
                              ___ftdiv@f2 0037                                ___ftdiv@f3 0041  
              __end_of_Button_Tick_helper 0BA9             MTOUCH_Sensor_Calibrate@sensor 0070  
                     ___bmul@multiplicand 0020                                ___ftmul@f1 0028  
                              ___ftmul@f2 002B                   ?_Sensor_setScanFunction 0070  
                  DAC_SetOutput@inputData 0070                            __pcstackCOMMON 0070  
                 _MTOUCH_Button_isPressed 01D9                              __pidataBANK1 0AE1  
                            __pidataBANK2 0C04                              __pidataBANK3 07B3  
                            __pidataBANK4 0C36                       ??_SYSTEM_Initialize 0026  
                               ?_TMR2_ISR 0070                __end_of_MTOUCH_Button_Tick 0B89  
        __end_of_MTOUCH_Sensor_Initialize 0F08                 ??_MTOUCH_Sensor_Calibrate 0020  
                        _Sensor_isEnabled 03E9                          ?_TMR2_Initialize 0070  
         __end_of_Button_Deviation_Update 02A2                  Sensor_setInactive@sensor 0020  
                          _Button_Service 0201          __end_of_Sensor_Acq_ExecutePacket 0F64  
              ?_Button_State_Initializing 002C                      Button_Service@button 0032  
                          _OPTION_REGbits 0095            __end_of_Button_Baseline_Update 07B3  
                    Sensor_Service@sensor 0035                  _MTOUCH_Button_Initialize 0314  
                  __size_of_DAC_SetOutput 0004                            _Sensor_Service 0375  
                 _Button_State_NotPressed 06BB             __size_of_MTOUCH_Sensor_Enable 000F  
                      _Sensor_setInactive 0000                 __end_of_SYSTEM_Initialize 0E72  
        MTOUCH_Sensor_isCalibrated@sensor 0070                    ??_Sensor_Sampled_Reset 0020  
                              __pbssBANK0 0063                                __pbssBANK1 00A0  
                     ?_Sensor_setInactive 0070                          _Sensor_setActive 0000  
                      Sensor_Service@name 0033                __end_of_mtouch_button_init 1020  
          __end_of_Sensor_setScanFunction 0FE7                                __pmaintext 0072  
                           ?_MTOUCH_Delay 0070                                   ?___bmul 0020  
                                 ?___ftge 0020                           __CFG_PPS1WAY$ON 0000  
                              ??_TMR2_ISR 007A            MTOUCH_Sensor_wasSampled@sensor 0023  
                              __pintentry 0004                                 ?___abtoft 0028  
                  __end_of_Button_Service 0239       __end_of_MTOUCH_Button_InitializeAll 0EC4  
             _MTOUCH_Button_InitializeAll 0EA7                                 ?___ftpack 0020  
     __end_of_MTOUCH_Sensor_InitializeAll 0EE0               _MTOUCH_Sensor_InitializeAll 0ED6  
               ??_MTOUCH_Sensor_SampleAll 0036           __end_of_Sensor_RawSample_Update 0AE1  
                    ??_Sensor_setInactive 0020         __size_of_MTOUCH_Sensor_wasSampled 000F  
               ?_MTOUCH_Sensor_wasSampled 0070                                   _OPA2CON 0515  
       __end_of_Button_State_Initializing 0692                    __end_of_Sensor_Service 03A1  
                _MTOUCH_Button_ServiceAll 01F7                   ?_Sensor_Acq_ExecuteScan 0070  
           MTOUCH_Sensor_SampleAll@sensor 0036                                   _OSCSTAT 009A  
                                 _OSCTUNE 0098          __size_of_MTOUCH_Service_Mainloop 000E  
            __end_of_Button_State_Pressed 063F              ?_MTOUCH_Button_Deviation_Get 0070  
        Button_Baseline_Initialize@button 002B                        __size_of_soundPlay 002F  
                    __size_of_MTOUCH_Tick 0002             TMR2_DefaultInterruptHandler@i 0079  
               ??_MTOUCH_Button_isPressed 0020                            ??_MTOUCH_Delay 0020  
                          _packet_counter 006A                             _DAC_SetOutput 0CD5  
              ??_TMR2_SetInterruptHandler 0022                   Sensor_Acquisition@retry 0031  
                         __size_of___bmul 0023                           __size_of___ftge 002C  
                                 ___ftadd 0D73                                   ___lbmod 0CD9  
                                 ___ftdiv 016A            MTOUCH_Button_Initialize@button 0021  
                                 ___ftmul 0D09                                ??___abtoft 002C  
                         ?_Button_Service 0070                                ??___ftpack 0025  
                                 __ptext1 0BD5                                   __ptext2 0D09  
                                 __ptext3 0BA9                                   __ptext4 016A  
                                 __ptext5 0D73                                   __ptext6 0CF1  
                                 __ptext7 0E27                                   __ptext8 0E65  
                                 __ptext9 0E9D               Button_Reading_Update@button 0029  
             __size_of_MTOUCH_CVD_ScanA_0 0020               __size_of_MTOUCH_CVD_ScanA_1 0020  
             __size_of_MTOUCH_CVD_ScanB_0 0020               __size_of_MTOUCH_CVD_ScanB_1 0020  
                _MTOUCH_Sensor_Initialize 0EE0            __end_of_Sensor_Acq_ExecuteScan 0FD4  
                   _OSCILLATOR_Initialize 0E7C                              __size_of_abs 000E  
               ??_Button_State_NotPressed 002D                           ?_Sensor_Service 0070  
                ??_PIN_MANAGER_Initialize 0020                                   _onkai_d 01A0  
                                 _onkai_f 0220            __size_of_Button_Reading_Update 005E  
           __end_of_Button_Reading_Update 0300         MTOUCH_Sensor_InitializeAll@sensor 0025  
                _Sensor_Acq_ExecutePacket 0F17                                 _ENV_DELAY 00AA  
                                 main@ave 0059                __size_of_SYSTEM_Initialize 000D  
                                 clrloop0 0AA7            MTOUCH_Sensor_Initialize@sensor 0024  
                    end_of_initialization 006F             ??_MTOUCH_Button_Deviation_Get 0020  
                 ?_Button_DefaultCallback 0020                                   init_ram 0AB2  
                                 initloop 0AB3                   ?_Sensor_DefaultCallback 0020  
        __size_of_Button_Deviation_Update 0069                            ?_DAC_SetOutput 0070  
            ??_MTOUCH_Sensor_isCalibrated 0020       __end_of_MTOUCH_Sensor_RawSample_Get 0314  
             _MTOUCH_Sensor_RawSample_Get 0300                         __end_of_soundPlay 0C04  
                           MTOUCH_Delay@i 0020                          ??_WDT_Initialize 0020  
                  Sensor_setActive@sensor 0020                          __CFG_FOSC$INTOSC 0000  
                        ___lbmod@dividend 0072             Button_Deviation_Update@button 002E  
                               _TRISCbits 008E                MTOUCH_Sensor_Enable@sensor 0023  
     __size_of_MTOUCH_Sensor_isCalibrated 0001            __end_of_Button_DefaultCallback 072F  
                      _sensor_globalFlags 006C                    __size_of_MTOUCH_Random 000A  
                __end_of_Sensor_isEnabled 03F4                               ___lbmod@rem 0074  
          __end_of_Sensor_DefaultCallback 0403              Sensor_Acq_ExecuteScan@result 0025  
                             ___ftdiv@exp 0044          __size_of_Sensor_RawSample_Update 0016  
                      _Sensor_Acquisition 03A1                               ___ftmul@exp 0031  
                __size_of_OPA2_Initialize 0004      __size_of_MTOUCH_Button_Deviation_Get 000C  
    __end_of_TMR2_DefaultInterruptHandler 0CD5     __size_of_TMR2_DefaultInterruptHandler 0055  
            _TMR2_DefaultInterruptHandler 0C80                      _Button_State_Pressed 0606  
                          __end_of___bmul 0368                            __end_of___ftge 0BD5  
                     ?_Sensor_Acquisition 0070                             __pidataBIGRAM 0406  
              ??_MTOUCH_Button_Initialize 0020           ??_MTOUCH_Sensor_Scan_Initialize 0020  
                       __size_of_TMR2_ISR 000D             Sensor_Acq_ExecutePacket@error 002B  
                      _Button_Tick_helper 0B89                    ?_OSCILLATOR_Initialize 0070  
                     MTOUCH_Button_Tick@i 0023                  __end_of_Sensor_setActive 0000  
                 __size_of_DAC_Initialize 0006               ??_Button_State_Initializing 002D  
                     start_initialization 0014                   _MTOUCH_Service_Mainloop 01E9  
         __size_of_PIN_MANAGER_Initialize 0016                      __end_of_MTOUCH_Delay 0F6B  
                      _MTOUCH_Button_Tick 0B7D                       ?_Button_Tick_helper 0070  
                             __end_of_abs 0402                      ??_Sensor_Acquisition 002D  
                     ?_MTOUCH_Button_Tick 0070           Button_State_Initializing@button 002C  
                         ??_DAC_SetOutput 0070          __end_of_MTOUCH_Sensor_wasSampled 0345  
                    ??_Button_Tick_helper 0020              __end_of_MTOUCH_Sensor_Enable 0F17  
                                ??___bmul 0021                                  ??___ftge 0026  
                   ?_Button_State_Pressed 002C                ??_MTOUCH_Button_ServiceAll 0033  
                             __pdataBANK1 00D2                               __pdataBANK2 0120  
                             __pdataBANK3 01A0                               __pdataBANK4 0220  
                           _MTOUCH_Random 0F6B              ??_Button_Baseline_Initialize 0027  
           ?_TMR2_DefaultInterruptHandler 0070                      ??_MTOUCH_Button_Tick 0023  
                      _mtouch_button_init 1000                Sensor_Sampled_Reset@sensor 0020  
                       __size_of___abtoft 0018                         __size_of___ftpack 003E  
                             __pbssCOMMON 007A                                 ___latbits 0002  
                           __pcstackBANK0 0020                  __size_of_TMR2_Initialize 0011  
          MTOUCH_Button_ServiceAll@button 0033                       Sensor_Service@error 0034  
           __size_of_Sensor_Sampled_Reset 0000                   _Button_Deviation_Update 0239  
               _Button_State_Initializing 063F        __end_of_MTOUCH_Sensor_isCalibrated 0336  
              _MTOUCH_Sensor_isCalibrated 0335                         _Sensor_setSampled 0000  
                  _PIN_MANAGER_Initialize 0E87                          ??_Button_Service 0031  
                ?_MTOUCH_Sensor_Calibrate 0070                        ?_Sensor_setSampled 0070  
              ??_MTOUCH_Sensor_Initialize 0024                                  ?___ftadd 0046  
                                ?___lbmod 0070                                  ?___ftdiv 0037  
                                ?___ftmul 0028                            ?_MTOUCH_Random 0070  
                        ??_Sensor_Service 0033                                  _DAC1CON0 0118  
                                _DAC1CON1 0119                ??_Sensor_Acq_ExecutePacket 0027  
            ??_INTERRUPT_InterruptManager 007A                       ??_Sensor_setSampled 0020  
                               __pswtext1 0002                                 __pswtext2 0800  
                       ??_OPA2_Initialize 0020                 ??_MTOUCH_Service_Mainloop 0037  
             __size_of_Sensor_setInactive 0000            Sensor_Acq_ExecutePacket@sensor 002C  
                           ??_MTOUCH_Tick 0024                                 _scaleHigh 0145  
               __end_of_Sensor_setSampled 0000                        _currentScannSensor 006B  
                 _Sensor_RawSample_Update 0ACB                                 clear_ram0 0AA6  
                                _PIE1bits 0091       __size_of_INTERRUPT_InterruptManager 000E  
                                _PIR1bits 0011                    ??_Button_State_Pressed 002D  
  __end_of_MTOUCH_Sensor_Sampled_ResetAll 0ED6   __size_of_MTOUCH_Sensor_Sampled_ResetAll 0012  
          _MTOUCH_Sensor_Sampled_ResetAll 0EC4                  ?_MTOUCH_Sensor_SampleAll 0070  
                               _waveTable 22F0                                  _TMR2_ISR 0ABE  
                _MTOUCH_Sensor_wasSampled 0336                        _mtouch_time_toScan 006D  
              __end_of_MTOUCH_CVD_ScanA_0 0B3D                __end_of_MTOUCH_CVD_ScanA_1 0B1D  
              __end_of_MTOUCH_CVD_ScanB_0 0B7D                __end_of_MTOUCH_CVD_ScanB_1 0B5D  
                ??_Button_Baseline_Update 0020                                _ADCON0bits 009D  
                   __size_of_MTOUCH_Delay 0007                            _DAC_Initialize 0E72  
                               _soundPlay 0BD5                                  _WPUCbits 020E  
          TMR2_DefaultInterruptHandler@wv 0077                                 main@count 005D  
          ??_TMR2_DefaultInterruptHandler 0075         __size_of_TMR2_SetInterruptHandler 0008  
                               main@state 0053                 ?_TMR2_SetInterruptHandler 0020  
                    _MTOUCH_Sensor_Enable 0F08                  Button_Tick_helper@button 0022  
               ??_Button_Deviation_Update 0020                     _Button_Reading_Update 02A2  
                ??_Sensor_setScanFunction 0020                  ?_MTOUCH_Button_isPressed 0070  
                       ?_Sensor_isEnabled 0070                         ??_TMR2_Initialize 0022  
                     __end_of_MTOUCH_Tick 0406                         _MTOUCH_Initialize 0EA0  
         __end_of_MTOUCH_Sensor_Calibrate 0404                        ??_Sensor_isEnabled 0020  
                      ?_MTOUCH_Initialize 0070                           ??_MTOUCH_Random 0020  
                            _MTOUCH_Delay 0F64                              _sample_delay 0069  
                 ??_OSCILLATOR_Initialize 0020        __end_of_Button_Baseline_Initialize 06BB  
              _Button_Baseline_Initialize 0692                  Sensor_Acquisition@sensor 0032  
                                ___abtoft 0CF1                       ??_MTOUCH_Initialize 0026  
                        __size_of___ftadd 00B4                          __size_of___lbmod 0018  
                        __size_of___ftdiv 0063                    __end_of_DAC_Initialize 0E78  
                        __size_of___ftmul 006A                  ?_Button_State_NotPressed 002C  
                                ___ftpack 0E27                                soundPlay@n 0021  
                              _ANSELCbits 018E                        Button_Service@name 0031  
                              ?_soundPlay 0020                         ?_Sensor_setActive 0070  
                            _Sensor_scanA 00DA                              _Sensor_scanB 00D8  
                      ??_Sensor_setActive 0020       __end_of_MTOUCH_Button_Deviation_Get 01D9  
             _MTOUCH_Button_Deviation_Get 01CD                     ?_MTOUCH_Sensor_Enable 0070  
                                __ptext10 0FE7                                  __ptext11 0FF8  
                                __ptext20 0E72                                  __ptext12 0E87  
                                __ptext21 01E9                                  __ptext13 0E7C  
                                __ptext30 0ACB                                  __ptext22 0404  
                                __ptext14 0E78                                  __ptext31 0402  
                                __ptext23 0B7D                                  __ptext15 0EA0  
                                __ptext40 0B5D                                  __ptext32 03A1  
                                __ptext24 0B89                                  __ptext16 0ED6  
                                __ptext41 0B3D                                  __ptext33 03F4  
                                __ptext25 0EC4                                  __ptext17 0EE0  
                                __ptext50 0335                                  __ptext42 0B1D  
                                __ptext34 0000                                  __ptext26 0000  
                                __ptext18 0F08                                  __ptext51 06BB  
                                __ptext43 0AFD                                  __ptext35 0000  
                                __ptext27 0368                                  __ptext19 0EA7  
                                __ptext60 0300                                  __ptext52 063F  
                                __ptext44 0F75                                  __ptext36 03E9  
                                __ptext28 0375                                  __ptext61 0345  
                                __ptext53 0606                                  __ptext45 0F6B  
                                __ptext37 0F17                                  __ptext29 0000  
                                __ptext62 0239                                  __ptext54 0314  
                                __ptext46 0F64                                  __ptext38 0FD4  
                                __ptext63 01D9                                  __ptext55 0403  
                                __ptext47 01F7                                  __ptext39 0F7B  
                                __ptext64 01CD                                  __ptext56 072E  
                                __ptext48 0201                                  __ptext57 072F  
                                __ptext49 0336                                  __ptext66 0ABE  
                                __ptext58 0692                                  __ptext67 0C80  
                                __ptext59 02A2                                  __ptext68 0CD9  
                                __ptext69 0CD5                 __end_of_MTOUCH_Initialize 0EA7  
               ??_Sensor_RawSample_Update 0020       Sensor_Acq_ExecutePacket@ADCON0_temp 0027  
     Sensor_Acq_ExecutePacket@ADCON1_temp 0028       Sensor_Acq_ExecutePacket@ADCON2_temp 0029  
              __size_of_Sensor_setSampled 0000                             __size_of_main 00F8  
                                _scaleLow 0138           __end_of_MTOUCH_Sensor_SampleAll 0375  
            Sensor_setScanFunction@sensor 0020                                  int$flags 007E  
                ??_Sensor_Acq_ExecuteScan 0023        __size_of_Button_State_Initializing 0053  
                                _voice_on 00B0        __end_of_INTERRUPT_InterruptManager 0012  
              _INTERRUPT_InterruptManager 0004         Sensor_Acq_ExecutePacket@GIE_state 002A  
                         ?_DAC_Initialize 0070           __size_of_Button_Baseline_Update 0084  
            ?_MTOUCH_Button_InitializeAll 0070              ?_MTOUCH_Sensor_InitializeAll 0070  
                           _mtouch_button 00B2                                _INTCONbits 000B  
                           _mtouch_sensor 00DC           __end_of_MTOUCH_Button_isPressed 01E9  
                             _MTOUCH_Tick 0404                    ?_Button_Reading_Update 0070  
        Button_Deviation_Update@deviation 002A                   __size_of_WDT_Initialize 0003  
            MTOUCH_Button_Initialize@name 0020         __size_of_MTOUCH_Button_Initialize 0021  
                                intlevel1 0000                 ?_MTOUCH_Button_Initialize 0070  
             __size_of_Sensor_Acquisition 0048           __size_of_Sensor_setScanFunction 0013  
                 ?_PIN_MANAGER_Initialize 0070                         __CFG_CLKOUTEN$OFF 0000  
             ?_MTOUCH_Sensor_isCalibrated 0070                             ___abtoft@sign 002C  
                       MTOUCH_Random@seed 007C                     __end_of_DAC_SetOutput 0CD9  
                         _OPA2_Initialize 0E78               __size_of_Button_Tick_helper 0020  
         __end_of_Button_State_NotPressed 072E              __end_of_Sensor_Sampled_Reset 0000  
             __size_of_MTOUCH_Button_Tick 000C                             __pstringtext1 1000  
                             ??_soundPlay 0021             ??_MTOUCH_Button_InitializeAll 0022  
                ??_Button_DefaultCallback 0021             ??_MTOUCH_Sensor_InitializeAll 0025  
        __size_of_MTOUCH_Sensor_Calibrate 0001           MTOUCH_Button_Deviation_Get@name 0020  
                  ??_MTOUCH_Sensor_Enable 0023                  ??_Sensor_DefaultCallback 0021  
       __size_of_MTOUCH_Button_ServiceAll 000A                 ?_MTOUCH_Button_ServiceAll 0070  
           Button_State_NotPressed@button 002C                __size_of_MTOUCH_Initialize 0007  
          __end_of_PIN_MANAGER_Initialize 0E9D                    _Button_Baseline_Update 072F  
             MTOUCH_Button_isPressed@name 0020                     _TMR2_InterruptHandler 00A8  
              ??_MTOUCH_Sensor_wasSampled 0023  
