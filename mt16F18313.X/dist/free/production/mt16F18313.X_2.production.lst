

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr  6 20:11:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18313
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	swtext1,local,class=CONST,delta=2
    48                           	psect	swtext2,local,class=CONST,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x7E,2
    77  0000                     
    78                           ; Version 1.45
    79                           ; Generated 16/11/2017 GMT
    80                           ; 
    81                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC16F18313 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  008C                     	;# 
   145  0090                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0097                     	;# 
   151  009B                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0115                     	;# 
   161  0116                     	;# 
   162  0117                     	;# 
   163  0118                     	;# 
   164  0119                     	;# 
   165  018C                     	;# 
   166  0197                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020C                     	;# 
   193  0211                     	;# 
   194  0211                     	;# 
   195  0212                     	;# 
   196  0212                     	;# 
   197  0213                     	;# 
   198  0213                     	;# 
   199  0214                     	;# 
   200  0214                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0216                     	;# 
   206  0216                     	;# 
   207  0217                     	;# 
   208  0217                     	;# 
   209  028C                     	;# 
   210  0291                     	;# 
   211  0291                     	;# 
   212  0292                     	;# 
   213  0293                     	;# 
   214  0294                     	;# 
   215  0295                     	;# 
   216  0295                     	;# 
   217  0296                     	;# 
   218  0297                     	;# 
   219  0298                     	;# 
   220  030C                     	;# 
   221  038C                     	;# 
   222  0391                     	;# 
   223  0392                     	;# 
   224  0393                     	;# 
   225  039A                     	;# 
   226  039C                     	;# 
   227  039D                     	;# 
   228  039E                     	;# 
   229  039F                     	;# 
   230  0498                     	;# 
   231  0498                     	;# 
   232  0499                     	;# 
   233  049A                     	;# 
   234  049B                     	;# 
   235  049B                     	;# 
   236  049C                     	;# 
   237  049D                     	;# 
   238  049E                     	;# 
   239  049F                     	;# 
   240  0617                     	;# 
   241  0618                     	;# 
   242  0619                     	;# 
   243  0619                     	;# 
   244  061A                     	;# 
   245  061B                     	;# 
   246  061C                     	;# 
   247  061C                     	;# 
   248  0691                     	;# 
   249  0692                     	;# 
   250  0693                     	;# 
   251  0694                     	;# 
   252  0695                     	;# 
   253  0696                     	;# 
   254  0697                     	;# 
   255  0698                     	;# 
   256  0699                     	;# 
   257  0891                     	;# 
   258  0891                     	;# 
   259  0891                     	;# 
   260  0891                     	;# 
   261  0891                     	;# 
   262  0891                     	;# 
   263  0892                     	;# 
   264  0892                     	;# 
   265  0892                     	;# 
   266  0893                     	;# 
   267  0893                     	;# 
   268  0893                     	;# 
   269  0893                     	;# 
   270  0893                     	;# 
   271  0893                     	;# 
   272  0894                     	;# 
   273  0894                     	;# 
   274  0894                     	;# 
   275  0895                     	;# 
   276  0895                     	;# 
   277  0895                     	;# 
   278  0896                     	;# 
   279  0896                     	;# 
   280  0896                     	;# 
   281  089B                     	;# 
   282  0911                     	;# 
   283  0912                     	;# 
   284  0913                     	;# 
   285  0914                     	;# 
   286  0915                     	;# 
   287  0916                     	;# 
   288  0918                     	;# 
   289  0919                     	;# 
   290  091A                     	;# 
   291  091B                     	;# 
   292  091C                     	;# 
   293  091D                     	;# 
   294  091E                     	;# 
   295  091F                     	;# 
   296  0E0F                     	;# 
   297  0E10                     	;# 
   298  0E11                     	;# 
   299  0E12                     	;# 
   300  0E13                     	;# 
   301  0E14                     	;# 
   302  0E15                     	;# 
   303  0E18                     	;# 
   304  0E1A                     	;# 
   305  0E1B                     	;# 
   306  0E1C                     	;# 
   307  0E20                     	;# 
   308  0E21                     	;# 
   309  0E22                     	;# 
   310  0E24                     	;# 
   311  0E25                     	;# 
   312  0E28                     	;# 
   313  0E29                     	;# 
   314  0E2A                     	;# 
   315  0E2B                     	;# 
   316  0E90                     	;# 
   317  0E91                     	;# 
   318  0E92                     	;# 
   319  0E94                     	;# 
   320  0E95                     	;# 
   321  0F0F                     	;# 
   322  0F10                     	;# 
   323  0F11                     	;# 
   324  0F12                     	;# 
   325  0F13                     	;# 
   326  0F14                     	;# 
   327  0F15                     	;# 
   328  0F16                     	;# 
   329  0F17                     	;# 
   330  0F18                     	;# 
   331  0F19                     	;# 
   332  0F1A                     	;# 
   333  0F1B                     	;# 
   334  0F1C                     	;# 
   335  0F1D                     	;# 
   336  0F1E                     	;# 
   337  0F1F                     	;# 
   338  0F20                     	;# 
   339  0F21                     	;# 
   340  0F22                     	;# 
   341  0F23                     	;# 
   342  0FE4                     	;# 
   343  0FE5                     	;# 
   344  0FE6                     	;# 
   345  0FE7                     	;# 
   346  0FE8                     	;# 
   347  0FE9                     	;# 
   348  0FEA                     	;# 
   349  0FEB                     	;# 
   350  0FED                     	;# 
   351  0FEE                     	;# 
   352  0FEF                     	;# 
   353  0000                     	;# 
   354  0001                     	;# 
   355  0002                     	;# 
   356  0003                     	;# 
   357  0004                     	;# 
   358  0005                     	;# 
   359  0006                     	;# 
   360  0007                     	;# 
   361  0008                     	;# 
   362  0009                     	;# 
   363  000A                     	;# 
   364  000B                     	;# 
   365  000C                     	;# 
   366  0010                     	;# 
   367  0011                     	;# 
   368  0012                     	;# 
   369  0013                     	;# 
   370  0014                     	;# 
   371  0015                     	;# 
   372  0015                     	;# 
   373  0016                     	;# 
   374  0016                     	;# 
   375  0017                     	;# 
   376  0018                     	;# 
   377  0019                     	;# 
   378  0019                     	;# 
   379  001A                     	;# 
   380  001B                     	;# 
   381  001C                     	;# 
   382  001D                     	;# 
   383  001E                     	;# 
   384  001F                     	;# 
   385  008C                     	;# 
   386  0090                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0094                     	;# 
   391  0097                     	;# 
   392  009B                     	;# 
   393  009B                     	;# 
   394  009C                     	;# 
   395  009D                     	;# 
   396  009E                     	;# 
   397  009F                     	;# 
   398  010C                     	;# 
   399  0111                     	;# 
   400  0112                     	;# 
   401  0115                     	;# 
   402  0116                     	;# 
   403  0117                     	;# 
   404  0118                     	;# 
   405  0119                     	;# 
   406  018C                     	;# 
   407  0197                     	;# 
   408  0199                     	;# 
   409  0199                     	;# 
   410  0199                     	;# 
   411  019A                     	;# 
   412  019A                     	;# 
   413  019A                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019B                     	;# 
   419  019C                     	;# 
   420  019C                     	;# 
   421  019C                     	;# 
   422  019D                     	;# 
   423  019D                     	;# 
   424  019D                     	;# 
   425  019E                     	;# 
   426  019E                     	;# 
   427  019E                     	;# 
   428  019F                     	;# 
   429  019F                     	;# 
   430  019F                     	;# 
   431  019F                     	;# 
   432  019F                     	;# 
   433  020C                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0215                     	;# 
   446  0216                     	;# 
   447  0216                     	;# 
   448  0217                     	;# 
   449  0217                     	;# 
   450  028C                     	;# 
   451  0291                     	;# 
   452  0291                     	;# 
   453  0292                     	;# 
   454  0293                     	;# 
   455  0294                     	;# 
   456  0295                     	;# 
   457  0295                     	;# 
   458  0296                     	;# 
   459  0297                     	;# 
   460  0298                     	;# 
   461  030C                     	;# 
   462  038C                     	;# 
   463  0391                     	;# 
   464  0392                     	;# 
   465  0393                     	;# 
   466  039A                     	;# 
   467  039C                     	;# 
   468  039D                     	;# 
   469  039E                     	;# 
   470  039F                     	;# 
   471  0498                     	;# 
   472  0498                     	;# 
   473  0499                     	;# 
   474  049A                     	;# 
   475  049B                     	;# 
   476  049B                     	;# 
   477  049C                     	;# 
   478  049D                     	;# 
   479  049E                     	;# 
   480  049F                     	;# 
   481  0617                     	;# 
   482  0618                     	;# 
   483  0619                     	;# 
   484  0619                     	;# 
   485  061A                     	;# 
   486  061B                     	;# 
   487  061C                     	;# 
   488  061C                     	;# 
   489  0691                     	;# 
   490  0692                     	;# 
   491  0693                     	;# 
   492  0694                     	;# 
   493  0695                     	;# 
   494  0696                     	;# 
   495  0697                     	;# 
   496  0698                     	;# 
   497  0699                     	;# 
   498  0891                     	;# 
   499  0891                     	;# 
   500  0891                     	;# 
   501  0891                     	;# 
   502  0891                     	;# 
   503  0891                     	;# 
   504  0892                     	;# 
   505  0892                     	;# 
   506  0892                     	;# 
   507  0893                     	;# 
   508  0893                     	;# 
   509  0893                     	;# 
   510  0893                     	;# 
   511  0893                     	;# 
   512  0893                     	;# 
   513  0894                     	;# 
   514  0894                     	;# 
   515  0894                     	;# 
   516  0895                     	;# 
   517  0895                     	;# 
   518  0895                     	;# 
   519  0896                     	;# 
   520  0896                     	;# 
   521  0896                     	;# 
   522  089B                     	;# 
   523  0911                     	;# 
   524  0912                     	;# 
   525  0913                     	;# 
   526  0914                     	;# 
   527  0915                     	;# 
   528  0916                     	;# 
   529  0918                     	;# 
   530  0919                     	;# 
   531  091A                     	;# 
   532  091B                     	;# 
   533  091C                     	;# 
   534  091D                     	;# 
   535  091E                     	;# 
   536  091F                     	;# 
   537  0E0F                     	;# 
   538  0E10                     	;# 
   539  0E11                     	;# 
   540  0E12                     	;# 
   541  0E13                     	;# 
   542  0E14                     	;# 
   543  0E15                     	;# 
   544  0E18                     	;# 
   545  0E1A                     	;# 
   546  0E1B                     	;# 
   547  0E1C                     	;# 
   548  0E20                     	;# 
   549  0E21                     	;# 
   550  0E22                     	;# 
   551  0E24                     	;# 
   552  0E25                     	;# 
   553  0E28                     	;# 
   554  0E29                     	;# 
   555  0E2A                     	;# 
   556  0E2B                     	;# 
   557  0E90                     	;# 
   558  0E91                     	;# 
   559  0E92                     	;# 
   560  0E94                     	;# 
   561  0E95                     	;# 
   562  0F0F                     	;# 
   563  0F10                     	;# 
   564  0F11                     	;# 
   565  0F12                     	;# 
   566  0F13                     	;# 
   567  0F14                     	;# 
   568  0F15                     	;# 
   569  0F16                     	;# 
   570  0F17                     	;# 
   571  0F18                     	;# 
   572  0F19                     	;# 
   573  0F1A                     	;# 
   574  0F1B                     	;# 
   575  0F1C                     	;# 
   576  0F1D                     	;# 
   577  0F1E                     	;# 
   578  0F1F                     	;# 
   579  0F20                     	;# 
   580  0F21                     	;# 
   581  0F22                     	;# 
   582  0F23                     	;# 
   583  0FE4                     	;# 
   584  0FE5                     	;# 
   585  0FE6                     	;# 
   586  0FE7                     	;# 
   587  0FE8                     	;# 
   588  0FE9                     	;# 
   589  0FEA                     	;# 
   590  0FEB                     	;# 
   591  0FED                     	;# 
   592  0FEE                     	;# 
   593  0FEF                     	;# 
   594  0000                     	;# 
   595  0001                     	;# 
   596  0002                     	;# 
   597  0003                     	;# 
   598  0004                     	;# 
   599  0005                     	;# 
   600  0006                     	;# 
   601  0007                     	;# 
   602  0008                     	;# 
   603  0009                     	;# 
   604  000A                     	;# 
   605  000B                     	;# 
   606  000C                     	;# 
   607  0010                     	;# 
   608  0011                     	;# 
   609  0012                     	;# 
   610  0013                     	;# 
   611  0014                     	;# 
   612  0015                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001C                     	;# 
   623  001D                     	;# 
   624  001E                     	;# 
   625  001F                     	;# 
   626  008C                     	;# 
   627  0090                     	;# 
   628  0091                     	;# 
   629  0092                     	;# 
   630  0093                     	;# 
   631  0094                     	;# 
   632  0097                     	;# 
   633  009B                     	;# 
   634  009B                     	;# 
   635  009C                     	;# 
   636  009D                     	;# 
   637  009E                     	;# 
   638  009F                     	;# 
   639  010C                     	;# 
   640  0111                     	;# 
   641  0112                     	;# 
   642  0115                     	;# 
   643  0116                     	;# 
   644  0117                     	;# 
   645  0118                     	;# 
   646  0119                     	;# 
   647  018C                     	;# 
   648  0197                     	;# 
   649  0199                     	;# 
   650  0199                     	;# 
   651  0199                     	;# 
   652  019A                     	;# 
   653  019A                     	;# 
   654  019A                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019C                     	;# 
   661  019C                     	;# 
   662  019C                     	;# 
   663  019D                     	;# 
   664  019D                     	;# 
   665  019D                     	;# 
   666  019E                     	;# 
   667  019E                     	;# 
   668  019E                     	;# 
   669  019F                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  019F                     	;# 
   673  019F                     	;# 
   674  020C                     	;# 
   675  0211                     	;# 
   676  0211                     	;# 
   677  0212                     	;# 
   678  0212                     	;# 
   679  0213                     	;# 
   680  0213                     	;# 
   681  0214                     	;# 
   682  0214                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0216                     	;# 
   689  0217                     	;# 
   690  0217                     	;# 
   691  028C                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0294                     	;# 
   697  0295                     	;# 
   698  0295                     	;# 
   699  0296                     	;# 
   700  0297                     	;# 
   701  0298                     	;# 
   702  030C                     	;# 
   703  038C                     	;# 
   704  0391                     	;# 
   705  0392                     	;# 
   706  0393                     	;# 
   707  039A                     	;# 
   708  039C                     	;# 
   709  039D                     	;# 
   710  039E                     	;# 
   711  039F                     	;# 
   712  0498                     	;# 
   713  0498                     	;# 
   714  0499                     	;# 
   715  049A                     	;# 
   716  049B                     	;# 
   717  049B                     	;# 
   718  049C                     	;# 
   719  049D                     	;# 
   720  049E                     	;# 
   721  049F                     	;# 
   722  0617                     	;# 
   723  0618                     	;# 
   724  0619                     	;# 
   725  0619                     	;# 
   726  061A                     	;# 
   727  061B                     	;# 
   728  061C                     	;# 
   729  061C                     	;# 
   730  0691                     	;# 
   731  0692                     	;# 
   732  0693                     	;# 
   733  0694                     	;# 
   734  0695                     	;# 
   735  0696                     	;# 
   736  0697                     	;# 
   737  0698                     	;# 
   738  0699                     	;# 
   739  0891                     	;# 
   740  0891                     	;# 
   741  0891                     	;# 
   742  0891                     	;# 
   743  0891                     	;# 
   744  0891                     	;# 
   745  0892                     	;# 
   746  0892                     	;# 
   747  0892                     	;# 
   748  0893                     	;# 
   749  0893                     	;# 
   750  0893                     	;# 
   751  0893                     	;# 
   752  0893                     	;# 
   753  0893                     	;# 
   754  0894                     	;# 
   755  0894                     	;# 
   756  0894                     	;# 
   757  0895                     	;# 
   758  0895                     	;# 
   759  0895                     	;# 
   760  0896                     	;# 
   761  0896                     	;# 
   762  0896                     	;# 
   763  089B                     	;# 
   764  0911                     	;# 
   765  0912                     	;# 
   766  0913                     	;# 
   767  0914                     	;# 
   768  0915                     	;# 
   769  0916                     	;# 
   770  0918                     	;# 
   771  0919                     	;# 
   772  091A                     	;# 
   773  091B                     	;# 
   774  091C                     	;# 
   775  091D                     	;# 
   776  091E                     	;# 
   777  091F                     	;# 
   778  0E0F                     	;# 
   779  0E10                     	;# 
   780  0E11                     	;# 
   781  0E12                     	;# 
   782  0E13                     	;# 
   783  0E14                     	;# 
   784  0E15                     	;# 
   785  0E18                     	;# 
   786  0E1A                     	;# 
   787  0E1B                     	;# 
   788  0E1C                     	;# 
   789  0E20                     	;# 
   790  0E21                     	;# 
   791  0E22                     	;# 
   792  0E24                     	;# 
   793  0E25                     	;# 
   794  0E28                     	;# 
   795  0E29                     	;# 
   796  0E2A                     	;# 
   797  0E2B                     	;# 
   798  0E90                     	;# 
   799  0E91                     	;# 
   800  0E92                     	;# 
   801  0E94                     	;# 
   802  0E95                     	;# 
   803  0F0F                     	;# 
   804  0F10                     	;# 
   805  0F11                     	;# 
   806  0F12                     	;# 
   807  0F13                     	;# 
   808  0F14                     	;# 
   809  0F15                     	;# 
   810  0F16                     	;# 
   811  0F17                     	;# 
   812  0F18                     	;# 
   813  0F19                     	;# 
   814  0F1A                     	;# 
   815  0F1B                     	;# 
   816  0F1C                     	;# 
   817  0F1D                     	;# 
   818  0F1E                     	;# 
   819  0F1F                     	;# 
   820  0F20                     	;# 
   821  0F21                     	;# 
   822  0F22                     	;# 
   823  0F23                     	;# 
   824  0FE4                     	;# 
   825  0FE5                     	;# 
   826  0FE6                     	;# 
   827  0FE7                     	;# 
   828  0FE8                     	;# 
   829  0FE9                     	;# 
   830  0FEA                     	;# 
   831  0FEB                     	;# 
   832  0FED                     	;# 
   833  0FEE                     	;# 
   834  0FEF                     	;# 
   835  0000                     	;# 
   836  0001                     	;# 
   837  0002                     	;# 
   838  0003                     	;# 
   839  0004                     	;# 
   840  0005                     	;# 
   841  0006                     	;# 
   842  0007                     	;# 
   843  0008                     	;# 
   844  0009                     	;# 
   845  000A                     	;# 
   846  000B                     	;# 
   847  000C                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0013                     	;# 
   852  0014                     	;# 
   853  0015                     	;# 
   854  0015                     	;# 
   855  0016                     	;# 
   856  0016                     	;# 
   857  0017                     	;# 
   858  0018                     	;# 
   859  0019                     	;# 
   860  0019                     	;# 
   861  001A                     	;# 
   862  001B                     	;# 
   863  001C                     	;# 
   864  001D                     	;# 
   865  001E                     	;# 
   866  001F                     	;# 
   867  008C                     	;# 
   868  0090                     	;# 
   869  0091                     	;# 
   870  0092                     	;# 
   871  0093                     	;# 
   872  0094                     	;# 
   873  0097                     	;# 
   874  009B                     	;# 
   875  009B                     	;# 
   876  009C                     	;# 
   877  009D                     	;# 
   878  009E                     	;# 
   879  009F                     	;# 
   880  010C                     	;# 
   881  0111                     	;# 
   882  0112                     	;# 
   883  0115                     	;# 
   884  0116                     	;# 
   885  0117                     	;# 
   886  0118                     	;# 
   887  0119                     	;# 
   888  018C                     	;# 
   889  0197                     	;# 
   890  0199                     	;# 
   891  0199                     	;# 
   892  0199                     	;# 
   893  019A                     	;# 
   894  019A                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019C                     	;# 
   904  019D                     	;# 
   905  019D                     	;# 
   906  019D                     	;# 
   907  019E                     	;# 
   908  019E                     	;# 
   909  019E                     	;# 
   910  019F                     	;# 
   911  019F                     	;# 
   912  019F                     	;# 
   913  019F                     	;# 
   914  019F                     	;# 
   915  020C                     	;# 
   916  0211                     	;# 
   917  0211                     	;# 
   918  0212                     	;# 
   919  0212                     	;# 
   920  0213                     	;# 
   921  0213                     	;# 
   922  0214                     	;# 
   923  0214                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0216                     	;# 
   929  0216                     	;# 
   930  0217                     	;# 
   931  0217                     	;# 
   932  028C                     	;# 
   933  0291                     	;# 
   934  0291                     	;# 
   935  0292                     	;# 
   936  0293                     	;# 
   937  0294                     	;# 
   938  0295                     	;# 
   939  0295                     	;# 
   940  0296                     	;# 
   941  0297                     	;# 
   942  0298                     	;# 
   943  030C                     	;# 
   944  038C                     	;# 
   945  0391                     	;# 
   946  0392                     	;# 
   947  0393                     	;# 
   948  039A                     	;# 
   949  039C                     	;# 
   950  039D                     	;# 
   951  039E                     	;# 
   952  039F                     	;# 
   953  0498                     	;# 
   954  0498                     	;# 
   955  0499                     	;# 
   956  049A                     	;# 
   957  049B                     	;# 
   958  049B                     	;# 
   959  049C                     	;# 
   960  049D                     	;# 
   961  049E                     	;# 
   962  049F                     	;# 
   963  0617                     	;# 
   964  0618                     	;# 
   965  0619                     	;# 
   966  0619                     	;# 
   967  061A                     	;# 
   968  061B                     	;# 
   969  061C                     	;# 
   970  061C                     	;# 
   971  0691                     	;# 
   972  0692                     	;# 
   973  0693                     	;# 
   974  0694                     	;# 
   975  0695                     	;# 
   976  0696                     	;# 
   977  0697                     	;# 
   978  0698                     	;# 
   979  0699                     	;# 
   980  0891                     	;# 
   981  0891                     	;# 
   982  0891                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0892                     	;# 
   987  0892                     	;# 
   988  0892                     	;# 
   989  0893                     	;# 
   990  0893                     	;# 
   991  0893                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0894                     	;# 
   996  0894                     	;# 
   997  0894                     	;# 
   998  0895                     	;# 
   999  0895                     	;# 
  1000  0895                     	;# 
  1001  0896                     	;# 
  1002  0896                     	;# 
  1003  0896                     	;# 
  1004  089B                     	;# 
  1005  0911                     	;# 
  1006  0912                     	;# 
  1007  0913                     	;# 
  1008  0914                     	;# 
  1009  0915                     	;# 
  1010  0916                     	;# 
  1011  0918                     	;# 
  1012  0919                     	;# 
  1013  091A                     	;# 
  1014  091B                     	;# 
  1015  091C                     	;# 
  1016  091D                     	;# 
  1017  091E                     	;# 
  1018  091F                     	;# 
  1019  0E0F                     	;# 
  1020  0E10                     	;# 
  1021  0E11                     	;# 
  1022  0E12                     	;# 
  1023  0E13                     	;# 
  1024  0E14                     	;# 
  1025  0E15                     	;# 
  1026  0E18                     	;# 
  1027  0E1A                     	;# 
  1028  0E1B                     	;# 
  1029  0E1C                     	;# 
  1030  0E20                     	;# 
  1031  0E21                     	;# 
  1032  0E22                     	;# 
  1033  0E24                     	;# 
  1034  0E25                     	;# 
  1035  0E28                     	;# 
  1036  0E29                     	;# 
  1037  0E2A                     	;# 
  1038  0E2B                     	;# 
  1039  0E90                     	;# 
  1040  0E91                     	;# 
  1041  0E92                     	;# 
  1042  0E94                     	;# 
  1043  0E95                     	;# 
  1044  0F0F                     	;# 
  1045  0F10                     	;# 
  1046  0F11                     	;# 
  1047  0F12                     	;# 
  1048  0F13                     	;# 
  1049  0F14                     	;# 
  1050  0F15                     	;# 
  1051  0F16                     	;# 
  1052  0F17                     	;# 
  1053  0F18                     	;# 
  1054  0F19                     	;# 
  1055  0F1A                     	;# 
  1056  0F1B                     	;# 
  1057  0F1C                     	;# 
  1058  0F1D                     	;# 
  1059  0F1E                     	;# 
  1060  0F1F                     	;# 
  1061  0F20                     	;# 
  1062  0F21                     	;# 
  1063  0F22                     	;# 
  1064  0F23                     	;# 
  1065  0FE4                     	;# 
  1066  0FE5                     	;# 
  1067  0FE6                     	;# 
  1068  0FE7                     	;# 
  1069  0FE8                     	;# 
  1070  0FE9                     	;# 
  1071  0FEA                     	;# 
  1072  0FEB                     	;# 
  1073  0FED                     	;# 
  1074  0FEE                     	;# 
  1075  0FEF                     	;# 
  1076  0000                     	;# 
  1077  0001                     	;# 
  1078  0002                     	;# 
  1079  0003                     	;# 
  1080  0004                     	;# 
  1081  0005                     	;# 
  1082  0006                     	;# 
  1083  0007                     	;# 
  1084  0008                     	;# 
  1085  0009                     	;# 
  1086  000A                     	;# 
  1087  000B                     	;# 
  1088  000C                     	;# 
  1089  0010                     	;# 
  1090  0011                     	;# 
  1091  0012                     	;# 
  1092  0013                     	;# 
  1093  0014                     	;# 
  1094  0015                     	;# 
  1095  0015                     	;# 
  1096  0016                     	;# 
  1097  0016                     	;# 
  1098  0017                     	;# 
  1099  0018                     	;# 
  1100  0019                     	;# 
  1101  0019                     	;# 
  1102  001A                     	;# 
  1103  001B                     	;# 
  1104  001C                     	;# 
  1105  001D                     	;# 
  1106  001E                     	;# 
  1107  001F                     	;# 
  1108  008C                     	;# 
  1109  0090                     	;# 
  1110  0091                     	;# 
  1111  0092                     	;# 
  1112  0093                     	;# 
  1113  0094                     	;# 
  1114  0097                     	;# 
  1115  009B                     	;# 
  1116  009B                     	;# 
  1117  009C                     	;# 
  1118  009D                     	;# 
  1119  009E                     	;# 
  1120  009F                     	;# 
  1121  010C                     	;# 
  1122  0111                     	;# 
  1123  0112                     	;# 
  1124  0115                     	;# 
  1125  0116                     	;# 
  1126  0117                     	;# 
  1127  0118                     	;# 
  1128  0119                     	;# 
  1129  018C                     	;# 
  1130  0197                     	;# 
  1131  0199                     	;# 
  1132  0199                     	;# 
  1133  0199                     	;# 
  1134  019A                     	;# 
  1135  019A                     	;# 
  1136  019A                     	;# 
  1137  019B                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019C                     	;# 
  1143  019C                     	;# 
  1144  019C                     	;# 
  1145  019D                     	;# 
  1146  019D                     	;# 
  1147  019D                     	;# 
  1148  019E                     	;# 
  1149  019E                     	;# 
  1150  019E                     	;# 
  1151  019F                     	;# 
  1152  019F                     	;# 
  1153  019F                     	;# 
  1154  019F                     	;# 
  1155  019F                     	;# 
  1156  020C                     	;# 
  1157  0211                     	;# 
  1158  0211                     	;# 
  1159  0212                     	;# 
  1160  0212                     	;# 
  1161  0213                     	;# 
  1162  0213                     	;# 
  1163  0214                     	;# 
  1164  0214                     	;# 
  1165  0215                     	;# 
  1166  0215                     	;# 
  1167  0215                     	;# 
  1168  0215                     	;# 
  1169  0216                     	;# 
  1170  0216                     	;# 
  1171  0217                     	;# 
  1172  0217                     	;# 
  1173  028C                     	;# 
  1174  0291                     	;# 
  1175  0291                     	;# 
  1176  0292                     	;# 
  1177  0293                     	;# 
  1178  0294                     	;# 
  1179  0295                     	;# 
  1180  0295                     	;# 
  1181  0296                     	;# 
  1182  0297                     	;# 
  1183  0298                     	;# 
  1184  030C                     	;# 
  1185  038C                     	;# 
  1186  0391                     	;# 
  1187  0392                     	;# 
  1188  0393                     	;# 
  1189  039A                     	;# 
  1190  039C                     	;# 
  1191  039D                     	;# 
  1192  039E                     	;# 
  1193  039F                     	;# 
  1194  0498                     	;# 
  1195  0498                     	;# 
  1196  0499                     	;# 
  1197  049A                     	;# 
  1198  049B                     	;# 
  1199  049B                     	;# 
  1200  049C                     	;# 
  1201  049D                     	;# 
  1202  049E                     	;# 
  1203  049F                     	;# 
  1204  0617                     	;# 
  1205  0618                     	;# 
  1206  0619                     	;# 
  1207  0619                     	;# 
  1208  061A                     	;# 
  1209  061B                     	;# 
  1210  061C                     	;# 
  1211  061C                     	;# 
  1212  0691                     	;# 
  1213  0692                     	;# 
  1214  0693                     	;# 
  1215  0694                     	;# 
  1216  0695                     	;# 
  1217  0696                     	;# 
  1218  0697                     	;# 
  1219  0698                     	;# 
  1220  0699                     	;# 
  1221  0891                     	;# 
  1222  0891                     	;# 
  1223  0891                     	;# 
  1224  0891                     	;# 
  1225  0891                     	;# 
  1226  0891                     	;# 
  1227  0892                     	;# 
  1228  0892                     	;# 
  1229  0892                     	;# 
  1230  0893                     	;# 
  1231  0893                     	;# 
  1232  0893                     	;# 
  1233  0893                     	;# 
  1234  0893                     	;# 
  1235  0893                     	;# 
  1236  0894                     	;# 
  1237  0894                     	;# 
  1238  0894                     	;# 
  1239  0895                     	;# 
  1240  0895                     	;# 
  1241  0895                     	;# 
  1242  0896                     	;# 
  1243  0896                     	;# 
  1244  0896                     	;# 
  1245  089B                     	;# 
  1246  0911                     	;# 
  1247  0912                     	;# 
  1248  0913                     	;# 
  1249  0914                     	;# 
  1250  0915                     	;# 
  1251  0916                     	;# 
  1252  0918                     	;# 
  1253  0919                     	;# 
  1254  091A                     	;# 
  1255  091B                     	;# 
  1256  091C                     	;# 
  1257  091D                     	;# 
  1258  091E                     	;# 
  1259  091F                     	;# 
  1260  0E0F                     	;# 
  1261  0E10                     	;# 
  1262  0E11                     	;# 
  1263  0E12                     	;# 
  1264  0E13                     	;# 
  1265  0E14                     	;# 
  1266  0E15                     	;# 
  1267  0E18                     	;# 
  1268  0E1A                     	;# 
  1269  0E1B                     	;# 
  1270  0E1C                     	;# 
  1271  0E20                     	;# 
  1272  0E21                     	;# 
  1273  0E22                     	;# 
  1274  0E24                     	;# 
  1275  0E25                     	;# 
  1276  0E28                     	;# 
  1277  0E29                     	;# 
  1278  0E2A                     	;# 
  1279  0E2B                     	;# 
  1280  0E90                     	;# 
  1281  0E91                     	;# 
  1282  0E92                     	;# 
  1283  0E94                     	;# 
  1284  0E95                     	;# 
  1285  0F0F                     	;# 
  1286  0F10                     	;# 
  1287  0F11                     	;# 
  1288  0F12                     	;# 
  1289  0F13                     	;# 
  1290  0F14                     	;# 
  1291  0F15                     	;# 
  1292  0F16                     	;# 
  1293  0F17                     	;# 
  1294  0F18                     	;# 
  1295  0F19                     	;# 
  1296  0F1A                     	;# 
  1297  0F1B                     	;# 
  1298  0F1C                     	;# 
  1299  0F1D                     	;# 
  1300  0F1E                     	;# 
  1301  0F1F                     	;# 
  1302  0F20                     	;# 
  1303  0F21                     	;# 
  1304  0F22                     	;# 
  1305  0F23                     	;# 
  1306  0FE4                     	;# 
  1307  0FE5                     	;# 
  1308  0FE6                     	;# 
  1309  0FE7                     	;# 
  1310  0FE8                     	;# 
  1311  0FE9                     	;# 
  1312  0FEA                     	;# 
  1313  0FEB                     	;# 
  1314  0FED                     	;# 
  1315  0FEE                     	;# 
  1316  0FEF                     	;# 
  1317  0000                     	;# 
  1318  0001                     	;# 
  1319  0002                     	;# 
  1320  0003                     	;# 
  1321  0004                     	;# 
  1322  0005                     	;# 
  1323  0006                     	;# 
  1324  0007                     	;# 
  1325  0008                     	;# 
  1326  0009                     	;# 
  1327  000A                     	;# 
  1328  000B                     	;# 
  1329  000C                     	;# 
  1330  0010                     	;# 
  1331  0011                     	;# 
  1332  0012                     	;# 
  1333  0013                     	;# 
  1334  0014                     	;# 
  1335  0015                     	;# 
  1336  0015                     	;# 
  1337  0016                     	;# 
  1338  0016                     	;# 
  1339  0017                     	;# 
  1340  0018                     	;# 
  1341  0019                     	;# 
  1342  0019                     	;# 
  1343  001A                     	;# 
  1344  001B                     	;# 
  1345  001C                     	;# 
  1346  001D                     	;# 
  1347  001E                     	;# 
  1348  001F                     	;# 
  1349  008C                     	;# 
  1350  0090                     	;# 
  1351  0091                     	;# 
  1352  0092                     	;# 
  1353  0093                     	;# 
  1354  0094                     	;# 
  1355  0097                     	;# 
  1356  009B                     	;# 
  1357  009B                     	;# 
  1358  009C                     	;# 
  1359  009D                     	;# 
  1360  009E                     	;# 
  1361  009F                     	;# 
  1362  010C                     	;# 
  1363  0111                     	;# 
  1364  0112                     	;# 
  1365  0115                     	;# 
  1366  0116                     	;# 
  1367  0117                     	;# 
  1368  0118                     	;# 
  1369  0119                     	;# 
  1370  018C                     	;# 
  1371  0197                     	;# 
  1372  0199                     	;# 
  1373  0199                     	;# 
  1374  0199                     	;# 
  1375  019A                     	;# 
  1376  019A                     	;# 
  1377  019A                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019C                     	;# 
  1384  019C                     	;# 
  1385  019C                     	;# 
  1386  019D                     	;# 
  1387  019D                     	;# 
  1388  019D                     	;# 
  1389  019E                     	;# 
  1390  019E                     	;# 
  1391  019E                     	;# 
  1392  019F                     	;# 
  1393  019F                     	;# 
  1394  019F                     	;# 
  1395  019F                     	;# 
  1396  019F                     	;# 
  1397  020C                     	;# 
  1398  0211                     	;# 
  1399  0211                     	;# 
  1400  0212                     	;# 
  1401  0212                     	;# 
  1402  0213                     	;# 
  1403  0213                     	;# 
  1404  0214                     	;# 
  1405  0214                     	;# 
  1406  0215                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0215                     	;# 
  1410  0216                     	;# 
  1411  0216                     	;# 
  1412  0217                     	;# 
  1413  0217                     	;# 
  1414  028C                     	;# 
  1415  0291                     	;# 
  1416  0291                     	;# 
  1417  0292                     	;# 
  1418  0293                     	;# 
  1419  0294                     	;# 
  1420  0295                     	;# 
  1421  0295                     	;# 
  1422  0296                     	;# 
  1423  0297                     	;# 
  1424  0298                     	;# 
  1425  030C                     	;# 
  1426  038C                     	;# 
  1427  0391                     	;# 
  1428  0392                     	;# 
  1429  0393                     	;# 
  1430  039A                     	;# 
  1431  039C                     	;# 
  1432  039D                     	;# 
  1433  039E                     	;# 
  1434  039F                     	;# 
  1435  0498                     	;# 
  1436  0498                     	;# 
  1437  0499                     	;# 
  1438  049A                     	;# 
  1439  049B                     	;# 
  1440  049B                     	;# 
  1441  049C                     	;# 
  1442  049D                     	;# 
  1443  049E                     	;# 
  1444  049F                     	;# 
  1445  0617                     	;# 
  1446  0618                     	;# 
  1447  0619                     	;# 
  1448  0619                     	;# 
  1449  061A                     	;# 
  1450  061B                     	;# 
  1451  061C                     	;# 
  1452  061C                     	;# 
  1453  0691                     	;# 
  1454  0692                     	;# 
  1455  0693                     	;# 
  1456  0694                     	;# 
  1457  0695                     	;# 
  1458  0696                     	;# 
  1459  0697                     	;# 
  1460  0698                     	;# 
  1461  0699                     	;# 
  1462  0891                     	;# 
  1463  0891                     	;# 
  1464  0891                     	;# 
  1465  0891                     	;# 
  1466  0891                     	;# 
  1467  0891                     	;# 
  1468  0892                     	;# 
  1469  0892                     	;# 
  1470  0892                     	;# 
  1471  0893                     	;# 
  1472  0893                     	;# 
  1473  0893                     	;# 
  1474  0893                     	;# 
  1475  0893                     	;# 
  1476  0893                     	;# 
  1477  0894                     	;# 
  1478  0894                     	;# 
  1479  0894                     	;# 
  1480  0895                     	;# 
  1481  0895                     	;# 
  1482  0895                     	;# 
  1483  0896                     	;# 
  1484  0896                     	;# 
  1485  0896                     	;# 
  1486  089B                     	;# 
  1487  0911                     	;# 
  1488  0912                     	;# 
  1489  0913                     	;# 
  1490  0914                     	;# 
  1491  0915                     	;# 
  1492  0916                     	;# 
  1493  0918                     	;# 
  1494  0919                     	;# 
  1495  091A                     	;# 
  1496  091B                     	;# 
  1497  091C                     	;# 
  1498  091D                     	;# 
  1499  091E                     	;# 
  1500  091F                     	;# 
  1501  0E0F                     	;# 
  1502  0E10                     	;# 
  1503  0E11                     	;# 
  1504  0E12                     	;# 
  1505  0E13                     	;# 
  1506  0E14                     	;# 
  1507  0E15                     	;# 
  1508  0E18                     	;# 
  1509  0E1A                     	;# 
  1510  0E1B                     	;# 
  1511  0E1C                     	;# 
  1512  0E20                     	;# 
  1513  0E21                     	;# 
  1514  0E22                     	;# 
  1515  0E24                     	;# 
  1516  0E25                     	;# 
  1517  0E28                     	;# 
  1518  0E29                     	;# 
  1519  0E2A                     	;# 
  1520  0E2B                     	;# 
  1521  0E90                     	;# 
  1522  0E91                     	;# 
  1523  0E92                     	;# 
  1524  0E94                     	;# 
  1525  0E95                     	;# 
  1526  0F0F                     	;# 
  1527  0F10                     	;# 
  1528  0F11                     	;# 
  1529  0F12                     	;# 
  1530  0F13                     	;# 
  1531  0F14                     	;# 
  1532  0F15                     	;# 
  1533  0F16                     	;# 
  1534  0F17                     	;# 
  1535  0F18                     	;# 
  1536  0F19                     	;# 
  1537  0F1A                     	;# 
  1538  0F1B                     	;# 
  1539  0F1C                     	;# 
  1540  0F1D                     	;# 
  1541  0F1E                     	;# 
  1542  0F1F                     	;# 
  1543  0F20                     	;# 
  1544  0F21                     	;# 
  1545  0F22                     	;# 
  1546  0F23                     	;# 
  1547  0FE4                     	;# 
  1548  0FE5                     	;# 
  1549  0FE6                     	;# 
  1550  0FE7                     	;# 
  1551  0FE8                     	;# 
  1552  0FE9                     	;# 
  1553  0FEA                     	;# 
  1554  0FEB                     	;# 
  1555  0FED                     	;# 
  1556  0FEE                     	;# 
  1557  0FEF                     	;# 
  1558  0000                     	;# 
  1559  0001                     	;# 
  1560  0002                     	;# 
  1561  0003                     	;# 
  1562  0004                     	;# 
  1563  0005                     	;# 
  1564  0006                     	;# 
  1565  0007                     	;# 
  1566  0008                     	;# 
  1567  0009                     	;# 
  1568  000A                     	;# 
  1569  000B                     	;# 
  1570  000C                     	;# 
  1571  0010                     	;# 
  1572  0011                     	;# 
  1573  0012                     	;# 
  1574  0013                     	;# 
  1575  0014                     	;# 
  1576  0015                     	;# 
  1577  0015                     	;# 
  1578  0016                     	;# 
  1579  0016                     	;# 
  1580  0017                     	;# 
  1581  0018                     	;# 
  1582  0019                     	;# 
  1583  0019                     	;# 
  1584  001A                     	;# 
  1585  001B                     	;# 
  1586  001C                     	;# 
  1587  001D                     	;# 
  1588  001E                     	;# 
  1589  001F                     	;# 
  1590  008C                     	;# 
  1591  0090                     	;# 
  1592  0091                     	;# 
  1593  0092                     	;# 
  1594  0093                     	;# 
  1595  0094                     	;# 
  1596  0097                     	;# 
  1597  009B                     	;# 
  1598  009B                     	;# 
  1599  009C                     	;# 
  1600  009D                     	;# 
  1601  009E                     	;# 
  1602  009F                     	;# 
  1603  010C                     	;# 
  1604  0111                     	;# 
  1605  0112                     	;# 
  1606  0115                     	;# 
  1607  0116                     	;# 
  1608  0117                     	;# 
  1609  0118                     	;# 
  1610  0119                     	;# 
  1611  018C                     	;# 
  1612  0197                     	;# 
  1613  0199                     	;# 
  1614  0199                     	;# 
  1615  0199                     	;# 
  1616  019A                     	;# 
  1617  019A                     	;# 
  1618  019A                     	;# 
  1619  019B                     	;# 
  1620  019B                     	;# 
  1621  019B                     	;# 
  1622  019B                     	;# 
  1623  019B                     	;# 
  1624  019C                     	;# 
  1625  019C                     	;# 
  1626  019C                     	;# 
  1627  019D                     	;# 
  1628  019D                     	;# 
  1629  019D                     	;# 
  1630  019E                     	;# 
  1631  019E                     	;# 
  1632  019E                     	;# 
  1633  019F                     	;# 
  1634  019F                     	;# 
  1635  019F                     	;# 
  1636  019F                     	;# 
  1637  019F                     	;# 
  1638  020C                     	;# 
  1639  0211                     	;# 
  1640  0211                     	;# 
  1641  0212                     	;# 
  1642  0212                     	;# 
  1643  0213                     	;# 
  1644  0213                     	;# 
  1645  0214                     	;# 
  1646  0214                     	;# 
  1647  0215                     	;# 
  1648  0215                     	;# 
  1649  0215                     	;# 
  1650  0215                     	;# 
  1651  0216                     	;# 
  1652  0216                     	;# 
  1653  0217                     	;# 
  1654  0217                     	;# 
  1655  028C                     	;# 
  1656  0291                     	;# 
  1657  0291                     	;# 
  1658  0292                     	;# 
  1659  0293                     	;# 
  1660  0294                     	;# 
  1661  0295                     	;# 
  1662  0295                     	;# 
  1663  0296                     	;# 
  1664  0297                     	;# 
  1665  0298                     	;# 
  1666  030C                     	;# 
  1667  038C                     	;# 
  1668  0391                     	;# 
  1669  0392                     	;# 
  1670  0393                     	;# 
  1671  039A                     	;# 
  1672  039C                     	;# 
  1673  039D                     	;# 
  1674  039E                     	;# 
  1675  039F                     	;# 
  1676  0498                     	;# 
  1677  0498                     	;# 
  1678  0499                     	;# 
  1679  049A                     	;# 
  1680  049B                     	;# 
  1681  049B                     	;# 
  1682  049C                     	;# 
  1683  049D                     	;# 
  1684  049E                     	;# 
  1685  049F                     	;# 
  1686  0617                     	;# 
  1687  0618                     	;# 
  1688  0619                     	;# 
  1689  0619                     	;# 
  1690  061A                     	;# 
  1691  061B                     	;# 
  1692  061C                     	;# 
  1693  061C                     	;# 
  1694  0691                     	;# 
  1695  0692                     	;# 
  1696  0693                     	;# 
  1697  0694                     	;# 
  1698  0695                     	;# 
  1699  0696                     	;# 
  1700  0697                     	;# 
  1701  0698                     	;# 
  1702  0699                     	;# 
  1703  0891                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0891                     	;# 
  1708  0891                     	;# 
  1709  0892                     	;# 
  1710  0892                     	;# 
  1711  0892                     	;# 
  1712  0893                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0893                     	;# 
  1717  0893                     	;# 
  1718  0894                     	;# 
  1719  0894                     	;# 
  1720  0894                     	;# 
  1721  0895                     	;# 
  1722  0895                     	;# 
  1723  0895                     	;# 
  1724  0896                     	;# 
  1725  0896                     	;# 
  1726  0896                     	;# 
  1727  089B                     	;# 
  1728  0911                     	;# 
  1729  0912                     	;# 
  1730  0913                     	;# 
  1731  0914                     	;# 
  1732  0915                     	;# 
  1733  0916                     	;# 
  1734  0918                     	;# 
  1735  0919                     	;# 
  1736  091A                     	;# 
  1737  091B                     	;# 
  1738  091C                     	;# 
  1739  091D                     	;# 
  1740  091E                     	;# 
  1741  091F                     	;# 
  1742  0E0F                     	;# 
  1743  0E10                     	;# 
  1744  0E11                     	;# 
  1745  0E12                     	;# 
  1746  0E13                     	;# 
  1747  0E14                     	;# 
  1748  0E15                     	;# 
  1749  0E18                     	;# 
  1750  0E1A                     	;# 
  1751  0E1B                     	;# 
  1752  0E1C                     	;# 
  1753  0E20                     	;# 
  1754  0E21                     	;# 
  1755  0E22                     	;# 
  1756  0E24                     	;# 
  1757  0E25                     	;# 
  1758  0E28                     	;# 
  1759  0E29                     	;# 
  1760  0E2A                     	;# 
  1761  0E2B                     	;# 
  1762  0E90                     	;# 
  1763  0E91                     	;# 
  1764  0E92                     	;# 
  1765  0E94                     	;# 
  1766  0E95                     	;# 
  1767  0F0F                     	;# 
  1768  0F10                     	;# 
  1769  0F11                     	;# 
  1770  0F12                     	;# 
  1771  0F13                     	;# 
  1772  0F14                     	;# 
  1773  0F15                     	;# 
  1774  0F16                     	;# 
  1775  0F17                     	;# 
  1776  0F18                     	;# 
  1777  0F19                     	;# 
  1778  0F1A                     	;# 
  1779  0F1B                     	;# 
  1780  0F1C                     	;# 
  1781  0F1D                     	;# 
  1782  0F1E                     	;# 
  1783  0F1F                     	;# 
  1784  0F20                     	;# 
  1785  0F21                     	;# 
  1786  0F22                     	;# 
  1787  0F23                     	;# 
  1788  0FE4                     	;# 
  1789  0FE5                     	;# 
  1790  0FE6                     	;# 
  1791  0FE7                     	;# 
  1792  0FE8                     	;# 
  1793  0FE9                     	;# 
  1794  0FEA                     	;# 
  1795  0FEB                     	;# 
  1796  0FED                     	;# 
  1797  0FEE                     	;# 
  1798  0FEF                     	;# 
  1799  0000                     	;# 
  1800  0001                     	;# 
  1801  0002                     	;# 
  1802  0003                     	;# 
  1803  0004                     	;# 
  1804  0005                     	;# 
  1805  0006                     	;# 
  1806  0007                     	;# 
  1807  0008                     	;# 
  1808  0009                     	;# 
  1809  000A                     	;# 
  1810  000B                     	;# 
  1811  000C                     	;# 
  1812  0010                     	;# 
  1813  0011                     	;# 
  1814  0012                     	;# 
  1815  0013                     	;# 
  1816  0014                     	;# 
  1817  0015                     	;# 
  1818  0015                     	;# 
  1819  0016                     	;# 
  1820  0016                     	;# 
  1821  0017                     	;# 
  1822  0018                     	;# 
  1823  0019                     	;# 
  1824  0019                     	;# 
  1825  001A                     	;# 
  1826  001B                     	;# 
  1827  001C                     	;# 
  1828  001D                     	;# 
  1829  001E                     	;# 
  1830  001F                     	;# 
  1831  008C                     	;# 
  1832  0090                     	;# 
  1833  0091                     	;# 
  1834  0092                     	;# 
  1835  0093                     	;# 
  1836  0094                     	;# 
  1837  0097                     	;# 
  1838  009B                     	;# 
  1839  009B                     	;# 
  1840  009C                     	;# 
  1841  009D                     	;# 
  1842  009E                     	;# 
  1843  009F                     	;# 
  1844  010C                     	;# 
  1845  0111                     	;# 
  1846  0112                     	;# 
  1847  0115                     	;# 
  1848  0116                     	;# 
  1849  0117                     	;# 
  1850  0118                     	;# 
  1851  0119                     	;# 
  1852  018C                     	;# 
  1853  0197                     	;# 
  1854  0199                     	;# 
  1855  0199                     	;# 
  1856  0199                     	;# 
  1857  019A                     	;# 
  1858  019A                     	;# 
  1859  019A                     	;# 
  1860  019B                     	;# 
  1861  019B                     	;# 
  1862  019B                     	;# 
  1863  019B                     	;# 
  1864  019B                     	;# 
  1865  019C                     	;# 
  1866  019C                     	;# 
  1867  019C                     	;# 
  1868  019D                     	;# 
  1869  019D                     	;# 
  1870  019D                     	;# 
  1871  019E                     	;# 
  1872  019E                     	;# 
  1873  019E                     	;# 
  1874  019F                     	;# 
  1875  019F                     	;# 
  1876  019F                     	;# 
  1877  019F                     	;# 
  1878  019F                     	;# 
  1879  020C                     	;# 
  1880  0211                     	;# 
  1881  0211                     	;# 
  1882  0212                     	;# 
  1883  0212                     	;# 
  1884  0213                     	;# 
  1885  0213                     	;# 
  1886  0214                     	;# 
  1887  0214                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0215                     	;# 
  1891  0215                     	;# 
  1892  0216                     	;# 
  1893  0216                     	;# 
  1894  0217                     	;# 
  1895  0217                     	;# 
  1896  028C                     	;# 
  1897  0291                     	;# 
  1898  0291                     	;# 
  1899  0292                     	;# 
  1900  0293                     	;# 
  1901  0294                     	;# 
  1902  0295                     	;# 
  1903  0295                     	;# 
  1904  0296                     	;# 
  1905  0297                     	;# 
  1906  0298                     	;# 
  1907  030C                     	;# 
  1908  038C                     	;# 
  1909  0391                     	;# 
  1910  0392                     	;# 
  1911  0393                     	;# 
  1912  039A                     	;# 
  1913  039C                     	;# 
  1914  039D                     	;# 
  1915  039E                     	;# 
  1916  039F                     	;# 
  1917  0498                     	;# 
  1918  0498                     	;# 
  1919  0499                     	;# 
  1920  049A                     	;# 
  1921  049B                     	;# 
  1922  049B                     	;# 
  1923  049C                     	;# 
  1924  049D                     	;# 
  1925  049E                     	;# 
  1926  049F                     	;# 
  1927  0617                     	;# 
  1928  0618                     	;# 
  1929  0619                     	;# 
  1930  0619                     	;# 
  1931  061A                     	;# 
  1932  061B                     	;# 
  1933  061C                     	;# 
  1934  061C                     	;# 
  1935  0691                     	;# 
  1936  0692                     	;# 
  1937  0693                     	;# 
  1938  0694                     	;# 
  1939  0695                     	;# 
  1940  0696                     	;# 
  1941  0697                     	;# 
  1942  0698                     	;# 
  1943  0699                     	;# 
  1944  0891                     	;# 
  1945  0891                     	;# 
  1946  0891                     	;# 
  1947  0891                     	;# 
  1948  0891                     	;# 
  1949  0891                     	;# 
  1950  0892                     	;# 
  1951  0892                     	;# 
  1952  0892                     	;# 
  1953  0893                     	;# 
  1954  0893                     	;# 
  1955  0893                     	;# 
  1956  0893                     	;# 
  1957  0893                     	;# 
  1958  0893                     	;# 
  1959  0894                     	;# 
  1960  0894                     	;# 
  1961  0894                     	;# 
  1962  0895                     	;# 
  1963  0895                     	;# 
  1964  0895                     	;# 
  1965  0896                     	;# 
  1966  0896                     	;# 
  1967  0896                     	;# 
  1968  089B                     	;# 
  1969  0911                     	;# 
  1970  0912                     	;# 
  1971  0913                     	;# 
  1972  0914                     	;# 
  1973  0915                     	;# 
  1974  0916                     	;# 
  1975  0918                     	;# 
  1976  0919                     	;# 
  1977  091A                     	;# 
  1978  091B                     	;# 
  1979  091C                     	;# 
  1980  091D                     	;# 
  1981  091E                     	;# 
  1982  091F                     	;# 
  1983  0E0F                     	;# 
  1984  0E10                     	;# 
  1985  0E11                     	;# 
  1986  0E12                     	;# 
  1987  0E13                     	;# 
  1988  0E14                     	;# 
  1989  0E15                     	;# 
  1990  0E18                     	;# 
  1991  0E1A                     	;# 
  1992  0E1B                     	;# 
  1993  0E1C                     	;# 
  1994  0E20                     	;# 
  1995  0E21                     	;# 
  1996  0E22                     	;# 
  1997  0E24                     	;# 
  1998  0E25                     	;# 
  1999  0E28                     	;# 
  2000  0E29                     	;# 
  2001  0E2A                     	;# 
  2002  0E2B                     	;# 
  2003  0E90                     	;# 
  2004  0E91                     	;# 
  2005  0E92                     	;# 
  2006  0E94                     	;# 
  2007  0E95                     	;# 
  2008  0F0F                     	;# 
  2009  0F10                     	;# 
  2010  0F11                     	;# 
  2011  0F12                     	;# 
  2012  0F13                     	;# 
  2013  0F14                     	;# 
  2014  0F15                     	;# 
  2015  0F16                     	;# 
  2016  0F17                     	;# 
  2017  0F18                     	;# 
  2018  0F19                     	;# 
  2019  0F1A                     	;# 
  2020  0F1B                     	;# 
  2021  0F1C                     	;# 
  2022  0F1D                     	;# 
  2023  0F1E                     	;# 
  2024  0F1F                     	;# 
  2025  0F20                     	;# 
  2026  0F21                     	;# 
  2027  0F22                     	;# 
  2028  0F23                     	;# 
  2029  0FE4                     	;# 
  2030  0FE5                     	;# 
  2031  0FE6                     	;# 
  2032  0FE7                     	;# 
  2033  0FE8                     	;# 
  2034  0FE9                     	;# 
  2035  0FEA                     	;# 
  2036  0FEB                     	;# 
  2037  0FED                     	;# 
  2038  0FEE                     	;# 
  2039  0FEF                     	;# 
  2040  0000                     	;# 
  2041  0001                     	;# 
  2042  0002                     	;# 
  2043  0003                     	;# 
  2044  0004                     	;# 
  2045  0005                     	;# 
  2046  0006                     	;# 
  2047  0007                     	;# 
  2048  0008                     	;# 
  2049  0009                     	;# 
  2050  000A                     	;# 
  2051  000B                     	;# 
  2052  000C                     	;# 
  2053  0010                     	;# 
  2054  0011                     	;# 
  2055  0012                     	;# 
  2056  0013                     	;# 
  2057  0014                     	;# 
  2058  0015                     	;# 
  2059  0015                     	;# 
  2060  0016                     	;# 
  2061  0016                     	;# 
  2062  0017                     	;# 
  2063  0018                     	;# 
  2064  0019                     	;# 
  2065  0019                     	;# 
  2066  001A                     	;# 
  2067  001B                     	;# 
  2068  001C                     	;# 
  2069  001D                     	;# 
  2070  001E                     	;# 
  2071  001F                     	;# 
  2072  008C                     	;# 
  2073  0090                     	;# 
  2074  0091                     	;# 
  2075  0092                     	;# 
  2076  0093                     	;# 
  2077  0094                     	;# 
  2078  0097                     	;# 
  2079  009B                     	;# 
  2080  009B                     	;# 
  2081  009C                     	;# 
  2082  009D                     	;# 
  2083  009E                     	;# 
  2084  009F                     	;# 
  2085  010C                     	;# 
  2086  0111                     	;# 
  2087  0112                     	;# 
  2088  0115                     	;# 
  2089  0116                     	;# 
  2090  0117                     	;# 
  2091  0118                     	;# 
  2092  0119                     	;# 
  2093  018C                     	;# 
  2094  0197                     	;# 
  2095  0199                     	;# 
  2096  0199                     	;# 
  2097  0199                     	;# 
  2098  019A                     	;# 
  2099  019A                     	;# 
  2100  019A                     	;# 
  2101  019B                     	;# 
  2102  019B                     	;# 
  2103  019B                     	;# 
  2104  019B                     	;# 
  2105  019B                     	;# 
  2106  019C                     	;# 
  2107  019C                     	;# 
  2108  019C                     	;# 
  2109  019D                     	;# 
  2110  019D                     	;# 
  2111  019D                     	;# 
  2112  019E                     	;# 
  2113  019E                     	;# 
  2114  019E                     	;# 
  2115  019F                     	;# 
  2116  019F                     	;# 
  2117  019F                     	;# 
  2118  019F                     	;# 
  2119  019F                     	;# 
  2120  020C                     	;# 
  2121  0211                     	;# 
  2122  0211                     	;# 
  2123  0212                     	;# 
  2124  0212                     	;# 
  2125  0213                     	;# 
  2126  0213                     	;# 
  2127  0214                     	;# 
  2128  0214                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0215                     	;# 
  2133  0216                     	;# 
  2134  0216                     	;# 
  2135  0217                     	;# 
  2136  0217                     	;# 
  2137  028C                     	;# 
  2138  0291                     	;# 
  2139  0291                     	;# 
  2140  0292                     	;# 
  2141  0293                     	;# 
  2142  0294                     	;# 
  2143  0295                     	;# 
  2144  0295                     	;# 
  2145  0296                     	;# 
  2146  0297                     	;# 
  2147  0298                     	;# 
  2148  030C                     	;# 
  2149  038C                     	;# 
  2150  0391                     	;# 
  2151  0392                     	;# 
  2152  0393                     	;# 
  2153  039A                     	;# 
  2154  039C                     	;# 
  2155  039D                     	;# 
  2156  039E                     	;# 
  2157  039F                     	;# 
  2158  0498                     	;# 
  2159  0498                     	;# 
  2160  0499                     	;# 
  2161  049A                     	;# 
  2162  049B                     	;# 
  2163  049B                     	;# 
  2164  049C                     	;# 
  2165  049D                     	;# 
  2166  049E                     	;# 
  2167  049F                     	;# 
  2168  0617                     	;# 
  2169  0618                     	;# 
  2170  0619                     	;# 
  2171  0619                     	;# 
  2172  061A                     	;# 
  2173  061B                     	;# 
  2174  061C                     	;# 
  2175  061C                     	;# 
  2176  0691                     	;# 
  2177  0692                     	;# 
  2178  0693                     	;# 
  2179  0694                     	;# 
  2180  0695                     	;# 
  2181  0696                     	;# 
  2182  0697                     	;# 
  2183  0698                     	;# 
  2184  0699                     	;# 
  2185  0891                     	;# 
  2186  0891                     	;# 
  2187  0891                     	;# 
  2188  0891                     	;# 
  2189  0891                     	;# 
  2190  0891                     	;# 
  2191  0892                     	;# 
  2192  0892                     	;# 
  2193  0892                     	;# 
  2194  0893                     	;# 
  2195  0893                     	;# 
  2196  0893                     	;# 
  2197  0893                     	;# 
  2198  0893                     	;# 
  2199  0893                     	;# 
  2200  0894                     	;# 
  2201  0894                     	;# 
  2202  0894                     	;# 
  2203  0895                     	;# 
  2204  0895                     	;# 
  2205  0895                     	;# 
  2206  0896                     	;# 
  2207  0896                     	;# 
  2208  0896                     	;# 
  2209  089B                     	;# 
  2210  0911                     	;# 
  2211  0912                     	;# 
  2212  0913                     	;# 
  2213  0914                     	;# 
  2214  0915                     	;# 
  2215  0916                     	;# 
  2216  0918                     	;# 
  2217  0919                     	;# 
  2218  091A                     	;# 
  2219  091B                     	;# 
  2220  091C                     	;# 
  2221  091D                     	;# 
  2222  091E                     	;# 
  2223  091F                     	;# 
  2224  0E0F                     	;# 
  2225  0E10                     	;# 
  2226  0E11                     	;# 
  2227  0E12                     	;# 
  2228  0E13                     	;# 
  2229  0E14                     	;# 
  2230  0E15                     	;# 
  2231  0E18                     	;# 
  2232  0E1A                     	;# 
  2233  0E1B                     	;# 
  2234  0E1C                     	;# 
  2235  0E20                     	;# 
  2236  0E21                     	;# 
  2237  0E22                     	;# 
  2238  0E24                     	;# 
  2239  0E25                     	;# 
  2240  0E28                     	;# 
  2241  0E29                     	;# 
  2242  0E2A                     	;# 
  2243  0E2B                     	;# 
  2244  0E90                     	;# 
  2245  0E91                     	;# 
  2246  0E92                     	;# 
  2247  0E94                     	;# 
  2248  0E95                     	;# 
  2249  0F0F                     	;# 
  2250  0F10                     	;# 
  2251  0F11                     	;# 
  2252  0F12                     	;# 
  2253  0F13                     	;# 
  2254  0F14                     	;# 
  2255  0F15                     	;# 
  2256  0F16                     	;# 
  2257  0F17                     	;# 
  2258  0F18                     	;# 
  2259  0F19                     	;# 
  2260  0F1A                     	;# 
  2261  0F1B                     	;# 
  2262  0F1C                     	;# 
  2263  0F1D                     	;# 
  2264  0F1E                     	;# 
  2265  0F1F                     	;# 
  2266  0F20                     	;# 
  2267  0F21                     	;# 
  2268  0F22                     	;# 
  2269  0F23                     	;# 
  2270  0FE4                     	;# 
  2271  0FE5                     	;# 
  2272  0FE6                     	;# 
  2273  0FE7                     	;# 
  2274  0FE8                     	;# 
  2275  0FE9                     	;# 
  2276  0FEA                     	;# 
  2277  0FEB                     	;# 
  2278  0FED                     	;# 
  2279  0FEE                     	;# 
  2280  0FEF                     	;# 
  2281                           
  2282                           	psect	idataBANK0
  2283  0000'                    __pidataBANK0:	
  2284                           
  2285                           ;initializer for _Button_StateMachine
  2286  0000' 3400'              	retlw	low _Button_State_Initializing
  2287  0001' 3400'              	retlw	high _Button_State_Initializing
  2288  0002' 3400'              	retlw	low _Button_State_NotPressed
  2289  0003' 3400'              	retlw	high _Button_State_NotPressed
  2290  0004' 3400'              	retlw	low _Button_State_Pressed
  2291  0005' 3400'              	retlw	high _Button_State_Pressed
  2292                           
  2293                           ;initializer for _Sensor_scanB
  2294  0006' 3400'              	retlw	low _MTOUCH_CVD_ScanB_0
  2295  0007' 3400'              	retlw	high _MTOUCH_CVD_ScanB_0
  2296                           
  2297                           ;initializer for _Sensor_scanA
  2298  0008' 3400'              	retlw	low _MTOUCH_CVD_ScanA_0
  2299  0009' 3400'              	retlw	high _MTOUCH_CVD_ScanA_0
  2300                           
  2301                           ;initializer for _callback_sampled
  2302  000A' 3400'              	retlw	low _Sensor_DefaultCallback
  2303  000B' 3400'              	retlw	high _Sensor_DefaultCallback
  2304                           
  2305                           ;initializer for _callback_notPressed
  2306  000C' 3400'              	retlw	low _Button_DefaultCallback
  2307  000D' 3400'              	retlw	high _Button_DefaultCallback
  2308                           
  2309                           ;initializer for _callback_pressed
  2310  000E' 3400'              	retlw	low _Button_DefaultCallback
  2311  000F' 3400'              	retlw	high _Button_DefaultCallback
  2312                           
  2313                           ;initializer for _mtouch_sensor
  2314  0010' 3400               	retlw	0
  2315  0011' 3400'              	retlw	low _MTOUCH_CVD_ScanA_0
  2316  0012' 3400'              	retlw	high _MTOUCH_CVD_ScanA_0
  2317  0013' 3400'              	retlw	low _MTOUCH_CVD_ScanB_0
  2318  0014' 3400'              	retlw	high _MTOUCH_CVD_ScanB_0
  2319  0015' 3420               	retlw	32
  2320  0016' 3400               	retlw	0
  2321  0017' 3400               	retlw	0
  2322  0018' 3400               	retlw	0
  2323                           
  2324                           	psect	stringtext1
  2325  0000'                    __pstringtext1:	
  2326  0000'                    _dpowers:	
  2327  0000' 3401               	retlw	1
  2328  0001' 3400               	retlw	0
  2329  0002' 340A               	retlw	10
  2330  0003' 3400               	retlw	0
  2331  0004' 3464               	retlw	100
  2332  0005' 3400               	retlw	0
  2333  0006' 34E8               	retlw	232
  2334  0007' 3403               	retlw	3
  2335  0008' 3410               	retlw	16
  2336  0009' 3427               	retlw	39
  2337  000A'                    __end_of_dpowers:	
  2338                           
  2339                           	psect	stringtext2
  2340  0000'                    __pstringtext2:	
  2341  0000'                    _mtouch_button_init:	
  2342  0000' 3400               	retlw	0
  2343  0001' 3400               	retlw	0
  2344  0002' 3400               	retlw	0
  2345  0003' 3400               	retlw	0
  2346  0004' 3400               	retlw	0
  2347  0005' 3400               	retlw	0
  2348  0006' 3400               	retlw	0
  2349  0007' 3400               	retlw	0
  2350  0008' 3400               	retlw	0
  2351  0009' 3400               	retlw	0
  2352  000A' 3400               	retlw	0
  2353  000B' 3400               	retlw	0
  2354  000C' 3400               	retlw	0
  2355  000D' 3400               	retlw	0
  2356  000E' 3464               	retlw	100
  2357  000F' 3403               	retlw	3
  2358  0010'                    __end_of_mtouch_button_init:	
  2359  000C                     _PORTAbits	set	12
  2360  000B                     _INTCONbits	set	11
  2361  0011                     _PIR1bits	set	17
  2362  005F                     _GIE	set	95
  2363  009B                     _ADRES	set	155
  2364  008C                     _TRISA	set	140
  2365  009D                     _ADCON0bits	set	157
  2366  009F                     _ADACT	set	159
  2367  009E                     _ADCON1	set	158
  2368  009D                     _ADCON0	set	157
  2369  008C                     _TRISAbits	set	140
  2370  0097                     _WDTCON	set	151
  2371  010C                     _LATA	set	268
  2372  018C                     _ANSELA	set	396
  2373  018C                     _ANSELAbits	set	396
  2374  019A                     _TX1REG	set	410
  2375  0199                     _RC1REG	set	409
  2376  019D                     _RC1STAbits	set	413
  2377  019E                     _TX1STAbits	set	414
  2378  019C                     _SP1BRGH	set	412
  2379  019B                     _SP1BRGL	set	411
  2380  019E                     _TX1STA	set	414
  2381  019D                     _RC1STA	set	413
  2382  019F                     _BAUD1CON	set	415
  2383  020C                     _WPUA	set	524
  2384  020C                     _WPUAbits	set	524
  2385  028C                     _ODCONA	set	652
  2386  0916                     _PMD5	set	2326
  2387  0915                     _PMD4	set	2325
  2388  0914                     _PMD3	set	2324
  2389  0913                     _PMD2	set	2323
  2390  0912                     _PMD1	set	2322
  2391  0911                     _PMD0	set	2321
  2392  091E                     _OSCTUNE	set	2334
  2393  091F                     _OSCFRQ	set	2335
  2394  091D                     _OSCEN	set	2333
  2395  091B                     _OSCCON3	set	2331
  2396  0919                     _OSCCON1	set	2329
  2397  0E94                     _RA4PPSbits	set	3732
  2398  0010'                    STR_1:	
  2399  0010' 3425               	retlw	37	;'%'
  2400  0011' 3464               	retlw	100	;'d'
  2401  0012' 3400               	retlw	0
  2402                           
  2403                           	psect	stringtext3
  2404  0000'                    __pstringtext3:	
  2405                           
  2406                           ; #config settings
  2407  0000                     
  2408                           	psect	cinit
  2409  0000'                    start_initialization:	
  2410  0000'                    __initialization:	
  2411                           
  2412                           ; Initialize objects allocated to BANK0
  2413  0000' 3000'              	movlw	low __pidataBANK0
  2414  0001' 0084               	movwf	4
  2415  0002' 3000'              	movlw	(high __pidataBANK0)| (0+128)
  2416  0003' 0085               	movwf	5
  2417  0004' 3000'              	movlw	low __pdataBANK0
  2418  0005' 0086               	movwf	6
  2419  0006' 3000'              	movlw	high __pdataBANK0
  2420  0007' 0087               	movwf	7
  2421  0008' 3019               	movlw	25
  2422  0009' 2000'              	fcall	init_ram
  2423                           
  2424                           ; Clear objects allocated to BANK0
  2425  000A' 3000'              	movlw	low __pbssBANK0
  2426  000B' 0084               	movwf	4
  2427  000C' 3000'              	movlw	high __pbssBANK0
  2428  000D' 0085               	movwf	5
  2429  000E' 300C               	movlw	12
  2430  000F' 2000'              	fcall	clear_ram0
  2431                           
  2432                           ; Clear objects allocated to BANK1
  2433  0010' 3000'              	movlw	low __pbssBANK1
  2434  0011' 0084               	movwf	4
  2435  0012' 3000'              	movlw	high __pbssBANK1
  2436  0013' 0085               	movwf	5
  2437  0014' 3010               	movlw	16
  2438  0015' 2000'              	fcall	clear_ram0
  2439  0016'                    end_of_initialization:	
  2440                           ;End of C runtime variable initialization code
  2441                           
  2442  0016'                    __end_of__initialization:	
  2443  0016' 0020               	movlb	0
  2444  0017' 2800'              	ljmp	_main	;jump to C main() function
  2445                           
  2446                           	psect	bssBANK0
  2447  0000'                    __pbssBANK0:	
  2448  0000'                    _bright:	
  2449  0000'                    	ds	2
  2450  0002'                    _packet_sample:	
  2451  0002'                    	ds	2
  2452  0004'                    _myStatus:	
  2453  0004'                    	ds	1
  2454  0005'                    _toggleLED:	
  2455  0005'                    	ds	1
  2456  0006'                    _sample_delay:	
  2457  0006'                    	ds	1
  2458  0007'                    _packet_counter:	
  2459  0007'                    	ds	1
  2460  0008'                    _currentScannSensor:	
  2461  0008'                    	ds	1
  2462  0009'                    _sensor_globalFlags:	
  2463  0009'                    	ds	1
  2464  000A'                    MTOUCH_Random@seed:	
  2465  000A'                    	ds	1
  2466  000B'                    _mtouch_time_toScan:	
  2467  000B'                    	ds	1
  2468                           
  2469                           	psect	dataBANK0
  2470  0000'                    __pdataBANK0:	
  2471  0000'                    _Button_StateMachine:	
  2472  0000'                    	ds	6
  2473  0006'                    _Sensor_scanB:	
  2474  0006'                    	ds	2
  2475  0008'                    _Sensor_scanA:	
  2476  0008'                    	ds	2
  2477  000A'                    _callback_sampled:	
  2478  000A'                    	ds	2
  2479  000C'                    _callback_notPressed:	
  2480  000C'                    	ds	2
  2481  000E'                    _callback_pressed:	
  2482  000E'                    	ds	2
  2483  0010'                    _mtouch_sensor:	
  2484  0010'                    	ds	9
  2485                           
  2486                           	psect	bssBANK1
  2487  0000'                    __pbssBANK1:	
  2488  0000'                    _mtouch_button:	
  2489  0000'                    	ds	16
  2490                           
  2491                           	psect	inittext
  2492  0000'                    init_ram:	
  2493  0000' 00FE               	movwf	126
  2494  0001'                    initloop:	
  2495  0001' 0012               	moviw fsr0++
  2496  0002' 001E               	movwi fsr1++
  2497  0003' 0BFE               	decfsz	126,f
  2498  0004' 2801'              	goto	initloop
  2499  0005' 3400               	retlw	0
  2500                           
  2501                           	psect	clrtext
  2502  0000'                    clear_ram0:	
  2503                           ;	Called with FSR0 containing the base address, and
  2504                           ;	WREG with the size to clear
  2505                           
  2506  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
  2507  0001'                    clrloop0:	
  2508  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
  2509  0002' 3101               	addfsr 0,1
  2510  0003' 0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2511  0004' 2801'              	goto	clrloop0	;have we reached the end yet?
  2512  0005' 3400               	retlw	0	;all done for this memory range, return
  2513                           
  2514                           	psect	cstackCOMMON
  2515  0000'                    __pcstackCOMMON:	
  2516  0000'                    ?_PMD_Initialize:	
  2517  0000'                    ??_PMD_Initialize:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0000'                    ?_PIN_MANAGER_Initialize:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0000'                    ??_PIN_MANAGER_Initialize:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0000'                    ?_OSCILLATOR_Initialize:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0000'                    ??_OSCILLATOR_Initialize:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0000'                    ?_WDT_Initialize:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0000'                    ??_WDT_Initialize:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0000'                    ?_MTOUCH_Initialize:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0000'                    ?_MTOUCH_Sensor_InitializeAll:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0000'                    ?_MTOUCH_Button_InitializeAll:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0000'                    ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0000'                    ?_MTOUCH_Sensor_Scan_Initialize:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0000'                    ??_MTOUCH_Sensor_Scan_Initialize:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0000'                    ?_MTOUCH_Sensor_SampleAll:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0000'                    ?_MTOUCH_Button_ServiceAll:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0000'                    ?_MTOUCH_Tick:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0000'                    ?_MTOUCH_Button_Tick:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0000'                    ?_Button_DefaultCallback:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0000'                    ?_MTOUCH_Sensor_Calibrate:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0000'                    ??_MTOUCH_Sensor_Calibrate:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0000'                    ?_Button_Service:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0000'                    ?_MTOUCH_Sensor_wasSampled:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0000'                    ?_MTOUCH_Sensor_isCalibrated:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0000'                    ??_MTOUCH_Sensor_isCalibrated:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0000'                    ?_Button_Reading_Update:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0000'                    ?_Button_Deviation_Update:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0000'                    ??_Button_Deviation_Update:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0000'                    ?_Button_Baseline_Initialize:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0000'                    ?_Button_Baseline_Update:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0000'                    ??_Button_Baseline_Update:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0000'                    ?_Button_Tick_helper:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0000'                    ??_Button_Tick_helper:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0000'                    ?_Sensor_DefaultCallback:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0000'                    ?_MTOUCH_CVD_ScanA_0:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0000'                    ??_MTOUCH_CVD_ScanA_0:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0000'                    ?_MTOUCH_CVD_ScanB_0:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0000'                    ??_MTOUCH_CVD_ScanB_0:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0000'                    ?_MTOUCH_Sensor_Enable:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0000'                    ?_Sensor_Sampled_Reset:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0000'                    ??_Sensor_Sampled_Reset:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0000'                    ?_Sensor_Service:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0000'                    ?_Sensor_Acquisition:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0000'                    ?_Sensor_RawSample_Update:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0000'                    ??_Sensor_RawSample_Update:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0000'                    ?_Sensor_setSampled:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0000'                    ??_Sensor_setSampled:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0000'                    ?_Sensor_isEnabled:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0000'                    ??_Sensor_isEnabled:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0000'                    ?_Sensor_Acq_ExecutePacket:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0000'                    ?_Sensor_setActive:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0000'                    ??_Sensor_setActive:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0000'                    ?_Sensor_setInactive:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0000'                    ??_Sensor_setInactive:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0000'                    ?_Sensor_setScanFunction:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0000'                    ??_Sensor_setScanFunction:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0000'                    ?_Sensor_Acq_ExecuteScan:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0000'                    ?_MTOUCH_Delay:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0000'                    ??_MTOUCH_Delay:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0000'                    ?_EUSART_Initialize:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0000'                    ??_EUSART_Initialize:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0000'                    ?_EUSART_Write:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0000'                    ??_EUSART_Write:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0000'                    ?_SYSTEM_Initialize:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0000'                    ?_MTOUCH_Service_Mainloop:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0000'                    ?_MTOUCH_Button_Initialize:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0000'                    ??_MTOUCH_Button_Initialize:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0000'                    ?_MTOUCH_Button_isPressed:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0000'                    ??_MTOUCH_Button_isPressed:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0000'                    ?_MTOUCH_Random:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0000'                    ??_MTOUCH_Random:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0000'                    ?_MTOUCH_Sensor_Initialize:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0000'                    ?_main:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0000'                    ?___bmul:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0000'                    ?_abs:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0000'                    ?___lwdiv:	
  2740                           ; 2 bytes @ 0x0
  2741                           
  2742  0000'                    EUSART_Write@txData:	
  2743                           ; 2 bytes @ 0x0
  2744                           
  2745  0000'                    Button_DefaultCallback@button:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0000'                    Sensor_RawSample_Update@sensor:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0000'                    Sensor_DefaultCallback@sensor:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0000'                    Sensor_setScanFunction@sensor:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0000'                    Sensor_isEnabled@sensor:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0000'                    Sensor_setActive@sensor:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0000'                    Sensor_setInactive@sensor:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0000'                    MTOUCH_Sensor_isCalibrated@sensor:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0000'                    MTOUCH_Sensor_Calibrate@sensor:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0000'                    Sensor_Sampled_Reset@sensor:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0000'                    Sensor_setSampled@sensor:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0000'                    ___bmul@multiplicand:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0000'                    abs@a:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0000'                    ___lwdiv@divisor:	
  2785                           ; 2 bytes @ 0x0
  2786                           
  2787                           
  2788                           ; 2 bytes @ 0x0
  2789  0000'                    	ds	1
  2790  0001'                    ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2791  0001'                    ??_Button_DefaultCallback:	
  2792                           ; 1 bytes @ 0x1
  2793                           
  2794  0001'                    ??_Sensor_DefaultCallback:	
  2795                           ; 1 bytes @ 0x1
  2796                           
  2797  0001'                    ??___bmul:	
  2798                           ; 1 bytes @ 0x1
  2799                           
  2800  0001'                    MTOUCH_Button_isPressed@name:	
  2801                           ; 1 bytes @ 0x1
  2802                           
  2803  0001'                    MTOUCH_Delay@i:	
  2804                           ; 1 bytes @ 0x1
  2805                           
  2806                           
  2807                           ; 1 bytes @ 0x1
  2808  0001'                    	ds	1
  2809  0002'                    ??_abs:	
  2810  0002'                    MTOUCH_Button_Initialize@name:	
  2811                           ; 1 bytes @ 0x2
  2812                           
  2813  0002'                    Button_Tick_helper@button:	
  2814                           ; 1 bytes @ 0x2
  2815                           
  2816  0002'                    MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  2817                           ; 1 bytes @ 0x2
  2818                           
  2819  0002'                    ___bmul@product:	
  2820                           ; 1 bytes @ 0x2
  2821                           
  2822  0002'                    ___lwdiv@dividend:	
  2823                           ; 1 bytes @ 0x2
  2824                           
  2825                           
  2826                           ; 2 bytes @ 0x2
  2827  0002'                    	ds	1
  2828  0003'                    ??_MTOUCH_Tick:	
  2829  0003'                    ??_MTOUCH_Button_Tick:	
  2830                           ; 1 bytes @ 0x3
  2831                           
  2832  0003'                    MTOUCH_Button_Initialize@button:	
  2833                           ; 1 bytes @ 0x3
  2834                           
  2835  0003'                    ___bmul@multiplier:	
  2836                           ; 1 bytes @ 0x3
  2837                           
  2838                           
  2839                           ; 1 bytes @ 0x3
  2840  0003'                    	ds	1
  2841  0004'                    ??_MTOUCH_Button_InitializeAll:	
  2842  0004'                    ??_MTOUCH_Sensor_wasSampled:	
  2843                           ; 1 bytes @ 0x4
  2844                           
  2845  0004'                    ??_MTOUCH_Sensor_Enable:	
  2846                           ; 1 bytes @ 0x4
  2847                           
  2848  0004'                    ??_Sensor_Acq_ExecuteScan:	
  2849                           ; 1 bytes @ 0x4
  2850                           
  2851  0004'                    ??___lwdiv:	
  2852                           ; 1 bytes @ 0x4
  2853                           
  2854  0004'                    ?_MTOUCH_Sensor_RawSample_Get:	
  2855                           ; 1 bytes @ 0x4
  2856                           
  2857                           
  2858                           ; 2 bytes @ 0x4
  2859  0004'                    	ds	1
  2860  0005'                    MTOUCH_Button_InitializeAll@button:	
  2861  0005'                    MTOUCH_Sensor_Enable@sensor:	
  2862                           ; 1 bytes @ 0x5
  2863                           
  2864  0005'                    MTOUCH_Sensor_wasSampled@sensor:	
  2865                           ; 1 bytes @ 0x5
  2866                           
  2867  0005'                    ___lwdiv@quotient:	
  2868                           ; 1 bytes @ 0x5
  2869                           
  2870                           
  2871                           ; 2 bytes @ 0x5
  2872  0005'                    	ds	1
  2873  0006'                    ??_MTOUCH_Sensor_RawSample_Get:	
  2874  0006'                    ??_MTOUCH_Sensor_Initialize:	
  2875                           ; 1 bytes @ 0x6
  2876                           
  2877  0006'                    Button_Baseline_Update@button:	
  2878                           ; 1 bytes @ 0x6
  2879                           
  2880  0006'                    Sensor_Acq_ExecuteScan@result:	
  2881                           ; 1 bytes @ 0x6
  2882                           
  2883                           
  2884                           ; 2 bytes @ 0x6
  2885  0006'                    	ds	1
  2886  0007'                    MTOUCH_Sensor_Initialize@sensor:	
  2887  0007'                    MTOUCH_Sensor_RawSample_Get@name:	
  2888                           ; 1 bytes @ 0x7
  2889                           
  2890  0007'                    ___lwdiv@counter:	
  2891                           ; 1 bytes @ 0x7
  2892                           
  2893                           
  2894                           ; 1 bytes @ 0x7
  2895  0007'                    	ds	1
  2896  0008'                    ??_MTOUCH_Sensor_InitializeAll:	
  2897  0008'                    ??_Button_Reading_Update:	
  2898                           ; 1 bytes @ 0x8
  2899                           
  2900  0008'                    ??_Button_Baseline_Initialize:	
  2901                           ; 1 bytes @ 0x8
  2902                           
  2903  0008'                    ??_Sensor_Acq_ExecutePacket:	
  2904                           ; 1 bytes @ 0x8
  2905                           
  2906  0008'                    ?___lwmod:	
  2907                           ; 1 bytes @ 0x8
  2908                           
  2909  0008'                    ___lwmod@divisor:	
  2910                           ; 2 bytes @ 0x8
  2911                           
  2912                           
  2913                           ; 2 bytes @ 0x8
  2914  0008'                    	ds	1
  2915  0009'                    ??_Sensor_Acquisition:	
  2916  0009'                    MTOUCH_Sensor_InitializeAll@sensor:	
  2917                           ; 1 bytes @ 0x9
  2918                           
  2919                           
  2920                           ; 1 bytes @ 0x9
  2921  0009'                    	ds	1
  2922  000A'                    ??_MTOUCH_Initialize:	
  2923  000A'                    ??_SYSTEM_Initialize:	
  2924                           ; 1 bytes @ 0xA
  2925                           
  2926  000A'                    Button_Reading_Update@button:	
  2927                           ; 1 bytes @ 0xA
  2928                           
  2929  000A'                    ___lwmod@dividend:	
  2930                           ; 1 bytes @ 0xA
  2931                           
  2932                           
  2933                           ; 2 bytes @ 0xA
  2934  000A'                    	ds	2
  2935  000C'                    ??___lwmod:	
  2936  000C'                    Button_Baseline_Initialize@button:	
  2937                           ; 1 bytes @ 0xC
  2938                           
  2939                           
  2940                           ; 1 bytes @ 0xC
  2941  000C'                    	ds	1
  2942  000D'                    ??_MTOUCH_Sensor_SampleAll:	
  2943  000D'                    ?_Button_State_Initializing:	
  2944                           ; 1 bytes @ 0xD
  2945                           
  2946  000D'                    ?_Button_State_NotPressed:	
  2947                           ; 1 bytes @ 0xD
  2948                           
  2949  000D'                    ?_Button_State_Pressed:	
  2950                           ; 1 bytes @ 0xD
  2951                           
  2952  000D'                    Button_State_Initializing@button:	
  2953                           ; 1 bytes @ 0xD
  2954                           
  2955  000D'                    Button_State_NotPressed@button:	
  2956                           ; 1 bytes @ 0xD
  2957                           
  2958  000D'                    Button_State_Pressed@button:	
  2959                           ; 1 bytes @ 0xD
  2960                           
  2961  000D'                    ___lwmod@counter:	
  2962                           ; 1 bytes @ 0xD
  2963                           
  2964                           
  2965                           ; 1 bytes @ 0xD
  2966  000D'                    	ds	1
  2967  000E'                    ??_MTOUCH_Service_Mainloop:	
  2968                           
  2969                           	psect	cstackBANK0
  2970  0000'                    __pcstackBANK0:	
  2971                           ; 1 bytes @ 0xE
  2972                           
  2973  0000'                    ??_Button_State_Initializing:	
  2974  0000'                    ??_Button_State_NotPressed:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0000'                    ??_Button_State_Pressed:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0000'                    ?_sprintf:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0000'                    Button_Deviation_Update@button:	
  2984                           ; 2 bytes @ 0x0
  2985                           
  2986  0000'                    Sensor_Acq_ExecutePacket@ADCON0_temp:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0000'                    sprintf@f:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992                           
  2993                           ; 2 bytes @ 0x0
  2994  0000'                    	ds	1
  2995  0001'                    Sensor_Acq_ExecutePacket@ADCON1_temp:	
  2996  0001'                    Button_Deviation_Update@deviation:	
  2997                           ; 1 bytes @ 0x1
  2998                           
  2999                           
  3000                           ; 4 bytes @ 0x1
  3001  0001'                    	ds	1
  3002  0002'                    Sensor_Acq_ExecutePacket@ADACT_temp:	
  3003                           
  3004                           ; 1 bytes @ 0x2
  3005  0002'                    	ds	1
  3006  0003'                    Sensor_Acq_ExecutePacket@GIE_state:	
  3007                           
  3008                           ; 1 bytes @ 0x3
  3009  0003'                    	ds	1
  3010  0004'                    ??_sprintf:	
  3011  0004'                    Sensor_Acq_ExecutePacket@error:	
  3012                           ; 1 bytes @ 0x4
  3013                           
  3014                           
  3015                           ; 1 bytes @ 0x4
  3016  0004'                    	ds	1
  3017  0005'                    ??_Button_Service:	
  3018  0005'                    Sensor_Acq_ExecutePacket@sensor:	
  3019                           ; 1 bytes @ 0x5
  3020                           
  3021                           
  3022                           ; 1 bytes @ 0x5
  3023  0005'                    	ds	1
  3024  0006'                    Sensor_Acquisition@retry:	
  3025                           
  3026                           ; 1 bytes @ 0x6
  3027  0006'                    	ds	1
  3028  0007'                    Button_Service@name:	
  3029  0007'                    Sensor_Acquisition@sensor:	
  3030                           ; 1 bytes @ 0x7
  3031                           
  3032                           
  3033                           ; 1 bytes @ 0x7
  3034  0007'                    	ds	1
  3035  0008'                    ??_Sensor_Service:	
  3036  0008'                    Button_Service@button:	
  3037                           ; 1 bytes @ 0x8
  3038                           
  3039  0008'                    sprintf@ap:	
  3040                           ; 1 bytes @ 0x8
  3041                           
  3042                           
  3043                           ; 1 bytes @ 0x8
  3044  0008'                    	ds	1
  3045  0009'                    ??_MTOUCH_Button_ServiceAll:	
  3046  0009'                    sprintf@flag:	
  3047                           ; 1 bytes @ 0x9
  3048                           
  3049                           
  3050                           ; 1 bytes @ 0x9
  3051  0009'                    	ds	1
  3052  000A'                    MTOUCH_Button_ServiceAll@button:	
  3053  000A'                    Sensor_Service@name:	
  3054                           ; 1 bytes @ 0xA
  3055                           
  3056  000A'                    sprintf@prec:	
  3057                           ; 1 bytes @ 0xA
  3058                           
  3059                           
  3060                           ; 1 bytes @ 0xA
  3061  000A'                    	ds	1
  3062  000B'                    Sensor_Service@error:	
  3063  000B'                    sprintf@val:	
  3064                           ; 1 bytes @ 0xB
  3065                           
  3066                           
  3067                           ; 2 bytes @ 0xB
  3068  000B'                    	ds	1
  3069  000C'                    Sensor_Service@sensor:	
  3070                           
  3071                           ; 1 bytes @ 0xC
  3072  000C'                    	ds	1
  3073  000D'                    MTOUCH_Sensor_SampleAll@sensor:	
  3074  000D'                    sprintf@sp:	
  3075                           ; 1 bytes @ 0xD
  3076                           
  3077                           
  3078                           ; 1 bytes @ 0xD
  3079  000D'                    	ds	1
  3080  000E'                    sprintf@c:	
  3081                           
  3082                           ; 1 bytes @ 0xE
  3083  000E'                    	ds	1
  3084  000F'                    ?_DisplayVal:	
  3085  000F'                    DisplayVal@val:	
  3086                           ; 1 bytes @ 0xF
  3087                           
  3088                           
  3089                           ; 2 bytes @ 0xF
  3090  000F'                    	ds	2
  3091  0011'                    ??_DisplayVal:	
  3092                           
  3093                           ; 1 bytes @ 0x11
  3094  0011'                    	ds	1
  3095  0012'                    DisplayVal@valStr:	
  3096                           
  3097                           ; 10 bytes @ 0x12
  3098  0012'                    	ds	10
  3099  001C'                    DisplayVal@str:	
  3100                           
  3101                           ; 1 bytes @ 0x1C
  3102  001C'                    	ds	1
  3103  001D'                    ??_main:	
  3104                           
  3105                           ; 1 bytes @ 0x1D
  3106  001D'                    	ds	1
  3107  001E'                    main@data:	
  3108                           
  3109                           ; 2 bytes @ 0x1E
  3110  001E'                    	ds	2
  3111  0020'                    main@i:	
  3112                           
  3113                           ; 2 bytes @ 0x20
  3114  0020'                    	ds	2
  3115                           
  3116                           	psect	maintext
  3117  0000'                    __pmaintext:	
  3118 ;;
  3119 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3120 ;;
  3121 ;; *************** function _main *****************
  3122 ;; Defined at:
  3123 ;;		line 70 in file "main.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;		None
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  i               2   32[BANK0 ] int 
  3128 ;;  data            2   30[BANK0 ] unsigned int 
  3129 ;;  duty            2    0        int 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : B1F/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3139 ;;      Params:         0       0       0       0
  3140 ;;      Locals:         0       4       0       0
  3141 ;;      Temps:          0       1       0       0
  3142 ;;      Totals:         0       5       0       0
  3143 ;;Total ram usage:        5 bytes
  3144 ;; Hardware stack levels required when called:    7
  3145 ;; This function calls:
  3146 ;;		_DisplayVal
  3147 ;;		_MTOUCH_Button_isPressed
  3148 ;;		_MTOUCH_Sensor_RawSample_Get
  3149 ;;		_MTOUCH_Service_Mainloop
  3150 ;;		_SYSTEM_Initialize
  3151 ;; This function is called by:
  3152 ;;		Startup code after reset
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           
  3157                           ;psect for function _main
  3158  0000'                    _main:	
  3159                           
  3160                           ;main.c: 73: SYSTEM_Initialize();
  3161                           
  3162                           ;incstack = 0
  3163                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3164  0000' 2000'              	fcall	_SYSTEM_Initialize
  3165  0001'                    l582:	
  3166                           ;main.c: 75: int duty;
  3167                           ;main.c: 76: mtouch_sensor_sample_t data;
  3168                           ;main.c: 78: while (1)
  3169                           
  3170                           
  3171                           ;main.c: 79: {
  3172                           ;main.c: 81: MTOUCH_Service_Mainloop();
  3173  0001' 2000'              	fcall	_MTOUCH_Service_Mainloop
  3174                           
  3175                           ;main.c: 82: data = MTOUCH_Sensor_RawSample_Get(Sensor_ANA2);
  3176  0002' 3000               	movlw	0
  3177  0003' 2000'              	fcall	_MTOUCH_Sensor_RawSample_Get
  3178  0004' 0805'              	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  3179  0005' 0020               	movlb	0	; select bank0
  3180  0006' 009F'              	movwf	main@data+1
  3181  0007' 0804'              	movf	?_MTOUCH_Sensor_RawSample_Get,w
  3182  0008' 009E'              	movwf	main@data
  3183                           
  3184                           ;main.c: 83: if(MTOUCH_Button_isPressed(Sensor_ANA2)){
  3185  0009' 3000               	movlw	0
  3186  000A' 2000'              	fcall	_MTOUCH_Button_isPressed
  3187  000B' 3A00               	xorlw	0
  3188  000C' 1903               	skipnz
  3189  000D' 281C'              	goto	l2688
  3190                           
  3191                           ;main.c: 85: if(myStatus==0){
  3192  000E' 0020               	movlb	0	; select bank0
  3193  000F' 0804'              	movf	_myStatus,w
  3194  0010' 1D03               	btfss	3,2
  3195  0011' 281E'              	goto	l2690
  3196                           
  3197                           ;main.c: 86: myStatus = 1;
  3198  0012' 0184'              	clrf	_myStatus
  3199  0013' 0A84'              	incf	_myStatus,f
  3200                           
  3201                           ;main.c: 88: if(toggleLED==0){
  3202  0014' 0805'              	movf	_toggleLED,w
  3203  0015' 1D03               	btfss	3,2
  3204  0016' 281A'              	goto	l2686
  3205                           
  3206                           ;main.c: 89: toggleLED = 1;
  3207  0017' 0185'              	clrf	_toggleLED
  3208  0018' 0A85'              	incf	_toggleLED,f
  3209                           
  3210                           ;main.c: 90: }else{
  3211  0019' 281E'              	goto	l2690
  3212  001A'                    l2686:	
  3213                           
  3214                           ;main.c: 91: toggleLED = 0;
  3215  001A' 0185'              	clrf	_toggleLED
  3216                           
  3217                           ;main.c: 92: }
  3218                           ;main.c: 94: }
  3219                           ;main.c: 96: }else{
  3220  001B' 281E'              	goto	l2690
  3221  001C'                    l2688:	
  3222                           
  3223                           ;main.c: 97: myStatus = 0;
  3224  001C' 0020               	movlb	0	; select bank0
  3225  001D' 0184'              	clrf	_myStatus
  3226  001E'                    l2690:	
  3227                           
  3228                           ;main.c: 98: }
  3229                           ;main.c: 100: if(toggleLED==1){
  3230  001E' 0305'              	decf	_toggleLED,w
  3231  001F' 1D03               	btfss	3,2
  3232  0020' 2836'              	goto	l2696
  3233                           
  3234                           ;main.c: 101: bright+=5;
  3235  0021' 3005               	movlw	5
  3236  0022' 0780'              	addwf	_bright,f
  3237  0023' 3000               	movlw	0
  3238  0024' 3D81'              	addwfc	_bright+1,f
  3239                           
  3240                           ;main.c: 102: if(bright>255)bright=255;
  3241  0025' 0801'              	movf	_bright+1,w
  3242  0026' 3A80               	xorlw	128
  3243  0027' 009D'              	movwf	??_main
  3244  0028' 3081               	movlw	129
  3245  0029' 021D'              	subwf	??_main,w
  3246  002A' 1D03               	skipz
  3247  002B' 282E'              	goto	u2305
  3248  002C' 3000               	movlw	0
  3249  002D' 0200'              	subwf	_bright,w
  3250  002E'                    u2305:	
  3251  002E' 1C03               	skipc
  3252  002F' 283E'              	goto	l590
  3253  0030' 30FF               	movlw	255
  3254  0031' 0020               	movlb	0	; select bank0
  3255  0032' 0080'              	movwf	_bright
  3256  0033' 3000               	movlw	0
  3257  0034' 0081'              	movwf	_bright+1
  3258                           
  3259                           ;main.c: 103: }else{
  3260  0035' 283E'              	goto	l590
  3261  0036'                    l2696:	
  3262                           
  3263                           ;main.c: 104: bright-=4;
  3264  0036' 30FC               	movlw	252
  3265  0037' 0780'              	addwf	_bright,f
  3266  0038' 30FF               	movlw	255
  3267  0039' 3D81'              	addwfc	_bright+1,f
  3268                           
  3269                           ;main.c: 105: if(bright<0)bright=0;
  3270  003A' 1F81'              	btfss	_bright+1,7
  3271  003B' 283E'              	goto	l590
  3272  003C' 0180'              	clrf	_bright
  3273  003D' 0181'              	clrf	_bright+1
  3274  003E'                    l590:	
  3275                           
  3276                           ;main.c: 106: }
  3277                           ;main.c: 109: for(int i=0; i<255; i++){
  3278  003E' 0020               	movlb	0	; select bank0
  3279  003F' 01A0'              	clrf	main@i
  3280  0040' 01A1'              	clrf	main@i+1
  3281  0041' 0821'              	movf	main@i+1,w
  3282  0042' 3A80               	xorlw	128
  3283  0043' 009D'              	movwf	??_main
  3284  0044' 3080               	movlw	128
  3285  0045' 021D'              	subwf	??_main,w
  3286  0046' 1D03               	skipz
  3287  0047' 284A'              	goto	u2325
  3288  0048' 30FF               	movlw	255
  3289  0049' 0220'              	subwf	main@i,w
  3290  004A'                    u2325:	
  3291  004A' 1803               	btfsc	3,0
  3292  004B' 286D'              	goto	l2712
  3293  004C'                    l2706:	
  3294                           
  3295                           ;main.c: 110: if(bright >i){
  3296  004C' 0020               	movlb	0	; select bank0
  3297  004D' 0821'              	movf	main@i+1,w
  3298  004E' 3A80               	xorlw	128
  3299  004F' 009D'              	movwf	??_main
  3300  0050' 0801'              	movf	_bright+1,w
  3301  0051' 3A80               	xorlw	128
  3302  0052' 021D'              	subwf	??_main,w
  3303  0053' 1D03               	skipz
  3304  0054' 2857'              	goto	u2335
  3305  0055' 0800'              	movf	_bright,w
  3306  0056' 0220'              	subwf	main@i,w
  3307  0057'                    u2335:	
  3308  0057' 1803               	skipnc
  3309  0058' 285C'              	goto	l594
  3310                           
  3311                           ;main.c: 111: PORTAbits.RA5 = 1;
  3312  0059' 0020               	movlb	0	; select bank0
  3313  005A' 168C               	bsf	12,5	;volatile
  3314                           
  3315                           ;main.c: 112: }else{
  3316  005B' 285E'              	goto	l2710
  3317  005C'                    l594:	
  3318                           
  3319                           ;main.c: 113: PORTAbits.RA5 = 0;
  3320  005C' 0020               	movlb	0	; select bank0
  3321  005D' 128C               	bcf	12,5	;volatile
  3322  005E'                    l2710:	
  3323  005E' 3001               	movlw	1
  3324  005F' 07A0'              	addwf	main@i,f
  3325  0060' 3000               	movlw	0
  3326  0061' 3DA1'              	addwfc	main@i+1,f
  3327  0062' 0821'              	movf	main@i+1,w
  3328  0063' 3A80               	xorlw	128
  3329  0064' 009D'              	movwf	??_main
  3330  0065' 3080               	movlw	128
  3331  0066' 021D'              	subwf	??_main,w
  3332  0067' 1D03               	skipz
  3333  0068' 286B'              	goto	u2345
  3334  0069' 30FF               	movlw	255
  3335  006A' 0220'              	subwf	main@i,w
  3336  006B'                    u2345:	
  3337  006B' 1C03               	skipc
  3338  006C' 284C'              	goto	l2706
  3339  006D'                    l2712:	
  3340                           
  3341                           ;main.c: 114: }
  3342                           ;main.c: 115: }
  3343                           ;main.c: 117: DisplayVal(data);
  3344  006D' 0020               	movlb	0	; select bank0
  3345  006E' 081F'              	movf	main@data+1,w
  3346  006F' 0090'              	movwf	DisplayVal@val+1
  3347  0070' 081E'              	movf	main@data,w
  3348  0071' 008F'              	movwf	DisplayVal@val
  3349  0072' 2000'              	fcall	_DisplayVal
  3350  0073' 2801'              	goto	l582
  3351  0074'                    __end_of_main:	
  3352                           
  3353                           	psect	text1
  3354  0000'                    __ptext1:	
  3355 ;; *************** function _SYSTEM_Initialize *****************
  3356 ;; Defined at:
  3357 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3371 ;;      Params:         0       0       0       0
  3372 ;;      Locals:         0       0       0       0
  3373 ;;      Temps:          0       0       0       0
  3374 ;;      Totals:         0       0       0       0
  3375 ;;Total ram usage:        0 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    5
  3378 ;; This function calls:
  3379 ;;		_EUSART_Initialize
  3380 ;;		_MTOUCH_Initialize
  3381 ;;		_OSCILLATOR_Initialize
  3382 ;;		_PIN_MANAGER_Initialize
  3383 ;;		_PMD_Initialize
  3384 ;;		_WDT_Initialize
  3385 ;; This function is called by:
  3386 ;;		_main
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           
  3391                           ;psect for function _SYSTEM_Initialize
  3392  0000'                    _SYSTEM_Initialize:	
  3393                           
  3394                           ;mcc.c: 53: PMD_Initialize();
  3395                           
  3396                           ;incstack = 0
  3397                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3398  0000' 2000'              	fcall	_PMD_Initialize
  3399                           
  3400                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  3401  0001' 2000'              	fcall	_PIN_MANAGER_Initialize
  3402                           
  3403                           ;mcc.c: 55: OSCILLATOR_Initialize();
  3404  0002' 2000'              	fcall	_OSCILLATOR_Initialize
  3405                           
  3406                           ;mcc.c: 56: WDT_Initialize();
  3407  0003' 2000'              	fcall	_WDT_Initialize
  3408                           
  3409                           ;mcc.c: 57: EUSART_Initialize();
  3410  0004' 2000'              	fcall	_EUSART_Initialize
  3411                           
  3412                           ;mcc.c: 58: MTOUCH_Initialize();
  3413  0005' 2000'              	fcall	_MTOUCH_Initialize
  3414  0006' 0008               	return
  3415  0007'                    __end_of_SYSTEM_Initialize:	
  3416                           
  3417                           	psect	text2
  3418  0000'                    __ptext2:	
  3419 ;; *************** function _WDT_Initialize *****************
  3420 ;; Defined at:
  3421 ;;		line 75 in file "mcc_generated_files/mcc.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3435 ;;      Params:         0       0       0       0
  3436 ;;      Locals:         0       0       0       0
  3437 ;;      Temps:          0       0       0       0
  3438 ;;      Totals:         0       0       0       0
  3439 ;;Total ram usage:        0 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; This function calls:
  3442 ;;		Nothing
  3443 ;; This function is called by:
  3444 ;;		_SYSTEM_Initialize
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           
  3449                           ;psect for function _WDT_Initialize
  3450  0000'                    _WDT_Initialize:	
  3451                           
  3452                           ;mcc.c: 78: WDTCON = 0x16;
  3453                           
  3454                           ;incstack = 0
  3455                           ; Regs used in _WDT_Initialize: [wreg]
  3456  0000' 3016               	movlw	22
  3457  0001' 0021               	movlb	1	; select bank1
  3458  0002' 0097               	movwf	23	;volatile
  3459  0003' 0008               	return
  3460  0004'                    __end_of_WDT_Initialize:	
  3461                           
  3462                           	psect	text3
  3463  0000'                    __ptext3:	
  3464 ;; *************** function _PMD_Initialize *****************
  3465 ;; Defined at:
  3466 ;;		line 81 in file "mcc_generated_files/mcc.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;		None
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		status,2
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3480 ;;      Params:         0       0       0       0
  3481 ;;      Locals:         0       0       0       0
  3482 ;;      Temps:          0       0       0       0
  3483 ;;      Totals:         0       0       0       0
  3484 ;;Total ram usage:        0 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_SYSTEM_Initialize
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _PMD_Initialize
  3495  0000'                    _PMD_Initialize:	
  3496                           
  3497                           ;mcc.c: 84: PMD0 = 0x00;
  3498                           
  3499                           ;incstack = 0
  3500                           ; Regs used in _PMD_Initialize: [status,2]
  3501  0000' 0032               	movlb	18	; select bank18
  3502  0001' 0191               	clrf	17	;volatile
  3503                           
  3504                           ;mcc.c: 86: PMD1 = 0x00;
  3505  0002' 0192               	clrf	18	;volatile
  3506                           
  3507                           ;mcc.c: 88: PMD2 = 0x00;
  3508  0003' 0193               	clrf	19	;volatile
  3509                           
  3510                           ;mcc.c: 90: PMD3 = 0x00;
  3511  0004' 0194               	clrf	20	;volatile
  3512                           
  3513                           ;mcc.c: 92: PMD4 = 0x00;
  3514  0005' 0195               	clrf	21	;volatile
  3515                           
  3516                           ;mcc.c: 94: PMD5 = 0x00;
  3517  0006' 0196               	clrf	22	;volatile
  3518  0007' 0008               	return
  3519  0008'                    __end_of_PMD_Initialize:	
  3520                           
  3521                           	psect	text4
  3522  0000'                    __ptext4:	
  3523 ;; *************** function _PIN_MANAGER_Initialize *****************
  3524 ;; Defined at:
  3525 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;		None
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3539 ;;      Params:         0       0       0       0
  3540 ;;      Locals:         0       0       0       0
  3541 ;;      Temps:          0       0       0       0
  3542 ;;      Totals:         0       0       0       0
  3543 ;;Total ram usage:        0 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_SYSTEM_Initialize
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _PIN_MANAGER_Initialize
  3554  0000'                    _PIN_MANAGER_Initialize:	
  3555                           
  3556                           ;pin_manager.c: 62: LATA = 0x00;
  3557                           
  3558                           ;incstack = 0
  3559                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  3560  0000' 0022               	movlb	2	; select bank2
  3561  0001' 018C               	clrf	12	;volatile
  3562                           
  3563                           ;pin_manager.c: 67: TRISA = 0x05;
  3564  0002' 3005               	movlw	5
  3565  0003' 0021               	movlb	1	; select bank1
  3566  0004' 008C               	movwf	12	;volatile
  3567                           
  3568                           ;pin_manager.c: 72: ANSELA = 0x37;
  3569  0005' 3037               	movlw	55
  3570  0006' 0023               	movlb	3	; select bank3
  3571  0007' 008C               	movwf	12	;volatile
  3572                           
  3573                           ;pin_manager.c: 77: WPUA = 0x00;
  3574  0008' 0024               	movlb	4	; select bank4
  3575  0009' 018C               	clrf	12	;volatile
  3576                           
  3577                           ;pin_manager.c: 82: ODCONA = 0x00;
  3578  000A' 0025               	movlb	5	; select bank5
  3579  000B' 018C               	clrf	12	;volatile
  3580                           
  3581                           ;pin_manager.c: 91: RA4PPSbits.RA4PPS = 0x14;
  3582  000C' 003D               	movlb	29	; select bank29
  3583  000D' 0814               	movf	20,w	;volatile
  3584  000E' 39E0               	andlw	-32
  3585  000F' 3814               	iorlw	20
  3586  0010' 0094               	movwf	20	;volatile
  3587  0011' 0008               	return
  3588  0012'                    __end_of_PIN_MANAGER_Initialize:	
  3589                           
  3590                           	psect	text5
  3591  0000'                    __ptext5:	
  3592 ;; *************** function _OSCILLATOR_Initialize *****************
  3593 ;; Defined at:
  3594 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  1    wreg      void 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3608 ;;      Params:         0       0       0       0
  3609 ;;      Locals:         0       0       0       0
  3610 ;;      Temps:          0       0       0       0
  3611 ;;      Totals:         0       0       0       0
  3612 ;;Total ram usage:        0 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; This function calls:
  3615 ;;		Nothing
  3616 ;; This function is called by:
  3617 ;;		_SYSTEM_Initialize
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           
  3622                           ;psect for function _OSCILLATOR_Initialize
  3623  0000'                    _OSCILLATOR_Initialize:	
  3624                           
  3625                           ;mcc.c: 64: OSCCON1 = 0x60;
  3626                           
  3627                           ;incstack = 0
  3628                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3629  0000' 3060               	movlw	96
  3630  0001' 0032               	movlb	18	; select bank18
  3631  0002' 0099               	movwf	25	;volatile
  3632                           
  3633                           ;mcc.c: 66: OSCCON3 = 0x00;
  3634  0003' 019B               	clrf	27	;volatile
  3635                           
  3636                           ;mcc.c: 68: OSCEN = 0x00;
  3637  0004' 019D               	clrf	29	;volatile
  3638                           
  3639                           ;mcc.c: 70: OSCFRQ = 0x06;
  3640  0005' 3006               	movlw	6
  3641  0006' 009F               	movwf	31	;volatile
  3642                           
  3643                           ;mcc.c: 72: OSCTUNE = 0x00;
  3644  0007' 019E               	clrf	30	;volatile
  3645  0008' 0008               	return
  3646  0009'                    __end_of_OSCILLATOR_Initialize:	
  3647                           
  3648                           	psect	text6
  3649  0000'                    __ptext6:	
  3650 ;; *************** function _MTOUCH_Initialize *****************
  3651 ;; Defined at:
  3652 ;;		line 67 in file "mcc_generated_files/mtouch/mtouch.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      void 
  3659 ;; Registers used:
  3660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3666 ;;      Params:         0       0       0       0
  3667 ;;      Locals:         0       0       0       0
  3668 ;;      Temps:          0       0       0       0
  3669 ;;      Totals:         0       0       0       0
  3670 ;;Total ram usage:        0 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    4
  3673 ;; This function calls:
  3674 ;;		_MTOUCH_Button_InitializeAll
  3675 ;;		_MTOUCH_Sensor_InitializeAll
  3676 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3677 ;;		_MTOUCH_Sensor_Scan_Initialize
  3678 ;; This function is called by:
  3679 ;;		_SYSTEM_Initialize
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _MTOUCH_Initialize
  3685  0000'                    _MTOUCH_Initialize:	
  3686                           
  3687                           ;mtouch.c: 69: MTOUCH_Sensor_InitializeAll();
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3691  0000' 2000'              	fcall	_MTOUCH_Sensor_InitializeAll
  3692                           
  3693                           ;mtouch.c: 70: MTOUCH_Button_InitializeAll();
  3694  0001' 2000'              	fcall	_MTOUCH_Button_InitializeAll
  3695                           
  3696                           ;mtouch.c: 71: MTOUCH_Sensor_Sampled_ResetAll();
  3697  0002' 2000'              	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  3698                           
  3699                           ;mtouch.c: 72: MTOUCH_Sensor_Scan_Initialize();
  3700  0003' 2000'              	fcall	_MTOUCH_Sensor_Scan_Initialize
  3701  0004' 0008               	return
  3702  0005'                    __end_of_MTOUCH_Initialize:	
  3703                           
  3704                           	psect	text7
  3705  0000'                    __ptext7:	
  3706 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  3707 ;; Defined at:
  3708 ;;		line 166 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  sensor          1    9[COMMON] enum E5394
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      void 
  3715 ;; Registers used:
  3716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3722 ;;      Params:         0       0       0       0
  3723 ;;      Locals:         1       0       0       0
  3724 ;;      Temps:          1       0       0       0
  3725 ;;      Totals:         2       0       0       0
  3726 ;;Total ram usage:        2 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    3
  3729 ;; This function calls:
  3730 ;;		_MTOUCH_Sensor_Initialize
  3731 ;; This function is called by:
  3732 ;;		_MTOUCH_Initialize
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           
  3737                           ;psect for function _MTOUCH_Sensor_InitializeAll
  3738  0000'                    _MTOUCH_Sensor_InitializeAll:	
  3739                           
  3740                           ;mtouch_sensor.c: 168: enum mtouch_sensor_names sensor;
  3741                           ;mtouch_sensor.c: 169: for (sensor = 0; sensor < 1; sensor++)
  3742                           
  3743                           ;incstack = 0
  3744                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3745  0000' 0189'              	clrf	MTOUCH_Sensor_InitializeAll@sensor
  3746  0001'                    L1:	
  3747  0001' 0809'              	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  3748  0002' 1D03               	btfss	3,2
  3749  0003' 0008               	return
  3750                           
  3751                           ;mtouch_sensor.c: 170: {
  3752                           ;mtouch_sensor.c: 171: MTOUCH_Sensor_Initialize(sensor);
  3753  0004' 0809'              	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  3754  0005' 2000'              	fcall	_MTOUCH_Sensor_Initialize
  3755  0006' 3001               	movlw	1
  3756  0007' 0088'              	movwf	??_MTOUCH_Sensor_InitializeAll
  3757  0008' 0808'              	movf	??_MTOUCH_Sensor_InitializeAll,w
  3758  0009' 0789'              	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  3759  000A' 2801'              	goto	L1
  3760  000B'                    __end_of_MTOUCH_Sensor_InitializeAll:	
  3761                           
  3762                           	psect	text8
  3763  0000'                    __ptext8:	
  3764 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  3765 ;; Defined at:
  3766 ;;		line 142 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;  sensor          1    wreg     enum E5394
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  sensor          1    7[COMMON] enum E5394
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      enum E5396
  3773 ;; Registers used:
  3774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3780 ;;      Params:         0       0       0       0
  3781 ;;      Locals:         1       0       0       0
  3782 ;;      Temps:          1       0       0       0
  3783 ;;      Totals:         2       0       0       0
  3784 ;;Total ram usage:        2 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    2
  3787 ;; This function calls:
  3788 ;;		_MTOUCH_Sensor_Enable
  3789 ;;		_Sensor_Sampled_Reset
  3790 ;;		___bmul
  3791 ;; This function is called by:
  3792 ;;		_MTOUCH_Sensor_InitializeAll
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           
  3797                           ;psect for function _MTOUCH_Sensor_Initialize
  3798  0000'                    _MTOUCH_Sensor_Initialize:	
  3799                           
  3800                           ;incstack = 0
  3801                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3802                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  3803  0000' 0087'              	movwf	MTOUCH_Sensor_Initialize@sensor
  3804                           
  3805                           ;mtouch_sensor.c: 144: switch(sensor)
  3806  0001' 2809'              	goto	l2276
  3807  0002'                    l388:	
  3808                           ;mtouch_sensor.c: 145: {
  3809                           ;mtouch_sensor.c: 146: case 0:
  3810                           
  3811                           
  3812                           ;mtouch_sensor.c: 147: WPUAbits.WPUA2 = 0;
  3813  0002' 0024               	movlb	4	; select bank4
  3814  0003' 110C               	bcf	12,2	;volatile
  3815                           
  3816                           ;mtouch_sensor.c: 148: ANSELAbits.ANSA2 = 0;
  3817  0004' 0023               	movlb	3	; select bank3
  3818  0005' 110C               	bcf	12,2	;volatile
  3819                           
  3820                           ;mtouch_sensor.c: 149: TRISAbits.TRISA2 = 0;
  3821  0006' 0021               	movlb	1	; select bank1
  3822  0007' 110C               	bcf	12,2	;volatile
  3823                           
  3824                           ;mtouch_sensor.c: 150: break;
  3825  0008' 280E'              	goto	l2278
  3826  0009'                    l2276:	
  3827                           ;mtouch_sensor.c: 152: }
  3828                           
  3829                           ;	Return value of _MTOUCH_Sensor_Initialize is never used
  3830                           
  3831                           ;mtouch_sensor.c: 151: default: return MTOUCH_SENSOR_ERROR_invalid_index;
  3832                           
  3833  0009' 0807'              	movf	MTOUCH_Sensor_Initialize@sensor,w
  3834                           
  3835                           ; Switch size 1, requested type "space"
  3836                           ; Number of cases is 1, Range of values is 0 to 0
  3837                           ; switch strategies available:
  3838                           ; Name         Instructions Cycles
  3839                           ; simple_byte            4     3 (average)
  3840                           ; direct_byte            8     6 (fixed)
  3841                           ; jumptable            260     6 (fixed)
  3842                           ;	Chosen strategy is simple_byte
  3843  000A' 3A00               	xorlw	0	; case 0
  3844  000B' 1903               	skipnz
  3845  000C' 2802'              	goto	l388
  3846  000D' 2819'              	goto	l391
  3847  000E'                    l2278:	
  3848                           
  3849                           ;mtouch_sensor.c: 154: MTOUCH_Sensor_Enable(sensor);
  3850  000E' 0807'              	movf	MTOUCH_Sensor_Initialize@sensor,w
  3851  000F' 2000'              	fcall	_MTOUCH_Sensor_Enable
  3852                           
  3853                           ;mtouch_sensor.c: 155: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  3854  0010' 3009               	movlw	9
  3855  0011' 0086'              	movwf	??_MTOUCH_Sensor_Initialize
  3856  0012' 0806'              	movf	??_MTOUCH_Sensor_Initialize,w
  3857  0013' 0080'              	movwf	___bmul@multiplicand
  3858  0014' 0807'              	movf	MTOUCH_Sensor_Initialize@sensor,w
  3859  0015' 2000'              	fcall	___bmul
  3860  0016' 3E00'              	addlw	(low (_mtouch_sensor| 0))& (0+255)
  3861  0017' 2000'              	fcall	_Sensor_Sampled_Reset
  3862  0018' 0008               	return
  3863  0019'                    l391:	
  3864                           ;mtouch_sensor.c: 157: return MTOUCH_SENSOR_ERROR_none;
  3865                           ;	Return value of _MTOUCH_Sensor_Initialize is never used
  3866                           
  3867  0019' 0008               	return
  3868  001A'                    __end_of_MTOUCH_Sensor_Initialize:	
  3869                           
  3870                           	psect	text9
  3871  0000'                    __ptext9:	
  3872 ;; *************** function _MTOUCH_Sensor_Enable *****************
  3873 ;; Defined at:
  3874 ;;		line 454 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  sensor          1    wreg     enum E5394
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  sensor          1    5[COMMON] enum E5394
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3888 ;;      Params:         0       0       0       0
  3889 ;;      Locals:         1       0       0       0
  3890 ;;      Temps:          1       0       0       0
  3891 ;;      Totals:         2       0       0       0
  3892 ;;Total ram usage:        2 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    1
  3895 ;; This function calls:
  3896 ;;		___bmul
  3897 ;; This function is called by:
  3898 ;;		_MTOUCH_Sensor_Initialize
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _MTOUCH_Sensor_Enable
  3904  0000'                    _MTOUCH_Sensor_Enable:	
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3908                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  3909  0000' 0085'              	movwf	MTOUCH_Sensor_Enable@sensor
  3910                           
  3911                           ;mtouch_sensor.c: 456: if(sensor < 1)
  3912  0001' 0805'              	movf	MTOUCH_Sensor_Enable@sensor,w
  3913  0002' 1D03               	btfss	3,2
  3914  0003' 0008               	return
  3915                           
  3916                           ;mtouch_sensor.c: 457: mtouch_sensor[sensor].enabled = 1;
  3917  0004' 3009               	movlw	9
  3918  0005' 0084'              	movwf	??_MTOUCH_Sensor_Enable
  3919  0006' 0804'              	movf	??_MTOUCH_Sensor_Enable,w
  3920  0007' 0080'              	movwf	___bmul@multiplicand
  3921  0008' 0805'              	movf	MTOUCH_Sensor_Enable@sensor,w
  3922  0009' 2000'              	fcall	___bmul
  3923  000A' 3E08               	addlw	8
  3924  000B' 3E00'              	addlw	(low (_mtouch_sensor| 0))& (0+255)
  3925  000C' 0086               	movwf	6
  3926  000D' 0187               	clrf	7
  3927  000E' 1401               	bsf	1,0
  3928  000F' 0008               	return
  3929  0010'                    __end_of_MTOUCH_Sensor_Enable:	
  3930                           
  3931                           	psect	text10
  3932  0000'                    __ptext10:	
  3933 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  3934 ;; Defined at:
  3935 ;;		line 142 in file "mcc_generated_files/mtouch/mtouch_button.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  button          1    5[COMMON] enum E5405
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3949 ;;      Params:         0       0       0       0
  3950 ;;      Locals:         1       0       0       0
  3951 ;;      Temps:          1       0       0       0
  3952 ;;      Totals:         2       0       0       0
  3953 ;;Total ram usage:        2 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    2
  3956 ;; This function calls:
  3957 ;;		_MTOUCH_Button_Initialize
  3958 ;; This function is called by:
  3959 ;;		_MTOUCH_Initialize
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           
  3964                           ;psect for function _MTOUCH_Button_InitializeAll
  3965  0000'                    _MTOUCH_Button_InitializeAll:	
  3966                           
  3967                           ;mtouch_button.c: 144: enum mtouch_button_names button;
  3968                           ;mtouch_button.c: 146: __builtin_memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_b
      +                          utton_init));
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3972  0000' 3000'              	movlw	low (_mtouch_button| 0)
  3973  0001' 0086               	movwf	6
  3974  0002' 0187               	clrf	7
  3975  0003' 3000'              	movlw	low (_mtouch_button_init| (0+32768))
  3976  0004' 0084               	movwf	4
  3977  0005' 3000'              	movlw	high (_mtouch_button_init| (0+32768))
  3978  0006' 0085               	movwf	5
  3979  0007' 3010               	movlw	16
  3980  0008' 0084'              	movwf	??_MTOUCH_Button_InitializeAll
  3981  0009' 0804'              	movf	??_MTOUCH_Button_InitializeAll,w
  3982  000A' 1903               	skipnz
  3983  000B' 2810'              	goto	l2334
  3984  000C'                    u165m0:	
  3985  000C' 0012               	moviw fsr0++
  3986  000D' 001E               	movwi fsr1++
  3987  000E' 0B84'              	decfsz	??_MTOUCH_Button_InitializeAll,f
  3988  000F' 280C'              	goto	u165m0
  3989  0010'                    l2334:	
  3990                           
  3991                           ;mtouch_button.c: 148: for (button = 0; button < 1; button++)
  3992  0010' 0185'              	clrf	MTOUCH_Button_InitializeAll@button
  3993  0011'                    L2:	
  3994  0011' 0805'              	movf	MTOUCH_Button_InitializeAll@button,w
  3995  0012' 1D03               	btfss	3,2
  3996  0013' 0008               	return
  3997                           
  3998                           ;mtouch_button.c: 149: {
  3999                           ;mtouch_button.c: 150: MTOUCH_Button_Initialize(button);
  4000  0014' 0805'              	movf	MTOUCH_Button_InitializeAll@button,w
  4001  0015' 2000'              	fcall	_MTOUCH_Button_Initialize
  4002  0016' 3001               	movlw	1
  4003  0017' 0084'              	movwf	??_MTOUCH_Button_InitializeAll
  4004  0018' 0804'              	movf	??_MTOUCH_Button_InitializeAll,w
  4005  0019' 0785'              	addwf	MTOUCH_Button_InitializeAll@button,f
  4006  001A' 2811'              	goto	L2
  4007  001B'                    __end_of_MTOUCH_Button_InitializeAll:	
  4008                           
  4009                           	psect	text11
  4010  0000'                    __ptext11:	
  4011 ;; *************** function _EUSART_Initialize *****************
  4012 ;; Defined at:
  4013 ;;		line 55 in file "mcc_generated_files/eusart.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      void 
  4020 ;; Registers used:
  4021 ;;		wreg
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4027 ;;      Params:         0       0       0       0
  4028 ;;      Locals:         0       0       0       0
  4029 ;;      Temps:          0       0       0       0
  4030 ;;      Totals:         0       0       0       0
  4031 ;;Total ram usage:        0 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; This function calls:
  4034 ;;		Nothing
  4035 ;; This function is called by:
  4036 ;;		_SYSTEM_Initialize
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           
  4041                           ;psect for function _EUSART_Initialize
  4042  0000'                    _EUSART_Initialize:	
  4043                           
  4044                           ;eusart.c: 60: BAUD1CON = 0x08;
  4045                           
  4046                           ;incstack = 0
  4047                           ; Regs used in _EUSART_Initialize: [wreg]
  4048  0000' 3008               	movlw	8
  4049  0001' 0023               	movlb	3	; select bank3
  4050  0002' 009F               	movwf	31	;volatile
  4051                           
  4052                           ;eusart.c: 63: RC1STA = 0x80;
  4053  0003' 3080               	movlw	128
  4054  0004' 009D               	movwf	29	;volatile
  4055                           
  4056                           ;eusart.c: 66: TX1STA = 0x24;
  4057  0005' 3024               	movlw	36
  4058  0006' 009E               	movwf	30	;volatile
  4059                           
  4060                           ;eusart.c: 69: SP1BRGL = 0xA0;
  4061  0007' 30A0               	movlw	160
  4062  0008' 009B               	movwf	27	;volatile
  4063                           
  4064                           ;eusart.c: 72: SP1BRGH = 0x01;
  4065  0009' 3001               	movlw	1
  4066  000A' 009C               	movwf	28	;volatile
  4067  000B' 0008               	return
  4068  000C'                    __end_of_EUSART_Initialize:	
  4069                           
  4070                           	psect	text12
  4071  0000'                    __ptext12:	
  4072 ;; *************** function _MTOUCH_Service_Mainloop *****************
  4073 ;; Defined at:
  4074 ;;		line 81 in file "mcc_generated_files/mtouch/mtouch.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;		None
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      unsigned char 
  4081 ;; Registers used:
  4082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4088 ;;      Params:         0       0       0       0
  4089 ;;      Locals:         0       0       0       0
  4090 ;;      Temps:          0       0       0       0
  4091 ;;      Totals:         0       0       0       0
  4092 ;;Total ram usage:        0 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    6
  4095 ;; This function calls:
  4096 ;;		_MTOUCH_Button_ServiceAll
  4097 ;;		_MTOUCH_Sensor_SampleAll
  4098 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4099 ;;		_MTOUCH_Tick
  4100 ;; This function is called by:
  4101 ;;		_main
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           
  4106                           ;psect for function _MTOUCH_Service_Mainloop
  4107  0000'                    _MTOUCH_Service_Mainloop:	
  4108                           
  4109                           ;mtouch.c: 85: mtouch_time_toScan = 1;
  4110                           
  4111                           ;incstack = 0
  4112                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4113  0000' 0020               	movlb	0	; select bank0
  4114  0001' 018B'              	clrf	_mtouch_time_toScan
  4115  0002' 0A8B'              	incf	_mtouch_time_toScan,f
  4116                           
  4117                           ;mtouch.c: 87: if(mtouch_time_toScan)
  4118  0003' 080B'              	movf	_mtouch_time_toScan,w
  4119  0004' 1903               	btfsc	3,2
  4120  0005' 0008               	return
  4121                           
  4122                           ;mtouch.c: 88: {
  4123                           ;mtouch.c: 89: if(MTOUCH_Sensor_SampleAll() == 0)
  4124  0006' 2000'              	fcall	_MTOUCH_Sensor_SampleAll
  4125  0007' 3A00               	xorlw	0
  4126  0008' 1903               	btfsc	3,2
  4127  0009' 0008               	return
  4128                           
  4129                           ;mtouch.c: 91: MTOUCH_Button_ServiceAll();
  4130                           
  4131                           ;mtouch.c: 90: return 0;
  4132                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  4133  000A' 2000'              	fcall	_MTOUCH_Button_ServiceAll
  4134                           
  4135                           ;mtouch.c: 92: MTOUCH_Sensor_Sampled_ResetAll();
  4136  000B' 2000'              	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4137                           
  4138                           ;mtouch.c: 93: MTOUCH_Tick();
  4139  000C' 2000'              	fcall	_MTOUCH_Tick
  4140                           
  4141                           ;mtouch.c: 94: mtouch_time_toScan = 0;
  4142  000D' 0020               	movlb	0	; select bank0
  4143  000E' 018B'              	clrf	_mtouch_time_toScan
  4144                           
  4145                           ;mtouch.c: 97: else
  4146                           ;mtouch.c: 98: {
  4147                           ;mtouch.c: 99: return 0;
  4148                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  4149                           
  4150                           ;mtouch.c: 96: }
  4151                           
  4152                           ;mtouch.c: 95: return 1;
  4153                           ;	Return value of _MTOUCH_Service_Mainloop is never used
  4154  000F' 0008               	return
  4155  0010'                    __end_of_MTOUCH_Service_Mainloop:	
  4156                           
  4157                           	psect	text13
  4158  0000'                    __ptext13:	
  4159 ;; *************** function _MTOUCH_Tick *****************
  4160 ;; Defined at:
  4161 ;;		line 108 in file "mcc_generated_files/mtouch/mtouch.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4175 ;;      Params:         0       0       0       0
  4176 ;;      Locals:         0       0       0       0
  4177 ;;      Temps:          0       0       0       0
  4178 ;;      Totals:         0       0       0       0
  4179 ;;Total ram usage:        0 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    2
  4182 ;; This function calls:
  4183 ;;		_MTOUCH_Button_Tick
  4184 ;; This function is called by:
  4185 ;;		_MTOUCH_Service_Mainloop
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _MTOUCH_Tick
  4191  0000'                    _MTOUCH_Tick:	
  4192                           
  4193                           ;mtouch.c: 110: MTOUCH_Button_Tick();
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4197  0000' 2000'              	fcall	_MTOUCH_Button_Tick
  4198  0001' 0008               	return
  4199  0002'                    __end_of_MTOUCH_Tick:	
  4200                           
  4201                           	psect	text14
  4202  0000'                    __ptext14:	
  4203 ;; *************** function _MTOUCH_Button_Tick *****************
  4204 ;; Defined at:
  4205 ;;		line 264 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;		None
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  1    wreg      void 
  4212 ;; Registers used:
  4213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4219 ;;      Params:         0       0       0       0
  4220 ;;      Locals:         0       0       0       0
  4221 ;;      Temps:          0       0       0       0
  4222 ;;      Totals:         0       0       0       0
  4223 ;;Total ram usage:        0 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    1
  4226 ;; This function calls:
  4227 ;;		_Button_Tick_helper
  4228 ;; This function is called by:
  4229 ;;		_MTOUCH_Tick
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           
  4234                           ;psect for function _MTOUCH_Button_Tick
  4235  0000'                    _MTOUCH_Button_Tick:	
  4236                           
  4237                           ;mtouch_button.c: 266: Button_Tick_helper(&mtouch_button[0]);
  4238                           
  4239                           ;incstack = 0
  4240                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4241  0000' 3000'              	movlw	(low (_mtouch_button| 0))& (0+255)
  4242  0001' 2000'              	fcall	_Button_Tick_helper
  4243  0002' 0008               	return
  4244  0003'                    __end_of_MTOUCH_Button_Tick:	
  4245                           
  4246                           	psect	text15
  4247  0000'                    __ptext15:	
  4248 ;; *************** function _Button_Tick_helper *****************
  4249 ;; Defined at:
  4250 ;;		line 268 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  button          1    wreg     PTR struct .
  4253 ;;		 -> mtouch_button(16), 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  button          1    2[COMMON] PTR struct .
  4256 ;;		 -> mtouch_button(16), 
  4257 ;; Return value:  Size  Location     Type
  4258 ;;                  1    wreg      void 
  4259 ;; Registers used:
  4260 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4261 ;; Tracked objects:
  4262 ;;		On entry : 0/0
  4263 ;;		On exit  : 0/0
  4264 ;;		Unchanged: 0/0
  4265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4266 ;;      Params:         0       0       0       0
  4267 ;;      Locals:         1       0       0       0
  4268 ;;      Temps:          2       0       0       0
  4269 ;;      Totals:         3       0       0       0
  4270 ;;Total ram usage:        3 bytes
  4271 ;; Hardware stack levels used:    1
  4272 ;; This function calls:
  4273 ;;		Nothing
  4274 ;; This function is called by:
  4275 ;;		_MTOUCH_Button_Tick
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           
  4280                           ;psect for function _Button_Tick_helper
  4281  0000'                    _Button_Tick_helper:	
  4282                           
  4283                           ;incstack = 0
  4284                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  4285                           ;Button_Tick_helper@button stored from wreg
  4286  0000' 0082'              	movwf	Button_Tick_helper@button
  4287                           
  4288                           ;mtouch_button.c: 271: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  4289  0001' 0802'              	movf	Button_Tick_helper@button,w
  4290  0002' 3E02               	addlw	2
  4291  0003' 0086               	movwf	6
  4292  0004' 0187               	clrf	7
  4293  0005' 3002               	movlw	2
  4294  0006' 0601               	xorwf	1,w
  4295  0007' 1D03               	btfss	3,2
  4296  0008' 0008               	return
  4297                           
  4298                           ;mtouch_button.c: 272: {
  4299                           ;mtouch_button.c: 273: (button->counter)++;
  4300  0009' 0802'              	movf	Button_Tick_helper@button,w
  4301  000A' 3E0A               	addlw	10
  4302  000B' 0086               	movwf	6
  4303  000C' 0187               	clrf	7
  4304  000D' 3001               	movlw	1
  4305  000E' 0781               	addwf	1,f
  4306  000F' 3141               	addfsr 1,1
  4307  0010' 1803               	skipnc
  4308  0011' 0A81               	incf	1,f
  4309                           
  4310                           ;mtouch_button.c: 274: if (button->counter == (mtouch_button_statecounter_t)0)
  4311  0012' 0802'              	movf	Button_Tick_helper@button,w
  4312  0013' 3E0A               	addlw	10
  4313  0014' 0086               	movwf	6
  4314  0015' 0187               	clrf	7
  4315  0016' 0016               	moviw fsr1++
  4316  0017' 0401               	iorwf	1,w
  4317  0018' 1D03               	btfss	3,2
  4318  0019' 0008               	return
  4319                           
  4320                           ;mtouch_button.c: 275: {
  4321                           ;mtouch_button.c: 276: button->counter = (mtouch_button_statecounter_t)0xFFFF;
  4322  001A' 0802'              	movf	Button_Tick_helper@button,w
  4323  001B' 3E0A               	addlw	10
  4324  001C' 0086               	movwf	6
  4325  001D' 0187               	clrf	7
  4326  001E' 30FF               	movlw	255
  4327  001F' 3FC0               	movwi [0]fsr1
  4328  0020' 30FF               	movlw	255
  4329  0021' 3FC1               	movwi [1]fsr1
  4330  0022' 0008               	return
  4331  0023'                    __end_of_Button_Tick_helper:	
  4332                           
  4333                           	psect	text16
  4334  0000'                    __ptext16:	
  4335 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  4336 ;; Defined at:
  4337 ;;		line 520 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  sensor          1    2[COMMON] PTR struct .
  4342 ;;		 -> mtouch_sensor(9), 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4352 ;;      Params:         0       0       0       0
  4353 ;;      Locals:         1       0       0       0
  4354 ;;      Temps:          1       0       0       0
  4355 ;;      Totals:         2       0       0       0
  4356 ;;Total ram usage:        2 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    1
  4359 ;; This function calls:
  4360 ;;		_Sensor_Sampled_Reset
  4361 ;; This function is called by:
  4362 ;;		_MTOUCH_Initialize
  4363 ;;		_MTOUCH_Service_Mainloop
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  4369  0000'                    _MTOUCH_Sensor_Sampled_ResetAll:	
  4370                           
  4371                           ;mtouch_sensor.c: 522: mtouch_sensor_t* sensor;
  4372                           ;mtouch_sensor.c: 523: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[1-1];senso
      +                          r++)
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  4376  0000' 3000'              	movlw	(low (_mtouch_sensor| 0))& (0+255)
  4377  0001' 0081'              	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4378  0002' 0801'              	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4379  0003' 0082'              	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  4380  0004'                    L3:	
  4381  0004' 3000'              	movlw	(low (_mtouch_sensor| 0))& (0+255)
  4382  0005' 0081'              	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4383  0006' 0802'              	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4384  0007' 0201'              	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4385  0008' 1C03               	btfss	3,0
  4386  0009' 0008               	return
  4387                           
  4388                           ;mtouch_sensor.c: 524: {
  4389                           ;mtouch_sensor.c: 525: Sensor_Sampled_Reset(sensor);
  4390  000A' 0802'              	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4391  000B' 2000'              	fcall	_Sensor_Sampled_Reset
  4392  000C' 3009               	movlw	9
  4393  000D' 0081'              	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4394  000E' 0801'              	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4395  000F' 0782'              	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  4396  0010' 2804'              	goto	L3
  4397  0011'                    __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  4398                           
  4399                           	psect	text17
  4400  0000'                    __ptext17:	
  4401 ;; *************** function _Sensor_Sampled_Reset *****************
  4402 ;; Defined at:
  4403 ;;		line 537 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  sensor          1    wreg     PTR struct .
  4406 ;;		 -> mtouch_sensor(9), 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;  sensor          1    0[COMMON] PTR struct .
  4409 ;;		 -> mtouch_sensor(9), 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4419 ;;      Params:         0       0       0       0
  4420 ;;      Locals:         1       0       0       0
  4421 ;;      Temps:          0       0       0       0
  4422 ;;      Totals:         1       0       0       0
  4423 ;;Total ram usage:        1 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; This function calls:
  4426 ;;		Nothing
  4427 ;; This function is called by:
  4428 ;;		_MTOUCH_Sensor_Initialize
  4429 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           
  4434                           ;psect for function _Sensor_Sampled_Reset
  4435  0000'                    _Sensor_Sampled_Reset:	
  4436                           
  4437                           ;incstack = 0
  4438                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4439                           ;Sensor_Sampled_Reset@sensor stored from wreg
  4440  0000' 0080'              	movwf	Sensor_Sampled_Reset@sensor
  4441                           
  4442                           ;mtouch_sensor.c: 539: sensor->sampled = 0;
  4443  0001' 0800'              	movf	Sensor_Sampled_Reset@sensor,w
  4444  0002' 3E08               	addlw	8
  4445  0003' 0086               	movwf	6
  4446  0004' 0187               	clrf	7
  4447  0005' 1081               	bcf	1,1
  4448  0006' 0008               	return
  4449  0007'                    __end_of_Sensor_Sampled_Reset:	
  4450                           
  4451                           	psect	text18
  4452  0000'                    __ptext18:	
  4453 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  4454 ;; Defined at:
  4455 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;		None
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  sensor          1   13[BANK0 ] enum E5394
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      unsigned char 
  4462 ;; Registers used:
  4463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4469 ;;      Params:         0       0       0       0
  4470 ;;      Locals:         0       1       0       0
  4471 ;;      Temps:          1       0       0       0
  4472 ;;      Totals:         1       1       0       0
  4473 ;;Total ram usage:        2 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:    5
  4476 ;; This function calls:
  4477 ;;		_Sensor_Service
  4478 ;; This function is called by:
  4479 ;;		_MTOUCH_Service_Mainloop
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           
  4484                           ;psect for function _MTOUCH_Sensor_SampleAll
  4485  0000'                    _MTOUCH_Sensor_SampleAll:	
  4486                           
  4487                           ;mtouch_sensor.c: 199: enum mtouch_sensor_names sensor;
  4488                           ;mtouch_sensor.c: 200: for (sensor = 0; sensor < 1; sensor++)
  4489                           
  4490                           ;incstack = 0
  4491                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4492  0000' 0020               	movlb	0	; select bank0
  4493  0001' 018D'              	clrf	MTOUCH_Sensor_SampleAll@sensor
  4494  0002' 080D'              	movf	MTOUCH_Sensor_SampleAll@sensor,w
  4495  0003' 1D03               	btfss	3,2
  4496  0004' 2814'              	goto	l2480
  4497  0005'                    l2472:	
  4498                           
  4499                           ;mtouch_sensor.c: 201: {
  4500                           ;mtouch_sensor.c: 202: if(Sensor_Service(sensor)!= MTOUCH_SENSOR_ERROR_none)
  4501  0005' 080D'              	movf	MTOUCH_Sensor_SampleAll@sensor,w
  4502  0006' 2000'              	fcall	_Sensor_Service
  4503  0007' 3A00               	xorlw	0
  4504  0008' 1903               	skipnz
  4505  0009' 280C'              	goto	l2478
  4506                           
  4507                           ;mtouch_sensor.c: 203: return 0;
  4508  000A' 3000               	movlw	0
  4509  000B' 0008               	return
  4510  000C'                    l2478:	
  4511  000C' 3001               	movlw	1
  4512  000D' 008D'              	movwf	??_MTOUCH_Sensor_SampleAll
  4513  000E' 080D'              	movf	??_MTOUCH_Sensor_SampleAll,w
  4514  000F' 0020               	movlb	0	; select bank0
  4515  0010' 078D'              	addwf	MTOUCH_Sensor_SampleAll@sensor,f
  4516  0011' 080D'              	movf	MTOUCH_Sensor_SampleAll@sensor,w
  4517  0012' 1903               	btfsc	3,2
  4518  0013' 2805'              	goto	l2472
  4519  0014'                    l2480:	
  4520                           
  4521                           ;mtouch_sensor.c: 204: }
  4522                           ;mtouch_sensor.c: 205: return 1;
  4523  0014' 3001               	movlw	1
  4524  0015' 0008               	return
  4525  0016'                    __end_of_MTOUCH_Sensor_SampleAll:	
  4526                           
  4527                           	psect	text19
  4528  0000'                    __ptext19:	
  4529 ;; *************** function _Sensor_Service *****************
  4530 ;; Defined at:
  4531 ;;		line 214 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  name            1    wreg     enum E5394
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  name            1   10[BANK0 ] enum E5394
  4536 ;;  sensor          1   12[BANK0 ] PTR struct .
  4537 ;;		 -> mtouch_sensor(9), 
  4538 ;;  error           1   11[BANK0 ] enum E5396
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      enum E5396
  4541 ;; Registers used:
  4542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4548 ;;      Params:         0       0       0       0
  4549 ;;      Locals:         0       3       0       0
  4550 ;;      Temps:          0       2       0       0
  4551 ;;      Totals:         0       5       0       0
  4552 ;;Total ram usage:        5 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    4
  4555 ;; This function calls:
  4556 ;;		_Sensor_Acquisition
  4557 ;;		_Sensor_DefaultCallback
  4558 ;;		_Sensor_RawSample_Update
  4559 ;;		_Sensor_setSampled
  4560 ;;		___bmul
  4561 ;; This function is called by:
  4562 ;;		_MTOUCH_Sensor_SampleAll
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           
  4567                           ;psect for function _Sensor_Service
  4568  0000'                    _Sensor_Service:	
  4569                           
  4570                           ;incstack = 0
  4571                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4572                           ;Sensor_Service@name stored from wreg
  4573  0000' 0020               	movlb	0	; select bank0
  4574  0001' 008A'              	movwf	Sensor_Service@name
  4575                           
  4576                           ;mtouch_sensor.c: 216: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  4577  0002' 3009               	movlw	9
  4578  0003' 0088'              	movwf	??_Sensor_Service
  4579  0004' 0808'              	movf	??_Sensor_Service,w
  4580  0005' 0080'              	movwf	___bmul@multiplicand
  4581  0006' 080A'              	movf	Sensor_Service@name,w
  4582  0007' 2000'              	fcall	___bmul
  4583  0008' 3E00'              	addlw	(low (_mtouch_sensor| 0))& (0+255)
  4584  0009' 0020               	movlb	0	; select bank0
  4585  000A' 0089'              	movwf	??_Sensor_Service+1
  4586  000B' 0809'              	movf	??_Sensor_Service+1,w
  4587  000C' 008C'              	movwf	Sensor_Service@sensor
  4588                           
  4589                           ;mtouch_sensor.c: 217: enum mtouch_sensor_error error = Sensor_Acquisition(sensor);
  4590  000D' 080C'              	movf	Sensor_Service@sensor,w
  4591  000E' 2000'              	fcall	_Sensor_Acquisition
  4592  000F' 0020               	movlb	0	; select bank0
  4593  0010' 0088'              	movwf	??_Sensor_Service
  4594  0011' 0808'              	movf	??_Sensor_Service,w
  4595  0012' 008B'              	movwf	Sensor_Service@error
  4596                           
  4597                           ;mtouch_sensor.c: 220: switch(error)
  4598  0013' 2824'              	goto	l2380
  4599  0014'                    l2374:	
  4600                           ;mtouch_sensor.c: 221: {
  4601                           ;mtouch_sensor.c: 222: case MTOUCH_SENSOR_ERROR_none:
  4602                           
  4603                           
  4604                           ;mtouch_sensor.c: 223: {
  4605                           ;mtouch_sensor.c: 224: Sensor_RawSample_Update(sensor);
  4606  0014' 080C'              	movf	Sensor_Service@sensor,w
  4607  0015' 2000'              	fcall	_Sensor_RawSample_Update
  4608                           
  4609                           ;mtouch_sensor.c: 225: Sensor_setSampled(sensor);
  4610  0016' 0020               	movlb	0	; select bank0
  4611  0017' 080C'              	movf	Sensor_Service@sensor,w
  4612  0018' 2000'              	fcall	_Sensor_setSampled
  4613                           
  4614                           ;mtouch_sensor.c: 226: callback_sampled(name);
  4615  0019' 0020               	movlb	0	; select bank0
  4616  001A' 080A'              	movf	Sensor_Service@name,w
  4617  001B' 0088'              	movwf	??_Sensor_Service
  4618  001C' 0808'              	movf	??_Sensor_Service,w
  4619  001D' 0080'              	movwf	Sensor_DefaultCallback@sensor
  4620  001E' 080B'              	movf	_callback_sampled+1,w
  4621  001F' 008A               	movwf	10
  4622  0020' 080A'              	movf	_callback_sampled,w
  4623  0021' 000A               	callw
  4624  0022' 3180'              	pagesel	$
  4625                           
  4626                           ;mtouch_sensor.c: 235: }
  4627                           
  4628                           ;mtouch_sensor.c: 234: default: break;
  4629                           
  4630                           ;mtouch_sensor.c: 232: case MTOUCH_SENSOR_ERROR_invalid_calibrate: break;
  4631                           
  4632                           ;mtouch_sensor.c: 231: case MTOUCH_SENSOR_ERROR_interrupt_notEnabled: break;
  4633                           
  4634                           ;mtouch_sensor.c: 230: case MTOUCH_SENSOR_ERROR_invalid_index: break;
  4635                           
  4636                           ;mtouch_sensor.c: 227: }
  4637                           ;mtouch_sensor.c: 228: break;
  4638  0023' 2833'              	goto	l2382
  4639  0024'                    l2380:	
  4640  0024' 0020               	movlb	0	; select bank0
  4641  0025' 080B'              	movf	Sensor_Service@error,w
  4642                           
  4643                           ; Switch size 1, requested type "space"
  4644                           ; Number of cases is 4, Range of values is 0 to 255
  4645                           ; switch strategies available:
  4646                           ; Name         Instructions Cycles
  4647                           ; simple_byte           13     7 (average)
  4648                           ; jumptable            260     6 (fixed)
  4649                           ;	Chosen strategy is simple_byte
  4650  0026' 3A00               	xorlw	0	; case 0
  4651  0027' 1903               	skipnz
  4652  0028' 2814'              	goto	l2374
  4653  0029' 3AFD               	xorlw	253	; case 253
  4654  002A' 1903               	skipnz
  4655  002B' 2833'              	goto	l2382
  4656  002C' 3A03               	xorlw	3	; case 254
  4657  002D' 1903               	skipnz
  4658  002E' 2833'              	goto	l2382
  4659  002F' 3A01               	xorlw	1	; case 255
  4660  0030' 1903               	skipnz
  4661  0031' 2833'              	goto	l2382
  4662  0032' 2833'              	goto	l2382
  4663  0033'                    l2382:	
  4664                           
  4665                           ;mtouch_sensor.c: 237: return error;
  4666  0033' 0020               	movlb	0	; select bank0
  4667  0034' 080B'              	movf	Sensor_Service@error,w
  4668  0035' 0008               	return
  4669  0036'                    __end_of_Sensor_Service:	
  4670                           
  4671                           	psect	text20
  4672  0000'                    __ptext20:	
  4673 ;; *************** function _Sensor_setSampled *****************
  4674 ;; Defined at:
  4675 ;;		line 542 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  sensor          1    wreg     PTR struct .
  4678 ;;		 -> mtouch_sensor(9), 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  sensor          1    0[COMMON] PTR struct .
  4681 ;;		 -> mtouch_sensor(9), 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      void 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4691 ;;      Params:         0       0       0       0
  4692 ;;      Locals:         1       0       0       0
  4693 ;;      Temps:          0       0       0       0
  4694 ;;      Totals:         1       0       0       0
  4695 ;;Total ram usage:        1 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; This function calls:
  4698 ;;		Nothing
  4699 ;; This function is called by:
  4700 ;;		_Sensor_Service
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           
  4705                           ;psect for function _Sensor_setSampled
  4706  0000'                    _Sensor_setSampled:	
  4707                           
  4708                           ;incstack = 0
  4709                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  4710                           ;Sensor_setSampled@sensor stored from wreg
  4711  0000' 0080'              	movwf	Sensor_setSampled@sensor
  4712                           
  4713                           ;mtouch_sensor.c: 544: sensor->sampled = 1;
  4714  0001' 0800'              	movf	Sensor_setSampled@sensor,w
  4715  0002' 3E08               	addlw	8
  4716  0003' 0086               	movwf	6
  4717  0004' 0187               	clrf	7
  4718  0005' 1481               	bsf	1,1
  4719  0006' 0008               	return
  4720  0007'                    __end_of_Sensor_setSampled:	
  4721                           
  4722                           	psect	text21
  4723  0000'                    __ptext21:	
  4724 ;; *************** function _Sensor_RawSample_Update *****************
  4725 ;; Defined at:
  4726 ;;		line 403 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  sensor          1    wreg     PTR struct .
  4729 ;;		 -> mtouch_sensor(9), 
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  sensor          1    0[COMMON] PTR struct .
  4732 ;;		 -> mtouch_sensor(9), 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4742 ;;      Params:         0       0       0       0
  4743 ;;      Locals:         1       0       0       0
  4744 ;;      Temps:          0       0       0       0
  4745 ;;      Totals:         1       0       0       0
  4746 ;;Total ram usage:        1 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; This function calls:
  4749 ;;		Nothing
  4750 ;; This function is called by:
  4751 ;;		_Sensor_Service
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           
  4756                           ;psect for function _Sensor_RawSample_Update
  4757  0000'                    _Sensor_RawSample_Update:	
  4758                           
  4759                           ;incstack = 0
  4760                           ; Regs used in _Sensor_RawSample_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  4761                           ;Sensor_RawSample_Update@sensor stored from wreg
  4762  0000' 0080'              	movwf	Sensor_RawSample_Update@sensor
  4763                           
  4764                           ;mtouch_sensor.c: 405: if (INTCONbits.GIE == (uint8_t)1)
  4765  0001' 1F8B               	btfss	11,7	;volatile
  4766  0002' 280F'              	goto	l2316
  4767                           
  4768                           ;mtouch_sensor.c: 406: {
  4769                           ;mtouch_sensor.c: 407: INTCONbits.GIE = (uint8_t)0;
  4770  0003' 138B               	bcf	11,7	;volatile
  4771                           
  4772                           ;mtouch_sensor.c: 408: sensor->rawSample = packet_sample;
  4773  0004' 0800'              	movf	Sensor_RawSample_Update@sensor,w
  4774  0005' 3E06               	addlw	6
  4775  0006' 0086               	movwf	6
  4776  0007' 0187               	clrf	7
  4777  0008' 0020               	movlb	0	; select bank0
  4778  0009' 0802'              	movf	_packet_sample,w
  4779  000A' 3FC0               	movwi [0]fsr1
  4780  000B' 0803'              	movf	_packet_sample+1,w
  4781  000C' 3FC1               	movwi [1]fsr1
  4782                           
  4783                           ;mtouch_sensor.c: 409: INTCONbits.GIE = (uint8_t)1;
  4784  000D' 178B               	bsf	11,7	;volatile
  4785                           
  4786                           ;mtouch_sensor.c: 410: }
  4787  000E' 0008               	return
  4788  000F'                    l2316:	
  4789                           
  4790                           ;mtouch_sensor.c: 411: else
  4791                           ;mtouch_sensor.c: 412: {
  4792                           ;mtouch_sensor.c: 413: sensor->rawSample = packet_sample;
  4793  000F' 0800'              	movf	Sensor_RawSample_Update@sensor,w
  4794  0010' 3E06               	addlw	6
  4795  0011' 0086               	movwf	6
  4796  0012' 0187               	clrf	7
  4797  0013' 0020               	movlb	0	; select bank0
  4798  0014' 0802'              	movf	_packet_sample,w
  4799  0015' 3FC0               	movwi [0]fsr1
  4800  0016' 0803'              	movf	_packet_sample+1,w
  4801  0017' 3FC1               	movwi [1]fsr1
  4802  0018' 0008               	return
  4803  0019'                    __end_of_Sensor_RawSample_Update:	
  4804                           
  4805                           	psect	text22
  4806  0000'                    __ptext22:	
  4807 ;; *************** function _Sensor_DefaultCallback *****************
  4808 ;; Defined at:
  4809 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  sensor          1    0[COMMON] enum E5394
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      void 
  4816 ;; Registers used:
  4817 ;;		None
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4823 ;;      Params:         1       0       0       0
  4824 ;;      Locals:         0       0       0       0
  4825 ;;      Temps:          0       0       0       0
  4826 ;;      Totals:         1       0       0       0
  4827 ;;Total ram usage:        1 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_Sensor_Service
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _Sensor_DefaultCallback
  4838  0000'                    _Sensor_DefaultCallback:	
  4839                           
  4840                           ;incstack = 0
  4841                           ; Regs used in _Sensor_DefaultCallback: []
  4842  0000' 0008               	return
  4843  0001'                    __end_of_Sensor_DefaultCallback:	
  4844                           
  4845                           	psect	text23
  4846  0000'                    __ptext23:	
  4847 ;; *************** function _Sensor_Acquisition *****************
  4848 ;; Defined at:
  4849 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  sensor          1    wreg     PTR struct .
  4852 ;;		 -> mtouch_sensor(9), 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;  sensor          1    7[BANK0 ] PTR struct .
  4855 ;;		 -> mtouch_sensor(9), 
  4856 ;;  retry           1    6[BANK0 ] unsigned char 
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  1    wreg      enum E5396
  4859 ;; Registers used:
  4860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4866 ;;      Params:         0       0       0       0
  4867 ;;      Locals:         0       2       0       0
  4868 ;;      Temps:          4       0       0       0
  4869 ;;      Totals:         4       2       0       0
  4870 ;;Total ram usage:        6 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    3
  4873 ;; This function calls:
  4874 ;;		_Sensor_Acq_ExecutePacket
  4875 ;;		_Sensor_isEnabled
  4876 ;;		_Sensor_setActive
  4877 ;;		_Sensor_setInactive
  4878 ;;		_abs
  4879 ;; This function is called by:
  4880 ;;		_Sensor_Service
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _Sensor_Acquisition
  4886  0000'                    _Sensor_Acquisition:	
  4887                           
  4888                           ;incstack = 0
  4889                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4890                           ;Sensor_Acquisition@sensor stored from wreg
  4891  0000' 0020               	movlb	0	; select bank0
  4892  0001' 0087'              	movwf	Sensor_Acquisition@sensor
  4893                           
  4894                           ;mtouch_sensor.c: 254: uint8_t retry = (uint8_t)5;
  4895  0002' 3005               	movlw	5
  4896  0003' 0089'              	movwf	??_Sensor_Acquisition
  4897  0004' 0809'              	movf	??_Sensor_Acquisition,w
  4898  0005' 0086'              	movwf	Sensor_Acquisition@retry
  4899                           
  4900                           ;mtouch_sensor.c: 256: if(!Sensor_isEnabled(sensor))
  4901  0006' 0807'              	movf	Sensor_Acquisition@sensor,w
  4902  0007' 2000'              	fcall	_Sensor_isEnabled
  4903  0008' 3A00               	xorlw	0
  4904  0009' 1D03               	skipz
  4905  000A' 2815'              	goto	l2296
  4906                           
  4907                           ;mtouch_sensor.c: 257: return MTOUCH_SENSOR_ERROR_none;
  4908  000B' 3000               	movlw	0
  4909  000C' 0008               	return
  4910  000D'                    l2290:	
  4911                           ;mtouch_sensor.c: 259: while(Sensor_Acq_ExecutePacket(sensor))
  4912                           
  4913                           
  4914                           ;mtouch_sensor.c: 260: {
  4915                           ;mtouch_sensor.c: 261: retry--;
  4916  000D' 3001               	movlw	1
  4917  000E' 0020               	movlb	0	; select bank0
  4918  000F' 0286'              	subwf	Sensor_Acquisition@retry,f
  4919                           
  4920                           ;mtouch_sensor.c: 262: if(retry == 0)
  4921  0010' 0806'              	movf	Sensor_Acquisition@retry,w
  4922  0011' 1D03               	btfss	3,2
  4923  0012' 2815'              	goto	l2296
  4924                           
  4925                           ;mtouch_sensor.c: 263: {
  4926                           ;mtouch_sensor.c: 264: return MTOUCH_SENSOR_ERROR_tooManyRetries;
  4927  0013' 30FC               	movlw	252
  4928  0014' 0008               	return
  4929  0015'                    l2296:	
  4930  0015' 0020               	movlb	0	; select bank0
  4931  0016' 0807'              	movf	Sensor_Acquisition@sensor,w
  4932  0017' 2000'              	fcall	_Sensor_Acq_ExecutePacket
  4933  0018' 3A00               	xorlw	0
  4934  0019' 1D03               	skipz
  4935  001A' 280D'              	goto	l2290
  4936                           
  4937                           ;mtouch_sensor.c: 265: }
  4938                           ;mtouch_sensor.c: 266: }
  4939                           ;mtouch_sensor.c: 268: if((mtouch_sensor_packetsample_t)abs(packet_sample - sensor->rawS
      +                          ample) > (mtouch_sensor_packetsample_t)(sensor->oversampling)<<2)
  4940  001B' 0020               	movlb	0	; select bank0
  4941  001C' 0807'              	movf	Sensor_Acquisition@sensor,w
  4942  001D' 3E06               	addlw	6
  4943  001E' 0086               	movwf	6
  4944  001F' 0187               	clrf	7
  4945  0020' 3F40               	moviw [0]fsr1
  4946  0021' 0089'              	movwf	??_Sensor_Acquisition
  4947  0022' 3F41               	moviw [1]fsr1
  4948  0023' 008A'              	movwf	??_Sensor_Acquisition+1
  4949  0024' 0989'              	comf	??_Sensor_Acquisition,f
  4950  0025' 098A'              	comf	??_Sensor_Acquisition+1,f
  4951  0026' 0A89'              	incf	??_Sensor_Acquisition,f
  4952  0027' 1903               	skipnz
  4953  0028' 0A8A'              	incf	??_Sensor_Acquisition+1,f
  4954  0029' 0802'              	movf	_packet_sample,w
  4955  002A' 0709'              	addwf	??_Sensor_Acquisition,w
  4956  002B' 0080'              	movwf	abs@a
  4957  002C' 0803'              	movf	_packet_sample+1,w
  4958  002D' 3D0A'              	addwfc	??_Sensor_Acquisition+1,w
  4959  002E' 0081'              	movwf	abs@a+1
  4960  002F' 2000'              	fcall	_abs
  4961  0030' 0020               	movlb	0	; select bank0
  4962  0031' 0807'              	movf	Sensor_Acquisition@sensor,w
  4963  0032' 3E05               	addlw	5
  4964  0033' 0086               	movwf	6
  4965  0034' 0187               	clrf	7
  4966  0035' 0801               	movf	1,w
  4967  0036' 008B'              	movwf	??_Sensor_Acquisition+2
  4968  0037' 018C'              	clrf	??_Sensor_Acquisition+3
  4969  0038' 358B'              	lslf	??_Sensor_Acquisition+2,f
  4970  0039' 0D8C'              	rlf	??_Sensor_Acquisition+3,f
  4971  003A' 358B'              	lslf	??_Sensor_Acquisition+2,f
  4972  003B' 0D8C'              	rlf	??_Sensor_Acquisition+3,f
  4973  003C' 0801'              	movf	?_abs+1,w
  4974  003D' 020C'              	subwf	??_Sensor_Acquisition+3,w
  4975  003E' 1D03               	skipz
  4976  003F' 2842'              	goto	u1615
  4977  0040' 0800'              	movf	?_abs,w
  4978  0041' 020B'              	subwf	??_Sensor_Acquisition+2,w
  4979  0042'                    u1615:	
  4980  0042' 1803               	skipnc
  4981  0043' 2847'              	goto	l2302
  4982                           
  4983                           ;mtouch_sensor.c: 269: {
  4984                           ;mtouch_sensor.c: 270: Sensor_setActive(sensor);
  4985  0044' 0807'              	movf	Sensor_Acquisition@sensor,w
  4986  0045' 2000'              	fcall	_Sensor_setActive
  4987                           
  4988                           ;mtouch_sensor.c: 271: }
  4989  0046' 284A'              	goto	l2304
  4990  0047'                    l2302:	
  4991                           
  4992                           ;mtouch_sensor.c: 272: else
  4993                           ;mtouch_sensor.c: 273: {
  4994                           ;mtouch_sensor.c: 274: Sensor_setInactive(sensor);
  4995  0047' 0020               	movlb	0	; select bank0
  4996  0048' 0807'              	movf	Sensor_Acquisition@sensor,w
  4997  0049' 2000'              	fcall	_Sensor_setInactive
  4998  004A'                    l2304:	
  4999                           
  5000                           ;mtouch_sensor.c: 275: }
  5001                           ;mtouch_sensor.c: 277: return MTOUCH_SENSOR_ERROR_none;
  5002  004A' 3000               	movlw	0
  5003  004B' 0008               	return
  5004  004C'                    __end_of_Sensor_Acquisition:	
  5005                           
  5006                           	psect	text24
  5007  0000'                    __ptext24:	
  5008 ;; *************** function _abs *****************
  5009 ;; Defined at:
  5010 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/abs.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;  a               2    0[COMMON] int 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  2    0[COMMON] int 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5024 ;;      Params:         2       0       0       0
  5025 ;;      Locals:         0       0       0       0
  5026 ;;      Temps:          2       0       0       0
  5027 ;;      Totals:         4       0       0       0
  5028 ;;Total ram usage:        4 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_Sensor_Acquisition
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           
  5038                           ;psect for function _abs
  5039  0000'                    _abs:	
  5040                           
  5041                           ;incstack = 0
  5042                           ; Regs used in _abs: [wreg+status,2+status,0]
  5043  0000' 1F81'              	btfss	abs@a+1,7
  5044  0001' 0008               	return
  5045  0002' 0900'              	comf	abs@a,w
  5046  0003' 0082'              	movwf	??_abs
  5047  0004' 0901'              	comf	abs@a+1,w
  5048  0005' 0083'              	movwf	??_abs+1
  5049  0006' 0A82'              	incf	??_abs,f
  5050  0007' 1903               	skipnz
  5051  0008' 0A83'              	incf	??_abs+1,f
  5052  0009' 0802'              	movf	??_abs,w
  5053  000A' 0080'              	movwf	?_abs
  5054  000B' 0803'              	movf	??_abs+1,w
  5055  000C' 0081'              	movwf	?_abs+1
  5056  000D' 0008               	return
  5057  000E'                    __end_of_abs:	
  5058                           
  5059                           	psect	text25
  5060  0000'                    __ptext25:	
  5061 ;; *************** function _Sensor_setInactive *****************
  5062 ;; Defined at:
  5063 ;;		line 488 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;  sensor          1    wreg     PTR struct .
  5066 ;;		 -> mtouch_sensor(9), 
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;  sensor          1    0[COMMON] PTR struct .
  5069 ;;		 -> mtouch_sensor(9), 
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  1    wreg      void 
  5072 ;; Registers used:
  5073 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5079 ;;      Params:         0       0       0       0
  5080 ;;      Locals:         1       0       0       0
  5081 ;;      Temps:          0       0       0       0
  5082 ;;      Totals:         1       0       0       0
  5083 ;;Total ram usage:        1 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; This function calls:
  5086 ;;		Nothing
  5087 ;; This function is called by:
  5088 ;;		_Sensor_Acquisition
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _Sensor_setInactive
  5094  0000'                    _Sensor_setInactive:	
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5098                           ;Sensor_setInactive@sensor stored from wreg
  5099  0000' 0080'              	movwf	Sensor_setInactive@sensor
  5100                           
  5101                           ;mtouch_sensor.c: 490: sensor->acitve = 0;
  5102  0001' 0800'              	movf	Sensor_setInactive@sensor,w
  5103  0002' 3E08               	addlw	8
  5104  0003' 0086               	movwf	6
  5105  0004' 0187               	clrf	7
  5106  0005' 1101               	bcf	1,2
  5107  0006' 0008               	return
  5108  0007'                    __end_of_Sensor_setInactive:	
  5109                           
  5110                           	psect	text26
  5111  0000'                    __ptext26:	
  5112 ;; *************** function _Sensor_setActive *****************
  5113 ;; Defined at:
  5114 ;;		line 483 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  sensor          1    wreg     PTR struct .
  5117 ;;		 -> mtouch_sensor(9), 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  sensor          1    0[COMMON] PTR struct .
  5120 ;;		 -> mtouch_sensor(9), 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5130 ;;      Params:         0       0       0       0
  5131 ;;      Locals:         1       0       0       0
  5132 ;;      Temps:          0       0       0       0
  5133 ;;      Totals:         1       0       0       0
  5134 ;;Total ram usage:        1 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_Sensor_Acquisition
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           
  5144                           ;psect for function _Sensor_setActive
  5145  0000'                    _Sensor_setActive:	
  5146                           
  5147                           ;incstack = 0
  5148                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5149                           ;Sensor_setActive@sensor stored from wreg
  5150  0000' 0080'              	movwf	Sensor_setActive@sensor
  5151                           
  5152                           ;mtouch_sensor.c: 485: sensor->acitve = 1;
  5153  0001' 0800'              	movf	Sensor_setActive@sensor,w
  5154  0002' 3E08               	addlw	8
  5155  0003' 0086               	movwf	6
  5156  0004' 0187               	clrf	7
  5157  0005' 1501               	bsf	1,2
  5158  0006' 0008               	return
  5159  0007'                    __end_of_Sensor_setActive:	
  5160                           
  5161                           	psect	text27
  5162  0000'                    __ptext27:	
  5163 ;; *************** function _Sensor_isEnabled *****************
  5164 ;; Defined at:
  5165 ;;		line 468 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  sensor          1    wreg     PTR struct .
  5168 ;;		 -> mtouch_sensor(9), 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  sensor          1    0[COMMON] PTR struct .
  5171 ;;		 -> mtouch_sensor(9), 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      unsigned char 
  5174 ;; Registers used:
  5175 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5181 ;;      Params:         0       0       0       0
  5182 ;;      Locals:         1       0       0       0
  5183 ;;      Temps:          0       0       0       0
  5184 ;;      Totals:         1       0       0       0
  5185 ;;Total ram usage:        1 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; This function calls:
  5188 ;;		Nothing
  5189 ;; This function is called by:
  5190 ;;		_Sensor_Acquisition
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           
  5195                           ;psect for function _Sensor_isEnabled
  5196  0000'                    _Sensor_isEnabled:	
  5197                           
  5198                           ;incstack = 0
  5199                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5200                           ;Sensor_isEnabled@sensor stored from wreg
  5201  0000' 0080'              	movwf	Sensor_isEnabled@sensor
  5202                           
  5203                           ;mtouch_sensor.c: 470: if(sensor!=(0))
  5204  0001' 0800'              	movf	Sensor_isEnabled@sensor,w
  5205  0002' 1903               	btfsc	3,2
  5206  0003' 280B'              	goto	l2124
  5207                           
  5208                           ;mtouch_sensor.c: 471: return (bool)sensor->enabled;
  5209  0004' 0800'              	movf	Sensor_isEnabled@sensor,w
  5210  0005' 3E08               	addlw	8
  5211  0006' 0086               	movwf	6
  5212  0007' 0187               	clrf	7
  5213  0008' 0801               	movf	1,w
  5214  0009' 3901               	andlw	1
  5215  000A' 0008               	return
  5216  000B'                    l2124:	
  5217                           
  5218                           ;mtouch_sensor.c: 472: else
  5219                           ;mtouch_sensor.c: 473: return 0;
  5220  000B' 3000               	movlw	0
  5221  000C' 0008               	return
  5222  000D'                    __end_of_Sensor_isEnabled:	
  5223                           
  5224                           	psect	text28
  5225  0000'                    __ptext28:	
  5226 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  5227 ;; Defined at:
  5228 ;;		line 286 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  sensor          1    wreg     PTR struct .
  5231 ;;		 -> mtouch_sensor(9), 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  sensor          1    5[BANK0 ] PTR struct .
  5234 ;;		 -> mtouch_sensor(9), 
  5235 ;;  error           1    4[BANK0 ] enum E5396
  5236 ;;  GIE_state       1    3[BANK0 ] unsigned char 
  5237 ;;  ADACT_temp      1    2[BANK0 ] unsigned char 
  5238 ;;  ADCON1_temp     1    1[BANK0 ] unsigned char 
  5239 ;;  ADCON0_temp     1    0[BANK0 ] unsigned char 
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  1    wreg      enum E5396
  5242 ;; Registers used:
  5243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5249 ;;      Params:         0       0       0       0
  5250 ;;      Locals:         0       6       0       0
  5251 ;;      Temps:          1       0       0       0
  5252 ;;      Totals:         1       6       0       0
  5253 ;;Total ram usage:        7 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:    2
  5256 ;; This function calls:
  5257 ;;		_MTOUCH_Delay
  5258 ;;		_MTOUCH_Random
  5259 ;;		_MTOUCH_Sensor_Scan_Initialize
  5260 ;;		_Sensor_Acq_ExecuteScan
  5261 ;;		_Sensor_setScanFunction
  5262 ;; This function is called by:
  5263 ;;		_Sensor_Acquisition
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           
  5268                           ;psect for function _Sensor_Acq_ExecutePacket
  5269  0000'                    _Sensor_Acq_ExecutePacket:	
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5273                           ;Sensor_Acq_ExecutePacket@sensor stored from wreg
  5274  0000' 0020               	movlb	0	; select bank0
  5275  0001' 0085'              	movwf	Sensor_Acq_ExecutePacket@sensor
  5276                           
  5277                           ;mtouch_sensor.c: 289: enum mtouch_sensor_error error = MTOUCH_SENSOR_ERROR_none;
  5278  0002' 0184'              	clrf	Sensor_Acq_ExecutePacket@error
  5279                           
  5280                           ;mtouch_sensor.c: 290: uint8_t ADCON0_temp;
  5281                           ;mtouch_sensor.c: 291: uint8_t ADCON1_temp;
  5282                           ;mtouch_sensor.c: 292: uint8_t ADACT_temp;
  5283                           ;mtouch_sensor.c: 294: uint8_t GIE_state;
  5284                           ;mtouch_sensor.c: 296: ADCON0_temp = ADCON0;
  5285  0003' 0021               	movlb	1	; select bank1
  5286  0004' 081D               	movf	29,w	;volatile
  5287  0005' 0088'              	movwf	??_Sensor_Acq_ExecutePacket
  5288  0006' 0808'              	movf	??_Sensor_Acq_ExecutePacket,w
  5289  0007' 0020               	movlb	0	; select bank0
  5290  0008' 0080'              	movwf	Sensor_Acq_ExecutePacket@ADCON0_temp
  5291                           
  5292                           ;mtouch_sensor.c: 297: ADCON1_temp = ADCON1;
  5293  0009' 0021               	movlb	1	; select bank1
  5294  000A' 081E               	movf	30,w	;volatile
  5295  000B' 0088'              	movwf	??_Sensor_Acq_ExecutePacket
  5296  000C' 0808'              	movf	??_Sensor_Acq_ExecutePacket,w
  5297  000D' 0020               	movlb	0	; select bank0
  5298  000E' 0081'              	movwf	Sensor_Acq_ExecutePacket@ADCON1_temp
  5299                           
  5300                           ;mtouch_sensor.c: 298: ADACT_temp = ADACT;
  5301  000F' 0021               	movlb	1	; select bank1
  5302  0010' 081F               	movf	31,w	;volatile
  5303  0011' 0088'              	movwf	??_Sensor_Acq_ExecutePacket
  5304  0012' 0808'              	movf	??_Sensor_Acq_ExecutePacket,w
  5305  0013' 0020               	movlb	0	; select bank0
  5306  0014' 0082'              	movwf	Sensor_Acq_ExecutePacket@ADACT_temp
  5307                           
  5308                           ;mtouch_sensor.c: 299: MTOUCH_Sensor_Scan_Initialize();
  5309  0015' 2000'              	fcall	_MTOUCH_Sensor_Scan_Initialize
  5310                           
  5311                           ;mtouch_sensor.c: 301: GIE_state = INTCONbits.GIE;
  5312  0016' 3000               	movlw	0
  5313  0017' 1B8B               	btfsc	11,7	;volatile
  5314  0018' 3001               	movlw	1
  5315  0019' 0020               	movlb	0	; select bank0
  5316  001A' 0083'              	movwf	Sensor_Acq_ExecutePacket@GIE_state
  5317                           
  5318                           ;mtouch_sensor.c: 303: Sensor_setScanFunction(sensor);
  5319  001B' 0805'              	movf	Sensor_Acq_ExecutePacket@sensor,w
  5320  001C' 2000'              	fcall	_Sensor_setScanFunction
  5321                           
  5322                           ;mtouch_sensor.c: 305: currentScannSensor = sensor->sensor_name;
  5323  001D' 0020               	movlb	0	; select bank0
  5324  001E' 0805'              	movf	Sensor_Acq_ExecutePacket@sensor,w
  5325  001F' 0086               	movwf	6
  5326  0020' 0187               	clrf	7
  5327  0021' 0801               	movf	1,w
  5328  0022' 0088'              	movwf	??_Sensor_Acq_ExecutePacket
  5329  0023' 0808'              	movf	??_Sensor_Acq_ExecutePacket,w
  5330  0024' 0088'              	movwf	_currentScannSensor
  5331                           
  5332                           ;mtouch_sensor.c: 306: packet_counter = sensor->oversampling;
  5333  0025' 0805'              	movf	Sensor_Acq_ExecutePacket@sensor,w
  5334  0026' 0086               	movwf	6
  5335  0027' 0187               	clrf	7
  5336  0028' 3F45               	moviw [5]fsr1
  5337  0029' 0087'              	movwf	_packet_counter
  5338                           
  5339                           ;mtouch_sensor.c: 307: packet_sample = 0;
  5340  002A' 0182'              	clrf	_packet_sample
  5341  002B' 0183'              	clrf	_packet_sample+1
  5342                           
  5343                           ;mtouch_sensor.c: 308: sensor_globalFlags.packet_done = 0;
  5344  002C' 1009'              	bcf	_sensor_globalFlags,0	;volatile
  5345                           
  5346                           ;mtouch_sensor.c: 309: sample_delay = MTOUCH_Random();
  5347  002D' 2000'              	fcall	_MTOUCH_Random
  5348  002E' 0088'              	movwf	??_Sensor_Acq_ExecutePacket
  5349  002F' 0808'              	movf	??_Sensor_Acq_ExecutePacket,w
  5350  0030' 0020               	movlb	0	; select bank0
  5351  0031' 0086'              	movwf	_sample_delay
  5352                           
  5353                           ;mtouch_sensor.c: 310: packet_sample = 0;
  5354  0032' 0182'              	clrf	_packet_sample
  5355  0033' 0183'              	clrf	_packet_sample+1
  5356                           
  5357                           ;mtouch_sensor.c: 312: sensor_globalFlags.interrupted = 0;
  5358  0034' 1089'              	bcf	_sensor_globalFlags,1	;volatile
  5359  0035'                    l2156:	
  5360                           ;mtouch_sensor.c: 315: do
  5361                           
  5362                           
  5363                           ;mtouch_sensor.c: 316: {
  5364                           ;mtouch_sensor.c: 317: INTCONbits.GIE = (uint8_t)0;
  5365  0035' 138B               	bcf	11,7	;volatile
  5366                           
  5367                           ;mtouch_sensor.c: 318: Sensor_Acq_ExecuteScan();
  5368  0036' 2000'              	fcall	_Sensor_Acq_ExecuteScan
  5369                           
  5370                           ;mtouch_sensor.c: 319: INTCONbits.GIE = GIE_state;
  5371  0037' 0020               	movlb	0	; select bank0
  5372  0038' 0C03'              	rrf	Sensor_Acq_ExecutePacket@GIE_state,w
  5373  0039' 1C03               	skipc
  5374  003A' 138B               	bcf	11,7	;volatile
  5375  003B' 1803               	skipnc
  5376  003C' 178B               	bsf	11,7	;volatile
  5377                           
  5378                           ;mtouch_sensor.c: 320: MTOUCH_Delay();
  5379  003D' 2000'              	fcall	_MTOUCH_Delay
  5380  003E'                    l433:	
  5381                           ;mtouch_sensor.c: 321: while(ADCON0bits.ADGO == 1);
  5382                           
  5383  003E' 0021               	movlb	1	; select bank1
  5384  003F' 189D               	btfsc	29,1	;volatile
  5385  0040' 283E'              	goto	l433
  5386                           
  5387                           ;mtouch_sensor.c: 322: } while(sensor_globalFlags.packet_done == 0);
  5388  0041' 0020               	movlb	0	; select bank0
  5389  0042' 1C09'              	btfss	_sensor_globalFlags,0	;volatile
  5390  0043' 2835'              	goto	l2156
  5391                           
  5392                           ;mtouch_sensor.c: 325: ADCON0 = ADCON0_temp;
  5393  0044' 0800'              	movf	Sensor_Acq_ExecutePacket@ADCON0_temp,w
  5394  0045' 0021               	movlb	1	; select bank1
  5395  0046' 009D               	movwf	29	;volatile
  5396                           
  5397                           ;mtouch_sensor.c: 326: ADCON1 = ADCON1_temp;
  5398  0047' 0020               	movlb	0	; select bank0
  5399  0048' 0801'              	movf	Sensor_Acq_ExecutePacket@ADCON1_temp,w
  5400  0049' 0021               	movlb	1	; select bank1
  5401  004A' 009E               	movwf	30	;volatile
  5402                           
  5403                           ;mtouch_sensor.c: 327: ADACT = ADACT_temp;
  5404  004B' 0020               	movlb	0	; select bank0
  5405  004C' 0802'              	movf	Sensor_Acq_ExecutePacket@ADACT_temp,w
  5406  004D' 0021               	movlb	1	; select bank1
  5407  004E' 009F               	movwf	31	;volatile
  5408                           
  5409                           ;mtouch_sensor.c: 329: if(sensor_globalFlags.interrupted)
  5410  004F' 0020               	movlb	0	; select bank0
  5411  0050' 1C89'              	btfss	_sensor_globalFlags,1	;volatile
  5412  0051' 2856'              	goto	l437
  5413                           
  5414                           ;mtouch_sensor.c: 330: {
  5415                           ;mtouch_sensor.c: 331: error = MTOUCH_SENSOR_ERROR_interruptedScan;
  5416  0052' 30FA               	movlw	250
  5417  0053' 0088'              	movwf	??_Sensor_Acq_ExecutePacket
  5418  0054' 0808'              	movf	??_Sensor_Acq_ExecutePacket,w
  5419  0055' 0084'              	movwf	Sensor_Acq_ExecutePacket@error
  5420  0056'                    l437:	
  5421                           
  5422                           ;mtouch_sensor.c: 332: }
  5423                           ;mtouch_sensor.c: 334: return error;
  5424  0056' 0804'              	movf	Sensor_Acq_ExecutePacket@error,w
  5425  0057' 0008               	return
  5426  0058'                    __end_of_Sensor_Acq_ExecutePacket:	
  5427                           
  5428                           	psect	text29
  5429  0000'                    __ptext29:	
  5430 ;; *************** function _Sensor_setScanFunction *****************
  5431 ;; Defined at:
  5432 ;;		line 435 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  sensor          1    wreg     PTR struct .
  5435 ;;		 -> mtouch_sensor(9), 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;  sensor          1    0[COMMON] PTR struct .
  5438 ;;		 -> mtouch_sensor(9), 
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5448 ;;      Params:         0       0       0       0
  5449 ;;      Locals:         1       0       0       0
  5450 ;;      Temps:          0       0       0       0
  5451 ;;      Totals:         1       0       0       0
  5452 ;;Total ram usage:        1 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; This function calls:
  5455 ;;		Nothing
  5456 ;; This function is called by:
  5457 ;;		_Sensor_Acq_ExecutePacket
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           
  5462                           ;psect for function _Sensor_setScanFunction
  5463  0000'                    _Sensor_setScanFunction:	
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _Sensor_setScanFunction: [wreg+fsr1l+fsr1h+status,2+status,0]
  5467                           ;Sensor_setScanFunction@sensor stored from wreg
  5468  0000' 0080'              	movwf	Sensor_setScanFunction@sensor
  5469                           
  5470                           ;mtouch_sensor.c: 437: Sensor_scanA = sensor->scanA;
  5471  0001' 0A00'              	incf	Sensor_setScanFunction@sensor,w
  5472  0002' 0086               	movwf	6
  5473  0003' 0187               	clrf	7
  5474  0004' 3F40               	moviw [0]fsr1
  5475  0005' 0020               	movlb	0	; select bank0
  5476  0006' 0088'              	movwf	_Sensor_scanA
  5477  0007' 3F41               	moviw [1]fsr1
  5478  0008' 0089'              	movwf	_Sensor_scanA+1
  5479                           
  5480                           ;mtouch_sensor.c: 438: Sensor_scanB = sensor->scanB;
  5481  0009' 0800'              	movf	Sensor_setScanFunction@sensor,w
  5482  000A' 3E03               	addlw	3
  5483  000B' 0086               	movwf	6
  5484  000C' 0187               	clrf	7
  5485  000D' 3F40               	moviw [0]fsr1
  5486  000E' 0086'              	movwf	_Sensor_scanB
  5487  000F' 3F41               	moviw [1]fsr1
  5488  0010' 0087'              	movwf	_Sensor_scanB+1
  5489  0011' 0008               	return
  5490  0012'                    __end_of_Sensor_setScanFunction:	
  5491                           
  5492                           	psect	text30
  5493  0000'                    __ptext30:	
  5494 ;; *************** function _Sensor_Acq_ExecuteScan *****************
  5495 ;; Defined at:
  5496 ;;		line 353 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;		None
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  result          2    6[COMMON] unsigned int 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  1    wreg      void 
  5503 ;; Registers used:
  5504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5510 ;;      Params:         0       0       0       0
  5511 ;;      Locals:         2       0       0       0
  5512 ;;      Temps:          2       0       0       0
  5513 ;;      Totals:         4       0       0       0
  5514 ;;Total ram usage:        4 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    1
  5517 ;; This function calls:
  5518 ;;		_MTOUCH_CVD_ScanA_0
  5519 ;;		_MTOUCH_CVD_ScanB_0
  5520 ;;		___bmul
  5521 ;; This function is called by:
  5522 ;;		_Sensor_Acq_ExecutePacket
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _Sensor_Acq_ExecuteScan
  5528  0000'                    _Sensor_Acq_ExecuteScan:	
  5529                           
  5530                           ;mtouch_sensor.c: 355: mtouch_sensor_adcsample_t result = ADRES;
  5531                           
  5532                           ;incstack = 0
  5533                           ; Regs used in _Sensor_Acq_ExecuteScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5534  0000' 0021               	movlb	1	; select bank1
  5535  0001' 081C               	movf	28,w	;volatile
  5536  0002' 0087'              	movwf	Sensor_Acq_ExecuteScan@result+1
  5537  0003' 081B               	movf	27,w	;volatile
  5538  0004' 0086'              	movwf	Sensor_Acq_ExecuteScan@result
  5539                           
  5540                           ;mtouch_sensor.c: 357: if(sensor_globalFlags.packet_done)
  5541  0005' 0020               	movlb	0	; select bank0
  5542  0006' 1809'              	btfsc	_sensor_globalFlags,0	;volatile
  5543  0007' 0008               	return
  5544                           
  5545                           ;mtouch_sensor.c: 360: if (packet_counter != (uint8_t)0)
  5546                           
  5547                           ;mtouch_sensor.c: 358: return;
  5548  0008' 0807'              	movf	_packet_counter,w
  5549  0009' 1D03               	btfss	3,2
  5550  000A' 2819'              	goto	l2048
  5551  000B' 2858'              	goto	l2060
  5552  000C'                    l2042:	
  5553                           ;mtouch_sensor.c: 364: {
  5554                           ;mtouch_sensor.c: 365: case 0: Sensor_scanA();break;
  5555                           
  5556                           ;mtouch_sensor.c: 361: {
  5557                           ;mtouch_sensor.c: 363: switch(packet_counter & 0x01)
  5558                           
  5559  000C' 0809'              	movf	_Sensor_scanA+1,w
  5560  000D' 008A               	movwf	10
  5561  000E' 0808'              	movf	_Sensor_scanA,w
  5562  000F' 000A               	callw
  5563  0010' 3180'              	pagesel	$
  5564  0011' 2832'              	goto	l2050
  5565  0012'                    l2044:	
  5566                           ;mtouch_sensor.c: 366: case 1: Sensor_scanB();break;
  5567                           
  5568  0012' 0020               	movlb	0	; select bank0
  5569  0013' 0807'              	movf	_Sensor_scanB+1,w
  5570  0014' 008A               	movwf	10
  5571  0015' 0806'              	movf	_Sensor_scanB,w
  5572  0016' 000A               	callw
  5573  0017' 3180'              	pagesel	$
  5574                           
  5575                           ;mtouch_sensor.c: 368: }
  5576                           
  5577                           ;mtouch_sensor.c: 367: default: break;
  5578  0018' 2832'              	goto	l2050
  5579  0019'                    l2048:	
  5580  0019' 0020               	movlb	0	; select bank0
  5581  001A' 0807'              	movf	_packet_counter,w
  5582  001B' 3901               	andlw	1
  5583  001C' 0084'              	movwf	??_Sensor_Acq_ExecuteScan
  5584  001D' 0185'              	clrf	??_Sensor_Acq_ExecuteScan+1
  5585                           
  5586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5587                           ; Switch size 1, requested type "time"
  5588                           ; Number of cases is 1, Range of values is 0 to 0
  5589                           ; switch strategies available:
  5590                           ; Name         Instructions Cycles
  5591                           ; direct_byte            8     6 (fixed)
  5592                           ; simple_byte            4     3 (average)
  5593                           ; jumptable            260     6 (fixed)
  5594                           ;	Chosen strategy is direct_byte
  5595  001E' 0805'              	movf	??_Sensor_Acq_ExecuteScan+1,w
  5596  001F' 0084               	movwf	4
  5597  0020' 3001               	movlw	1
  5598  0021' 0204               	subwf	4,w
  5599  0022' 1803               	skipnc
  5600  0023' 2832'              	goto	l2050
  5601  0024' 3180'              	movlp	high S2776
  5602  0025' 3000'              	movlw	low S2776
  5603  0026' 0704               	addwf	4,w
  5604  0027' 0082               	movwf	2
  5605  0028'                    l2774:	
  5606                           
  5607                           ; Switch size 1, requested type "time"
  5608                           ; Number of cases is 2, Range of values is 0 to 1
  5609                           ; switch strategies available:
  5610                           ; Name         Instructions Cycles
  5611                           ; direct_byte           10     6 (fixed)
  5612                           ; simple_byte            7     4 (average)
  5613                           ; jumptable            260     6 (fixed)
  5614                           ;	Chosen strategy is direct_byte
  5615  0028' 0804'              	movf	??_Sensor_Acq_ExecuteScan,w
  5616  0029' 0084               	movwf	4
  5617  002A' 3002               	movlw	2
  5618  002B' 0204               	subwf	4,w
  5619  002C' 1803               	skipnc
  5620  002D' 2832'              	goto	l2050
  5621  002E' 3180'              	movlp	high S2778
  5622  002F' 3000'              	movlw	low S2778
  5623  0030' 0704               	addwf	4,w
  5624  0031' 0082               	movwf	2
  5625  0032'                    l2050:	
  5626                           
  5627                           ;mtouch_sensor.c: 370: if(packet_counter!=mtouch_sensor[currentScannSensor].oversampling
      +                          )
  5628  0032' 3009               	movlw	9
  5629  0033' 0084'              	movwf	??_Sensor_Acq_ExecuteScan
  5630  0034' 0804'              	movf	??_Sensor_Acq_ExecuteScan,w
  5631  0035' 0080'              	movwf	___bmul@multiplicand
  5632  0036' 0020               	movlb	0	; select bank0
  5633  0037' 0808'              	movf	_currentScannSensor,w
  5634  0038' 2000'              	fcall	___bmul
  5635  0039' 3E05               	addlw	5
  5636  003A' 3E00'              	addlw	(low (_mtouch_sensor| 0))& (0+255)
  5637  003B' 0086               	movwf	6
  5638  003C' 0187               	clrf	7
  5639  003D' 0801               	movf	1,w
  5640  003E' 0020               	movlb	0	; select bank0
  5641  003F' 0607'              	xorwf	_packet_counter,w
  5642  0040' 1903               	skipnz
  5643  0041' 2855'              	goto	l2058
  5644                           
  5645                           ;mtouch_sensor.c: 371: {
  5646                           ;mtouch_sensor.c: 372: if(packet_counter & 0x01)
  5647  0042' 1C07'              	btfss	_packet_counter,0
  5648  0043' 2851'              	goto	l2056
  5649                           
  5650                           ;mtouch_sensor.c: 373: {
  5651                           ;mtouch_sensor.c: 374: result = ((mtouch_sensor_adcsample_t)1024) - result;
  5652  0044' 0906'              	comf	Sensor_Acq_ExecuteScan@result,w
  5653  0045' 0084'              	movwf	??_Sensor_Acq_ExecuteScan
  5654  0046' 0907'              	comf	Sensor_Acq_ExecuteScan@result+1,w
  5655  0047' 0085'              	movwf	??_Sensor_Acq_ExecuteScan+1
  5656  0048' 0A84'              	incf	??_Sensor_Acq_ExecuteScan,f
  5657  0049' 1903               	skipnz
  5658  004A' 0A85'              	incf	??_Sensor_Acq_ExecuteScan+1,f
  5659  004B' 0804'              	movf	??_Sensor_Acq_ExecuteScan,w
  5660  004C' 3E00               	addlw	0
  5661  004D' 0086'              	movwf	Sensor_Acq_ExecuteScan@result
  5662  004E' 3004               	movlw	4
  5663  004F' 3D05'              	addwfc	??_Sensor_Acq_ExecuteScan+1,w
  5664  0050' 0087'              	movwf	Sensor_Acq_ExecuteScan@result+1
  5665  0051'                    l2056:	
  5666                           
  5667                           ;mtouch_sensor.c: 375: }
  5668                           ;mtouch_sensor.c: 376: packet_sample += result;
  5669  0051' 0806'              	movf	Sensor_Acq_ExecuteScan@result,w
  5670  0052' 0782'              	addwf	_packet_sample,f
  5671  0053' 0807'              	movf	Sensor_Acq_ExecuteScan@result+1,w
  5672  0054' 3D83'              	addwfc	_packet_sample+1,f
  5673  0055'                    l2058:	
  5674                           
  5675                           ;mtouch_sensor.c: 377: }
  5676                           ;mtouch_sensor.c: 378: packet_counter--;
  5677  0055' 3001               	movlw	1
  5678  0056' 0287'              	subwf	_packet_counter,f
  5679                           
  5680                           ;mtouch_sensor.c: 379: }
  5681  0057' 0008               	return
  5682  0058'                    l2060:	
  5683                           
  5684                           ;mtouch_sensor.c: 380: else
  5685                           ;mtouch_sensor.c: 381: {
  5686                           ;mtouch_sensor.c: 382: packet_sample += result;
  5687  0058' 0806'              	movf	Sensor_Acq_ExecuteScan@result,w
  5688  0059' 0782'              	addwf	_packet_sample,f
  5689  005A' 0807'              	movf	Sensor_Acq_ExecuteScan@result+1,w
  5690  005B' 3D83'              	addwfc	_packet_sample+1,f
  5691                           
  5692                           ;mtouch_sensor.c: 383: sensor_globalFlags.packet_done = (uint8_t)1;
  5693  005C' 1409'              	bsf	_sensor_globalFlags,0	;volatile
  5694  005D' 0008               	return
  5695  005E'                    __end_of_Sensor_Acq_ExecuteScan:	
  5696                           
  5697                           	psect	swtext1
  5698  0000'                    __pswtext1:	
  5699  0000'                    S2776:	
  5700  0000' 2828'              	ljmp	l2774
  5701                           
  5702                           	psect	swtext2
  5703  0000'                    __pswtext2:	
  5704  0000'                    S2778:	
  5705  0000' 280C'              	ljmp	l2042
  5706  0001' 2812'              	ljmp	l2044
  5707                           
  5708                           	psect	text31
  5709  0000'                    __ptext31:	
  5710 ;; *************** function _MTOUCH_CVD_ScanB_0 *****************
  5711 ;; Defined at:
  5712 ;;		line 131 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;		None
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		wreg
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5726 ;;      Params:         0       0       0       0
  5727 ;;      Locals:         0       0       0       0
  5728 ;;      Temps:          0       0       0       0
  5729 ;;      Totals:         0       0       0       0
  5730 ;;Total ram usage:        0 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		_Sensor_Acq_ExecuteScan
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           
  5740                           ;psect for function _MTOUCH_CVD_ScanB_0
  5741  0000'                    _MTOUCH_CVD_ScanB_0:	
  5742                           
  5743                           ;incstack = 0
  5744                           ; Regs used in _MTOUCH_CVD_ScanB_0: [wreg]
  5745  0000' 0022               	banksel	268	;# 
  5746  0001' 110C               	bcf	12,2	;# 
  5747  0002' 0021               	banksel	157	;# 
  5748  0003' 3009               	movlw	9	;# 
  5749  0004' 009D               	movwf	29	;# 
  5750                           
  5751                           ;mtouch_sensor_scan.c: 143: _delay(10);
  5752  0005' 3003               	movlw	3
  5753  0006'                    u2357:	
  5754  0006' 0B89               	decfsz	9,f
  5755  0007' 2806'              	goto	u2357
  5756  0008' 0000               	nop
  5757  0009' 3071               	movlw	113	;# 
  5758  000A' 009D               	movwf	29	;# 
  5759  000B' 0022               	banksel	268	;# 
  5760  000C' 150C               	bsf	12,2	;# 
  5761  000D' 0021               	banksel	157	;# 
  5762  000E' 308C               	movlw	140	;# 
  5763  000F' 0084               	movwf	4	;# 
  5764  0010' 3000               	movlw	0	;# 
  5765  0011' 0085               	movwf	5	;# 
  5766  0012' 300C               	movlw	12	;# 
  5767  0013' 0086               	movwf	6	;# 
  5768  0014' 3001               	movlw	1	;# 
  5769  0015' 0087               	movwf	7	;# 
  5770  0016' 3009               	movlw	9	;# 
  5771  0017' 1500               	bsf	0,2	;# 
  5772                           
  5773                           ;mtouch_sensor_scan.c: 167: _delay(0);
  5774  0018' 009D               	movwf	29	;# 
  5775  0019' 1081               	bcf	1,1	;# 
  5776                           
  5777                           ;mtouch_sensor_scan.c: 174: _delay(5);
  5778  001A' 3200               	nop2	;2 cycle nop
  5779  001B' 3200               	nop2	;2 cycle nop
  5780  001C' 0000               	nop
  5781  001D' 0021               	banksel	157	;# 
  5782  001E' 149D               	bsf	29,1	;# 
  5783                           
  5784                           ;mtouch_sensor_scan.c: 181: _delay(3);
  5785  001F' 3200               	nop2	;2 cycle nop
  5786  0020' 0000               	nop
  5787  0021' 0022               	banksel	268	;# 
  5788  0022' 110C               	bcf	12,2	;# 
  5789  0023' 1100               	bcf	0,2	;# 
  5790  0024' 0008               	return
  5791  0025'                    __end_of_MTOUCH_CVD_ScanB_0:	
  5792                           
  5793                           	psect	text32
  5794  0000'                    __ptext32:	
  5795 ;; *************** function _MTOUCH_CVD_ScanA_0 *****************
  5796 ;; Defined at:
  5797 ;;		line 62 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;		None
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;		None
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5811 ;;      Params:         0       0       0       0
  5812 ;;      Locals:         0       0       0       0
  5813 ;;      Temps:          0       0       0       0
  5814 ;;      Totals:         0       0       0       0
  5815 ;;Total ram usage:        0 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_Sensor_Acq_ExecuteScan
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _MTOUCH_CVD_ScanA_0
  5826  0000'                    _MTOUCH_CVD_ScanA_0:	
  5827                           
  5828                           ;incstack = 0
  5829                           ; Regs used in _MTOUCH_CVD_ScanA_0: [wreg]
  5830  0000' 0022               	banksel	268	;# 
  5831  0001' 150C               	bsf	12,2	;# 
  5832  0002' 0021               	banksel	157	;# 
  5833  0003' 3009               	movlw	9	;# 
  5834  0004' 009D               	movwf	29	;# 
  5835                           
  5836                           ;mtouch_sensor_scan.c: 74: _delay(10);
  5837  0005' 3003               	movlw	3
  5838  0006'                    u2367:	
  5839  0006' 0B89               	decfsz	9,f
  5840  0007' 2806'              	goto	u2367
  5841  0008' 0000               	nop
  5842  0009' 3071               	movlw	113	;# 
  5843  000A' 009D               	movwf	29	;# 
  5844  000B' 0022               	banksel	268	;# 
  5845  000C' 110C               	bcf	12,2	;# 
  5846  000D' 0021               	banksel	157	;# 
  5847  000E' 308C               	movlw	140	;# 
  5848  000F' 0084               	movwf	4	;# 
  5849  0010' 3000               	movlw	0	;# 
  5850  0011' 0085               	movwf	5	;# 
  5851  0012' 300C               	movlw	12	;# 
  5852  0013' 0086               	movwf	6	;# 
  5853  0014' 3001               	movlw	1	;# 
  5854  0015' 0087               	movwf	7	;# 
  5855  0016' 3009               	movlw	9	;# 
  5856  0017' 1500               	bsf	0,2	;# 
  5857                           
  5858                           ;mtouch_sensor_scan.c: 98: _delay(0);
  5859  0018' 009D               	movwf	29	;# 
  5860  0019' 1481               	bsf	1,1	;# 
  5861                           
  5862                           ;mtouch_sensor_scan.c: 104: _delay(5);
  5863  001A' 3200               	nop2	;2 cycle nop
  5864  001B' 3200               	nop2	;2 cycle nop
  5865  001C' 0000               	nop
  5866  001D' 0021               	banksel	157	;# 
  5867  001E' 149D               	bsf	29,1	;# 
  5868                           
  5869                           ;mtouch_sensor_scan.c: 111: _delay(3);
  5870  001F' 3200               	nop2	;2 cycle nop
  5871  0020' 0000               	nop
  5872  0021' 0022               	banksel	268	;# 
  5873  0022' 150C               	bsf	12,2	;# 
  5874  0023' 1100               	bcf	0,2	;# 
  5875  0024' 0008               	return
  5876  0025'                    __end_of_MTOUCH_CVD_ScanA_0:	
  5877                           
  5878                           	psect	text33
  5879  0000'                    __ptext33:	
  5880 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  5881 ;; Defined at:
  5882 ;;		line 181 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;		None
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;		None
  5887 ;; Return value:  Size  Location     Type
  5888 ;;                  1    wreg      void 
  5889 ;; Registers used:
  5890 ;;		wreg, status,2
  5891 ;; Tracked objects:
  5892 ;;		On entry : 0/0
  5893 ;;		On exit  : 0/0
  5894 ;;		Unchanged: 0/0
  5895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5896 ;;      Params:         0       0       0       0
  5897 ;;      Locals:         0       0       0       0
  5898 ;;      Temps:          0       0       0       0
  5899 ;;      Totals:         0       0       0       0
  5900 ;;Total ram usage:        0 bytes
  5901 ;; Hardware stack levels used:    1
  5902 ;; This function calls:
  5903 ;;		Nothing
  5904 ;; This function is called by:
  5905 ;;		_MTOUCH_Initialize
  5906 ;;		_Sensor_Acq_ExecutePacket
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           
  5911                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  5912  0000'                    _MTOUCH_Sensor_Scan_Initialize:	
  5913                           
  5914                           ;mtouch_sensor.c: 184: ADCON0 = (uint8_t)0;
  5915                           
  5916                           ;incstack = 0
  5917                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2]
  5918  0000' 0021               	movlb	1	; select bank1
  5919  0001' 019D               	clrf	29	;volatile
  5920                           
  5921                           ;mtouch_sensor.c: 185: ADCON1 = (uint8_t)( 0x1<<7 | 0x5<<4 | 0x0 );
  5922  0002' 30D0               	movlw	208
  5923  0003' 009E               	movwf	30	;volatile
  5924                           
  5925                           ;mtouch_sensor.c: 186: ADACT = (uint8_t)0;
  5926  0004' 019F               	clrf	31	;volatile
  5927  0005' 0008               	return
  5928  0006'                    __end_of_MTOUCH_Sensor_Scan_Initialize:	
  5929                           
  5930                           	psect	text34
  5931  0000'                    __ptext34:	
  5932 ;; *************** function _MTOUCH_Random *****************
  5933 ;; Defined at:
  5934 ;;		line 66 in file "mcc_generated_files/mtouch/mtouch_random.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;		None
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      unsigned char 
  5941 ;; Registers used:
  5942 ;;		wreg, status,2, status,0
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5948 ;;      Params:         0       0       0       0
  5949 ;;      Locals:         0       0       0       0
  5950 ;;      Temps:          1       0       0       0
  5951 ;;      Totals:         1       0       0       0
  5952 ;;Total ram usage:        1 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_Sensor_Acq_ExecutePacket
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           
  5962                           ;psect for function _MTOUCH_Random
  5963  0000'                    _MTOUCH_Random:	
  5964                           
  5965                           ;mtouch_random.c: 68: static MTOUCH_RANDOM_t seed = (MTOUCH_RANDOM_t)0;
  5966                           ;mtouch_random.c: 70: if ((seed & (MTOUCH_RANDOM_t)1) != (MTOUCH_RANDOM_t)0)
  5967                           
  5968                           ;incstack = 0
  5969                           ; Regs used in _MTOUCH_Random: [wreg+status,2+status,0]
  5970  0000' 0020               	movlb	0	; select bank0
  5971  0001' 1C0A'              	btfss	MTOUCH_Random@seed,0
  5972  0002' 2805'              	goto	l2022
  5973                           
  5974                           ;mtouch_random.c: 71: {
  5975                           ;mtouch_random.c: 73: seed = seed >> (uint8_t)1;
  5976  0003' 360A'              	lsrf	MTOUCH_Random@seed,w
  5977  0004' 280B'              	goto	L4
  5978  0005'                    l2022:	
  5979                           ;mtouch_random.c: 74: }
  5980                           
  5981                           
  5982                           ;mtouch_random.c: 75: else
  5983                           ;mtouch_random.c: 76: {
  5984                           ;mtouch_random.c: 81: seed = seed >> (uint8_t)1;
  5985  0005' 360A'              	lsrf	MTOUCH_Random@seed,w
  5986  0006' 0080'              	movwf	??_MTOUCH_Random
  5987  0007' 0800'              	movf	??_MTOUCH_Random,w
  5988  0008' 008A'              	movwf	MTOUCH_Random@seed
  5989                           
  5990                           ;mtouch_random.c: 82: seed = seed ^ (MTOUCH_RANDOM_t)0xB4;
  5991  0009' 080A'              	movf	MTOUCH_Random@seed,w
  5992  000A' 3AB4               	xorlw	180
  5993  000B'                    L4:	
  5994  000B' 0080'              	movwf	??_MTOUCH_Random
  5995  000C' 0800'              	movf	??_MTOUCH_Random,w
  5996  000D' 008A'              	movwf	MTOUCH_Random@seed
  5997                           
  5998                           ;mtouch_random.c: 83: }
  5999                           ;mtouch_random.c: 85: return (uint8_t)seed & 0x0F;
  6000  000E' 080A'              	movf	MTOUCH_Random@seed,w
  6001  000F' 390F               	andlw	15
  6002  0010' 0008               	return
  6003  0011'                    __end_of_MTOUCH_Random:	
  6004                           
  6005                           	psect	text35
  6006  0000'                    __ptext35:	
  6007 ;; *************** function _MTOUCH_Delay *****************
  6008 ;; Defined at:
  6009 ;;		line 337 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;		None
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  i               1    1[COMMON] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6023 ;;      Params:         0       0       0       0
  6024 ;;      Locals:         1       0       0       0
  6025 ;;      Temps:          1       0       0       0
  6026 ;;      Totals:         2       0       0       0
  6027 ;;Total ram usage:        2 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_Sensor_Acq_ExecutePacket
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _MTOUCH_Delay
  6038  0000'                    _MTOUCH_Delay:	
  6039                           
  6040                           ;mtouch_sensor.c: 339: for(uint8_t i = sample_delay;i>0;i--)
  6041                           
  6042                           ;incstack = 0
  6043                           ; Regs used in _MTOUCH_Delay: [wreg+status,2+status,0]
  6044  0000' 0020               	movlb	0	; select bank0
  6045  0001' 0806'              	movf	_sample_delay,w
  6046  0002' 0080'              	movwf	??_MTOUCH_Delay
  6047  0003' 0800'              	movf	??_MTOUCH_Delay,w
  6048  0004' 0081'              	movwf	MTOUCH_Delay@i
  6049  0005'                    L5:	
  6050  0005' 0801'              	movf	MTOUCH_Delay@i,w
  6051  0006' 1903               	btfsc	3,2
  6052  0007' 0008               	return
  6053                           
  6054                           ;mtouch_sensor.c: 340: { }
  6055  0008' 3001               	movlw	1
  6056  0009' 0281'              	subwf	MTOUCH_Delay@i,f
  6057  000A' 2805'              	goto	L5
  6058  000B'                    __end_of_MTOUCH_Delay:	
  6059                           
  6060                           	psect	text36
  6061  0000'                    __ptext36:	
  6062 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  6063 ;; Defined at:
  6064 ;;		line 160 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;		None
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  button          1   10[BANK0 ] enum E5405
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      void 
  6071 ;; Registers used:
  6072 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6078 ;;      Params:         0       0       0       0
  6079 ;;      Locals:         0       1       0       0
  6080 ;;      Temps:          0       1       0       0
  6081 ;;      Totals:         0       2       0       0
  6082 ;;Total ram usage:        2 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    5
  6085 ;; This function calls:
  6086 ;;		_Button_Service
  6087 ;; This function is called by:
  6088 ;;		_MTOUCH_Service_Mainloop
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           
  6093                           ;psect for function _MTOUCH_Button_ServiceAll
  6094  0000'                    _MTOUCH_Button_ServiceAll:	
  6095                           
  6096                           ;mtouch_button.c: 162: enum mtouch_button_names button;
  6097                           ;mtouch_button.c: 163: for (button = 0; button < 1; button++)
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6101  0000' 0020               	movlb	0	; select bank0
  6102  0001' 018A'              	clrf	MTOUCH_Button_ServiceAll@button
  6103  0002'                    L6:	
  6104  0002' 080A'              	movf	MTOUCH_Button_ServiceAll@button,w
  6105  0003' 1D03               	btfss	3,2
  6106  0004' 0008               	return
  6107                           
  6108                           ;mtouch_button.c: 164: {
  6109                           ;mtouch_button.c: 165: Button_Service(button);
  6110  0005' 080A'              	movf	MTOUCH_Button_ServiceAll@button,w
  6111  0006' 2000'              	fcall	_Button_Service
  6112  0007' 3001               	movlw	1
  6113  0008' 0020               	movlb	0	; select bank0
  6114  0009' 0089'              	movwf	??_MTOUCH_Button_ServiceAll
  6115  000A' 0809'              	movf	??_MTOUCH_Button_ServiceAll,w
  6116  000B' 078A'              	addwf	MTOUCH_Button_ServiceAll@button,f
  6117  000C' 2802'              	goto	L6
  6118  000D'                    __end_of_MTOUCH_Button_ServiceAll:	
  6119                           
  6120                           	psect	text37
  6121  0000'                    __ptext37:	
  6122 ;; *************** function _Button_Service *****************
  6123 ;; Defined at:
  6124 ;;		line 169 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  name            1    wreg     enum E5405
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  name            1    7[BANK0 ] enum E5405
  6129 ;;  button          1    8[BANK0 ] PTR struct .
  6130 ;;		 -> mtouch_button(16), 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6140 ;;      Params:         0       0       0       0
  6141 ;;      Locals:         0       2       0       0
  6142 ;;      Temps:          0       2       0       0
  6143 ;;      Totals:         0       4       0       0
  6144 ;;Total ram usage:        4 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    4
  6147 ;; This function calls:
  6148 ;;		_Button_Deviation_Update
  6149 ;;		_Button_Reading_Update
  6150 ;;		_Button_State_Initializing
  6151 ;;		_Button_State_NotPressed
  6152 ;;		_Button_State_Pressed
  6153 ;;		_MTOUCH_Button_Initialize
  6154 ;;		_MTOUCH_Sensor_isCalibrated
  6155 ;;		_MTOUCH_Sensor_wasSampled
  6156 ;; This function is called by:
  6157 ;;		_MTOUCH_Button_ServiceAll
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _Button_Service
  6163  0000'                    _Button_Service:	
  6164                           
  6165                           ;incstack = 0
  6166                           ; Regs used in _Button_Service: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6167                           ;Button_Service@name stored from wreg
  6168  0000' 0020               	movlb	0	; select bank0
  6169  0001' 0087'              	movwf	Button_Service@name
  6170                           
  6171                           ;mtouch_button.c: 171: mtouch_button_t* button = &mtouch_button[name];
  6172  0002' 0807'              	movf	Button_Service@name,w
  6173  0003' 0085'              	movwf	??_Button_Service
  6174  0004' 3003               	movlw	3
  6175  0005'                    u1705:	
  6176  0005' 3585'              	lslf	??_Button_Service,f
  6177  0006' 3EFF               	addlw	-1
  6178  0007' 1D03               	skipz
  6179  0008' 2805'              	goto	u1705
  6180  0009' 3505'              	lslf	??_Button_Service,w
  6181  000A' 3E00'              	addlw	(low (_mtouch_button| 0))& (0+255)
  6182  000B' 0086'              	movwf	??_Button_Service+1
  6183  000C' 0806'              	movf	??_Button_Service+1,w
  6184  000D' 0088'              	movwf	Button_Service@button
  6185                           
  6186                           ;mtouch_button.c: 173: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  6187  000E' 0A08'              	incf	Button_Service@button,w
  6188  000F' 0086               	movwf	6
  6189  0010' 0187               	clrf	7
  6190  0011' 0801               	movf	1,w
  6191  0012' 2000'              	fcall	_MTOUCH_Sensor_wasSampled
  6192  0013' 3A00               	xorlw	0
  6193  0014' 1903               	skipnz
  6194  0015' 0008               	return
  6195  0016' 0020               	movlb	0	; select bank0
  6196  0017' 0A08'              	incf	Button_Service@button,w
  6197  0018' 0086               	movwf	6
  6198  0019' 0187               	clrf	7
  6199  001A' 0801               	movf	1,w
  6200  001B' 2000'              	fcall	_MTOUCH_Sensor_isCalibrated
  6201  001C' 3A00               	xorlw	0
  6202  001D' 1903               	skipnz
  6203  001E' 0008               	return
  6204                           
  6205                           ;mtouch_button.c: 174: {
  6206                           ;mtouch_button.c: 175: Button_Reading_Update(button);
  6207  001F' 0020               	movlb	0	; select bank0
  6208  0020' 0808'              	movf	Button_Service@button,w
  6209  0021' 2000'              	fcall	_Button_Reading_Update
  6210                           
  6211                           ;mtouch_button.c: 176: Button_Deviation_Update(button);
  6212  0022' 0020               	movlb	0	; select bank0
  6213  0023' 0808'              	movf	Button_Service@button,w
  6214  0024' 2000'              	fcall	_Button_Deviation_Update
  6215                           
  6216                           ;mtouch_button.c: 178: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  6217  0025' 0020               	movlb	0	; select bank0
  6218  0026' 0808'              	movf	Button_Service@button,w
  6219  0027' 3E02               	addlw	2
  6220  0028' 0086               	movwf	6
  6221  0029' 0187               	clrf	7
  6222  002A' 3003               	movlw	3
  6223  002B' 0201               	subwf	1,w
  6224  002C' 1C03               	skipc
  6225  002D' 2833'              	goto	l189
  6226                           
  6227                           ;mtouch_button.c: 179: {
  6228                           ;mtouch_button.c: 180: MTOUCH_Button_Initialize(button->name);
  6229  002E' 0808'              	movf	Button_Service@button,w
  6230  002F' 0086               	movwf	6
  6231  0030' 0187               	clrf	7
  6232  0031' 0801               	movf	1,w
  6233  0032' 2000'              	fcall	_MTOUCH_Button_Initialize
  6234  0033'                    l189:	
  6235                           
  6236                           ;mtouch_button.c: 181: }
  6237                           ;mtouch_button.c: 182: Button_StateMachine[button->state](button);
  6238  0033' 0020               	movlb	0	; select bank0
  6239  0034' 0808'              	movf	Button_Service@button,w
  6240  0035' 0085'              	movwf	??_Button_Service
  6241  0036' 0805'              	movf	??_Button_Service,w
  6242  0037' 008D'              	movwf	Button_State_Pressed@button
  6243  0038' 0808'              	movf	Button_Service@button,w
  6244  0039' 3E02               	addlw	2
  6245  003A' 0086               	movwf	6
  6246  003B' 0187               	clrf	7
  6247  003C' 3501               	lslf	1,w
  6248  003D' 3E00'              	addlw	(low (_Button_StateMachine| 0))& (0+255)
  6249  003E' 0086               	movwf	6
  6250  003F' 0187               	clrf	7
  6251  0040' 3F41               	moviw [1]fsr1
  6252  0041' 008A               	movwf	10
  6253  0042' 3F40               	moviw [0]fsr1
  6254  0043' 000A               	callw
  6255  0044' 3180'              	pagesel	$
  6256  0045' 0008               	return
  6257  0046'                    __end_of_Button_Service:	
  6258                           
  6259                           	psect	text38
  6260  0000'                    __ptext38:	
  6261 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  6262 ;; Defined at:
  6263 ;;		line 529 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;  sensor          1    wreg     enum E5394
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  sensor          1    5[COMMON] enum E5394
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      unsigned char 
  6270 ;; Registers used:
  6271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6277 ;;      Params:         0       0       0       0
  6278 ;;      Locals:         1       0       0       0
  6279 ;;      Temps:          1       0       0       0
  6280 ;;      Totals:         2       0       0       0
  6281 ;;Total ram usage:        2 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    1
  6284 ;; This function calls:
  6285 ;;		___bmul
  6286 ;; This function is called by:
  6287 ;;		_Button_Service
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           
  6292                           ;psect for function _MTOUCH_Sensor_wasSampled
  6293  0000'                    _MTOUCH_Sensor_wasSampled:	
  6294                           
  6295                           ;incstack = 0
  6296                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6297                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  6298  0000' 0085'              	movwf	MTOUCH_Sensor_wasSampled@sensor
  6299                           
  6300                           ;mtouch_sensor.c: 531: if(sensor < 1)
  6301  0001' 0805'              	movf	MTOUCH_Sensor_wasSampled@sensor,w
  6302  0002' 1D03               	btfss	3,2
  6303  0003' 2811'              	goto	l2190
  6304                           
  6305                           ;mtouch_sensor.c: 532: return (bool)mtouch_sensor[sensor].sampled;
  6306  0004' 3009               	movlw	9
  6307  0005' 0084'              	movwf	??_MTOUCH_Sensor_wasSampled
  6308  0006' 0804'              	movf	??_MTOUCH_Sensor_wasSampled,w
  6309  0007' 0080'              	movwf	___bmul@multiplicand
  6310  0008' 0805'              	movf	MTOUCH_Sensor_wasSampled@sensor,w
  6311  0009' 2000'              	fcall	___bmul
  6312  000A' 3E08               	addlw	8
  6313  000B' 3E00'              	addlw	(low (_mtouch_sensor| 0))& (0+255)
  6314  000C' 0086               	movwf	6
  6315  000D' 0187               	clrf	7
  6316  000E' 0C01               	rrf	1,w
  6317  000F' 3901               	andlw	1
  6318  0010' 0008               	return
  6319  0011'                    l2190:	
  6320                           
  6321                           ;mtouch_sensor.c: 533: else
  6322                           ;mtouch_sensor.c: 534: return 0;
  6323  0011' 3000               	movlw	0
  6324  0012' 0008               	return
  6325  0013'                    __end_of_MTOUCH_Sensor_wasSampled:	
  6326                           
  6327                           	psect	text39
  6328  0000'                    __ptext39:	
  6329 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  6330 ;; Defined at:
  6331 ;;		line 502 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  sensor          1    wreg     enum E5394
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  sensor          1    0[COMMON] enum E5394
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      unsigned char 
  6338 ;; Registers used:
  6339 ;;		wreg
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6345 ;;      Params:         0       0       0       0
  6346 ;;      Locals:         0       0       0       0
  6347 ;;      Temps:          0       0       0       0
  6348 ;;      Totals:         0       0       0       0
  6349 ;;Total ram usage:        0 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; This function calls:
  6352 ;;		Nothing
  6353 ;; This function is called by:
  6354 ;;		_Button_Service
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           
  6359                           ;psect for function _MTOUCH_Sensor_isCalibrated
  6360  0000'                    _MTOUCH_Sensor_isCalibrated:	
  6361                           
  6362                           ;mtouch_sensor.c: 505: return 1;
  6363                           
  6364                           ;incstack = 0
  6365                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg]
  6366  0000' 3001               	movlw	1
  6367  0001' 0008               	return
  6368  0002'                    __end_of_MTOUCH_Sensor_isCalibrated:	
  6369                           
  6370                           	psect	text40
  6371  0000'                    __ptext40:	
  6372 ;; *************** function _Button_State_NotPressed *****************
  6373 ;; Defined at:
  6374 ;;		line 205 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  button          1   13[COMMON] PTR struct .
  6377 ;;		 -> mtouch_button(16), 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;		None
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      void 
  6382 ;; Registers used:
  6383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6389 ;;      Params:         1       0       0       0
  6390 ;;      Locals:         0       0       0       0
  6391 ;;      Temps:          0       2       0       0
  6392 ;;      Totals:         1       2       0       0
  6393 ;;Total ram usage:        3 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    2
  6396 ;; This function calls:
  6397 ;;		_Button_Baseline_Update
  6398 ;;		_Button_DefaultCallback
  6399 ;;		_MTOUCH_Button_Initialize
  6400 ;; This function is called by:
  6401 ;;		_Button_Service
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           
  6406                           ;psect for function _Button_State_NotPressed
  6407  0000'                    _Button_State_NotPressed:	
  6408                           
  6409                           ;mtouch_button.c: 208: if ((button->deviation) < (mtouch_button_deviation_t)(mtouch_butt
      +                          on_deviation_t)-10)
  6410                           
  6411                           ;incstack = 0
  6412                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6413  0000' 080D'              	movf	Button_State_NotPressed@button,w
  6414  0001' 3E09               	addlw	9
  6415  0002' 0086               	movwf	6
  6416  0003' 0187               	clrf	7
  6417  0004' 0801               	movf	1,w
  6418  0005' 3A80               	xorlw	128
  6419  0006' 3E8A               	addlw	138
  6420  0007' 1803               	skipnc
  6421  0008' 282F'              	goto	l2244
  6422                           
  6423                           ;mtouch_button.c: 209: {
  6424                           ;mtouch_button.c: 210: (button->counter)++;
  6425  0009' 080D'              	movf	Button_State_NotPressed@button,w
  6426  000A' 3E0A               	addlw	10
  6427  000B' 0086               	movwf	6
  6428  000C' 0187               	clrf	7
  6429  000D' 3001               	movlw	1
  6430  000E' 0781               	addwf	1,f
  6431  000F' 3141               	addfsr 1,1
  6432  0010' 1803               	skipnc
  6433  0011' 0A81               	incf	1,f
  6434                           
  6435                           ;mtouch_button.c: 211: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)32))
  6436  0012' 080D'              	movf	Button_State_NotPressed@button,w
  6437  0013' 3E0A               	addlw	10
  6438  0014' 0086               	movwf	6
  6439  0015' 0187               	clrf	7
  6440  0016' 3F40               	moviw [0]fsr1
  6441  0017' 0020               	movlb	0	; select bank0
  6442  0018' 0080'              	movwf	??_Button_State_NotPressed
  6443  0019' 3F41               	moviw [1]fsr1
  6444  001A' 0081'              	movwf	??_Button_State_NotPressed+1
  6445  001B' 3000               	movlw	0
  6446  001C' 0201'              	subwf	??_Button_State_NotPressed+1,w
  6447  001D' 3021               	movlw	33
  6448  001E' 1903               	skipnz
  6449  001F' 0200'              	subwf	??_Button_State_NotPressed,w
  6450  0020' 1C03               	skipc
  6451  0021' 2863'              	goto	l201
  6452                           
  6453                           ;mtouch_button.c: 212: {
  6454                           ;mtouch_button.c: 213: button->counter = (mtouch_button_statecounter_t)0;
  6455  0022' 080D'              	movf	Button_State_NotPressed@button,w
  6456  0023' 3E0A               	addlw	10
  6457  0024' 0086               	movwf	6
  6458  0025' 0187               	clrf	7
  6459  0026' 3000               	movlw	0
  6460  0027' 3FC0               	movwi [0]fsr1
  6461  0028' 3FC1               	movwi [1]fsr1
  6462                           
  6463                           ;mtouch_button.c: 214: MTOUCH_Button_Initialize(button->name);
  6464  0029' 080D'              	movf	Button_State_NotPressed@button,w
  6465  002A' 0086               	movwf	6
  6466  002B' 0187               	clrf	7
  6467  002C' 0801               	movf	1,w
  6468  002D' 2000'              	fcall	_MTOUCH_Button_Initialize
  6469                           
  6470                           ;mtouch_button.c: 215: }
  6471                           ;mtouch_button.c: 216: }
  6472  002E' 2863'              	goto	l201
  6473  002F'                    l2244:	
  6474                           
  6475                           ;mtouch_button.c: 218: else if ((button->deviation) > (button->threshold))
  6476  002F' 080D'              	movf	Button_State_NotPressed@button,w
  6477  0030' 3E0E               	addlw	14
  6478  0031' 0086               	movwf	6
  6479  0032' 0187               	clrf	7
  6480  0033' 0801               	movf	1,w
  6481  0034' 3A80               	xorlw	128
  6482  0035' 0020               	movlb	0	; select bank0
  6483  0036' 0080'              	movwf	??_Button_State_NotPressed
  6484  0037' 080D'              	movf	Button_State_NotPressed@button,w
  6485  0038' 3E09               	addlw	9
  6486  0039' 0086               	movwf	6
  6487  003A' 0187               	clrf	7
  6488  003B' 0801               	movf	1,w
  6489  003C' 3A80               	xorlw	128
  6490  003D' 0280'              	subwf	??_Button_State_NotPressed,f
  6491  003E' 1803               	skipnc
  6492  003F' 285C'              	goto	l2250
  6493                           
  6494                           ;mtouch_button.c: 219: {
  6495                           ;mtouch_button.c: 221: button->state = MTOUCH_BUTTON_STATE_pressed;
  6496  0040' 3002               	movlw	2
  6497  0041' 0080'              	movwf	??_Button_State_NotPressed
  6498  0042' 080D'              	movf	Button_State_NotPressed@button,w
  6499  0043' 3E02               	addlw	2
  6500  0044' 0086               	movwf	6
  6501  0045' 0187               	clrf	7
  6502  0046' 0800'              	movf	??_Button_State_NotPressed,w
  6503  0047' 0081               	movwf	1
  6504                           
  6505                           ;mtouch_button.c: 222: button->counter = (mtouch_button_statecounter_t)0;
  6506  0048' 080D'              	movf	Button_State_NotPressed@button,w
  6507  0049' 3E0A               	addlw	10
  6508  004A' 0086               	movwf	6
  6509  004B' 0187               	clrf	7
  6510  004C' 3000               	movlw	0
  6511  004D' 3FC0               	movwi [0]fsr1
  6512  004E' 3FC1               	movwi [1]fsr1
  6513                           
  6514                           ;mtouch_button.c: 223: callback_pressed(button->name);
  6515  004F' 080D'              	movf	Button_State_NotPressed@button,w
  6516  0050' 0086               	movwf	6
  6517  0051' 0187               	clrf	7
  6518  0052' 0801               	movf	1,w
  6519  0053' 0080'              	movwf	??_Button_State_NotPressed
  6520  0054' 0800'              	movf	??_Button_State_NotPressed,w
  6521  0055' 0080'              	movwf	Button_DefaultCallback@button
  6522  0056' 080F'              	movf	_callback_pressed+1,w
  6523  0057' 008A               	movwf	10
  6524  0058' 080E'              	movf	_callback_pressed,w
  6525  0059' 000A               	callw
  6526  005A' 3180'              	pagesel	$
  6527                           
  6528                           ;mtouch_button.c: 224: }
  6529  005B' 2863'              	goto	l201
  6530  005C'                    l2250:	
  6531                           
  6532                           ;mtouch_button.c: 225: else
  6533                           ;mtouch_button.c: 226: {
  6534                           ;mtouch_button.c: 228: button->counter = (mtouch_button_statecounter_t)0;
  6535  005C' 080D'              	movf	Button_State_NotPressed@button,w
  6536  005D' 3E0A               	addlw	10
  6537  005E' 0086               	movwf	6
  6538  005F' 0187               	clrf	7
  6539  0060' 3000               	movlw	0
  6540  0061' 3FC0               	movwi [0]fsr1
  6541  0062' 3FC1               	movwi [1]fsr1
  6542  0063'                    l201:	
  6543                           
  6544                           ;mtouch_button.c: 229: }
  6545                           ;mtouch_button.c: 232: (button->baseline_count)++;
  6546  0063' 080D'              	movf	Button_State_NotPressed@button,w
  6547  0064' 3E0C               	addlw	12
  6548  0065' 0086               	movwf	6
  6549  0066' 0187               	clrf	7
  6550  0067' 3001               	movlw	1
  6551  0068' 0781               	addwf	1,f
  6552  0069' 3141               	addfsr 1,1
  6553  006A' 1803               	skipnc
  6554  006B' 0A81               	incf	1,f
  6555                           
  6556                           ;mtouch_button.c: 233: if ((button->baseline_count) > ((mtouch_button_baselinecounter_t)
      +                          32))
  6557  006C' 080D'              	movf	Button_State_NotPressed@button,w
  6558  006D' 3E0C               	addlw	12
  6559  006E' 0086               	movwf	6
  6560  006F' 0187               	clrf	7
  6561  0070' 3F40               	moviw [0]fsr1
  6562  0071' 0020               	movlb	0	; select bank0
  6563  0072' 0080'              	movwf	??_Button_State_NotPressed
  6564  0073' 3F41               	moviw [1]fsr1
  6565  0074' 0081'              	movwf	??_Button_State_NotPressed+1
  6566  0075' 3000               	movlw	0
  6567  0076' 0201'              	subwf	??_Button_State_NotPressed+1,w
  6568  0077' 3021               	movlw	33
  6569  0078' 1903               	skipnz
  6570  0079' 0200'              	subwf	??_Button_State_NotPressed,w
  6571  007A' 1C03               	skipc
  6572  007B' 0008               	return
  6573                           
  6574                           ;mtouch_button.c: 234: {
  6575                           ;mtouch_button.c: 235: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  6576  007C' 080D'              	movf	Button_State_NotPressed@button,w
  6577  007D' 3E0C               	addlw	12
  6578  007E' 0086               	movwf	6
  6579  007F' 0187               	clrf	7
  6580  0080' 3000               	movlw	0
  6581  0081' 3FC0               	movwi [0]fsr1
  6582  0082' 3FC1               	movwi [1]fsr1
  6583                           
  6584                           ;mtouch_button.c: 236: Button_Baseline_Update(button);
  6585  0083' 080D'              	movf	Button_State_NotPressed@button,w
  6586  0084' 2000'              	fcall	_Button_Baseline_Update
  6587  0085' 0008               	return
  6588  0086'                    __end_of_Button_State_NotPressed:	
  6589                           
  6590                           	psect	text41
  6591  0000'                    __ptext41:	
  6592 ;; *************** function _Button_State_Initializing *****************
  6593 ;; Defined at:
  6594 ;;		line 186 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  button          1   13[COMMON] PTR struct .
  6597 ;;		 -> mtouch_button(16), 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  1    wreg      void 
  6602 ;; Registers used:
  6603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6609 ;;      Params:         1       0       0       0
  6610 ;;      Locals:         0       0       0       0
  6611 ;;      Temps:          0       4       0       0
  6612 ;;      Totals:         1       4       0       0
  6613 ;;Total ram usage:        5 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    3
  6616 ;; This function calls:
  6617 ;;		_Button_Baseline_Initialize
  6618 ;;		_Button_Baseline_Update
  6619 ;; This function is called by:
  6620 ;;		_Button_Service
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           
  6625                           ;psect for function _Button_State_Initializing
  6626  0000'                    _Button_State_Initializing:	
  6627                           
  6628                           ;mtouch_button.c: 189: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_statecounter_t)16)/2)
  6629                           
  6630                           ;incstack = 0
  6631                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6632  0000' 080D'              	movf	Button_State_Initializing@button,w
  6633  0001' 3E0A               	addlw	10
  6634  0002' 0086               	movwf	6
  6635  0003' 0187               	clrf	7
  6636  0004' 3F40               	moviw [0]fsr1
  6637  0005' 0020               	movlb	0	; select bank0
  6638  0006' 0080'              	movwf	??_Button_State_Initializing
  6639  0007' 3F41               	moviw [1]fsr1
  6640  0008' 0081'              	movwf	??_Button_State_Initializing+1
  6641  0009' 3000               	movlw	0
  6642  000A' 0201'              	subwf	??_Button_State_Initializing+1,w
  6643  000B' 3009               	movlw	9
  6644  000C' 1903               	skipnz
  6645  000D' 0200'              	subwf	??_Button_State_Initializing,w
  6646  000E' 1803               	skipnc
  6647  000F' 2813'              	goto	l2228
  6648                           
  6649                           ;mtouch_button.c: 190: {
  6650                           ;mtouch_button.c: 191: Button_Baseline_Initialize(button);
  6651  0010' 080D'              	movf	Button_State_Initializing@button,w
  6652  0011' 2000'              	fcall	_Button_Baseline_Initialize
  6653                           
  6654                           ;mtouch_button.c: 192: } else {
  6655  0012' 2815'              	goto	l2230
  6656  0013'                    l2228:	
  6657                           
  6658                           ;mtouch_button.c: 193: Button_Baseline_Update(button);
  6659  0013' 080D'              	movf	Button_State_Initializing@button,w
  6660  0014' 2000'              	fcall	_Button_Baseline_Update
  6661  0015'                    l2230:	
  6662                           
  6663                           ;mtouch_button.c: 194: }
  6664                           ;mtouch_button.c: 197: (button->counter)++;
  6665  0015' 080D'              	movf	Button_State_Initializing@button,w
  6666  0016' 3E0A               	addlw	10
  6667  0017' 0086               	movwf	6
  6668  0018' 0187               	clrf	7
  6669  0019' 3001               	movlw	1
  6670  001A' 0781               	addwf	1,f
  6671  001B' 3141               	addfsr 1,1
  6672  001C' 1803               	skipnc
  6673  001D' 0A81               	incf	1,f
  6674                           
  6675                           ;mtouch_button.c: 198: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_statecounter_t)16))
  6676  001E' 080D'              	movf	Button_State_Initializing@button,w
  6677  001F' 3E0A               	addlw	10
  6678  0020' 0086               	movwf	6
  6679  0021' 0187               	clrf	7
  6680  0022' 3F40               	moviw [0]fsr1
  6681  0023' 0020               	movlb	0	; select bank0
  6682  0024' 0080'              	movwf	??_Button_State_Initializing
  6683  0025' 3F41               	moviw [1]fsr1
  6684  0026' 0081'              	movwf	??_Button_State_Initializing+1
  6685  0027' 3000               	movlw	0
  6686  0028' 0201'              	subwf	??_Button_State_Initializing+1,w
  6687  0029' 3010               	movlw	16
  6688  002A' 1903               	skipnz
  6689  002B' 0200'              	subwf	??_Button_State_Initializing,w
  6690  002C' 1C03               	skipc
  6691  002D' 0008               	return
  6692                           
  6693                           ;mtouch_button.c: 199: {
  6694                           ;mtouch_button.c: 200: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4));
  6695  002E' 080D'              	movf	Button_State_Initializing@button,w
  6696  002F' 3E05               	addlw	5
  6697  0030' 0086               	movwf	6
  6698  0031' 0187               	clrf	7
  6699  0032' 3F40               	moviw [0]fsr1
  6700  0033' 0080'              	movwf	??_Button_State_Initializing
  6701  0034' 3F41               	moviw [1]fsr1
  6702  0035' 0081'              	movwf	??_Button_State_Initializing+1
  6703  0036' 3F42               	moviw [2]fsr1
  6704  0037' 0082'              	movwf	??_Button_State_Initializing+2
  6705  0038' 3F43               	moviw [3]fsr1
  6706  0039' 0083'              	movwf	??_Button_State_Initializing+3
  6707  003A' 3004               	movlw	4
  6708  003B'                    u1495:	
  6709  003B' 3683'              	lsrf	??_Button_State_Initializing+3,f
  6710  003C' 0C82'              	rrf	??_Button_State_Initializing+2,f
  6711  003D' 0C81'              	rrf	??_Button_State_Initializing+1,f
  6712  003E' 0C80'              	rrf	??_Button_State_Initializing,f
  6713  003F' 0B89               	decfsz	9,f
  6714  0040' 283B'              	goto	u1495
  6715  0041' 080D'              	movf	Button_State_Initializing@button,w
  6716  0042' 3E03               	addlw	3
  6717  0043' 0086               	movwf	6
  6718  0044' 0187               	clrf	7
  6719  0045' 0800'              	movf	??_Button_State_Initializing,w
  6720  0046' 3FC0               	movwi [0]fsr1
  6721  0047' 0801'              	movf	??_Button_State_Initializing+1,w
  6722  0048' 3FC1               	movwi [1]fsr1
  6723                           
  6724                           ;mtouch_button.c: 201: button->state = MTOUCH_BUTTON_STATE_notPressed;
  6725  0049' 080D'              	movf	Button_State_Initializing@button,w
  6726  004A' 3E02               	addlw	2
  6727  004B' 0086               	movwf	6
  6728  004C' 0187               	clrf	7
  6729  004D' 0181               	clrf	1
  6730  004E' 0A81               	incf	1,f
  6731                           
  6732                           ;mtouch_button.c: 202: button->counter = (mtouch_button_statecounter_t)0;
  6733  004F' 080D'              	movf	Button_State_Initializing@button,w
  6734  0050' 3E0A               	addlw	10
  6735  0051' 0086               	movwf	6
  6736  0052' 0187               	clrf	7
  6737  0053' 3000               	movlw	0
  6738  0054' 3FC0               	movwi [0]fsr1
  6739  0055' 3FC1               	movwi [1]fsr1
  6740  0056' 0008               	return
  6741  0057'                    __end_of_Button_State_Initializing:	
  6742                           
  6743                           	psect	text42
  6744  0000'                    __ptext42:	
  6745 ;; *************** function _Button_State_Pressed *****************
  6746 ;; Defined at:
  6747 ;;		line 240 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  button          1   13[COMMON] PTR struct .
  6750 ;;		 -> mtouch_button(16), 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;		None
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  1    wreg      void 
  6755 ;; Registers used:
  6756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6762 ;;      Params:         1       0       0       0
  6763 ;;      Locals:         0       0       0       0
  6764 ;;      Temps:          0       2       0       0
  6765 ;;      Totals:         1       2       0       0
  6766 ;;Total ram usage:        3 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    2
  6769 ;; This function calls:
  6770 ;;		_Button_DefaultCallback
  6771 ;;		_MTOUCH_Button_Initialize
  6772 ;; This function is called by:
  6773 ;;		_Button_Service
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _Button_State_Pressed
  6779  0000'                    _Button_State_Pressed:	
  6780                           
  6781                           ;mtouch_button.c: 243: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
  6782                           
  6783                           ;incstack = 0
  6784                           ; Regs used in _Button_State_Pressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6785  0000' 080D'              	movf	Button_State_Pressed@button,w
  6786  0001' 3E0A               	addlw	10
  6787  0002' 0086               	movwf	6
  6788  0003' 0187               	clrf	7
  6789  0004' 3F40               	moviw [0]fsr1
  6790  0005' 0020               	movlb	0	; select bank0
  6791  0006' 0080'              	movwf	??_Button_State_Pressed
  6792  0007' 3F41               	moviw [1]fsr1
  6793  0008' 0081'              	movwf	??_Button_State_Pressed+1
  6794  0009' 3003               	movlw	3
  6795  000A' 0201'              	subwf	??_Button_State_Pressed+1,w
  6796  000B' 30E8               	movlw	232
  6797  000C' 1903               	skipnz
  6798  000D' 0200'              	subwf	??_Button_State_Pressed,w
  6799  000E' 1C03               	skipc
  6800  000F' 2823'              	goto	l2260
  6801                           
  6802                           ;mtouch_button.c: 244: {
  6803                           ;mtouch_button.c: 245: MTOUCH_Button_Initialize(button->name);
  6804  0010' 080D'              	movf	Button_State_Pressed@button,w
  6805  0011' 0086               	movwf	6
  6806  0012' 0187               	clrf	7
  6807  0013' 0801               	movf	1,w
  6808  0014' 2000'              	fcall	_MTOUCH_Button_Initialize
  6809                           
  6810                           ;mtouch_button.c: 246: callback_notPressed(button->name);
  6811  0015' 080D'              	movf	Button_State_Pressed@button,w
  6812  0016' 0086               	movwf	6
  6813  0017' 0187               	clrf	7
  6814  0018' 0801               	movf	1,w
  6815  0019' 0020               	movlb	0	; select bank0
  6816  001A' 0080'              	movwf	??_Button_State_Pressed
  6817  001B' 0800'              	movf	??_Button_State_Pressed,w
  6818  001C' 0080'              	movwf	Button_DefaultCallback@button
  6819  001D' 080D'              	movf	_callback_notPressed+1,w
  6820  001E' 008A               	movwf	10
  6821  001F' 080C'              	movf	_callback_notPressed,w
  6822  0020' 000A               	callw
  6823  0021' 3180'              	pagesel	$
  6824                           
  6825                           ;mtouch_button.c: 247: }
  6826  0022' 0008               	return
  6827  0023'                    l2260:	
  6828                           
  6829                           ;mtouch_button.c: 250: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold) >> 1))
  6830  0023' 080D'              	movf	Button_State_Pressed@button,w
  6831  0024' 3E09               	addlw	9
  6832  0025' 0086               	movwf	6
  6833  0026' 0187               	clrf	7
  6834  0027' 0801               	movf	1,w
  6835  0028' 3A80               	xorlw	128
  6836  0029' 0020               	movlb	0	; select bank0
  6837  002A' 0080'              	movwf	??_Button_State_Pressed
  6838  002B' 080D'              	movf	Button_State_Pressed@button,w
  6839  002C' 3E0E               	addlw	14
  6840  002D' 0086               	movwf	6
  6841  002E' 0187               	clrf	7
  6842  002F' 3701               	asrf	1,w
  6843  0030' 3A80               	xorlw	128
  6844  0031' 0280'              	subwf	??_Button_State_Pressed,f
  6845  0032' 1803               	skipnc
  6846  0033' 0008               	return
  6847                           
  6848                           ;mtouch_button.c: 251: {
  6849                           ;mtouch_button.c: 252: button->state = MTOUCH_BUTTON_STATE_notPressed;
  6850  0034' 080D'              	movf	Button_State_Pressed@button,w
  6851  0035' 3E02               	addlw	2
  6852  0036' 0086               	movwf	6
  6853  0037' 0187               	clrf	7
  6854  0038' 0181               	clrf	1
  6855  0039' 0A81               	incf	1,f
  6856                           
  6857                           ;mtouch_button.c: 253: button->counter = (mtouch_button_statecounter_t)0;
  6858  003A' 080D'              	movf	Button_State_Pressed@button,w
  6859  003B' 3E0A               	addlw	10
  6860  003C' 0086               	movwf	6
  6861  003D' 0187               	clrf	7
  6862  003E' 3000               	movlw	0
  6863  003F' 3FC0               	movwi [0]fsr1
  6864  0040' 3FC1               	movwi [1]fsr1
  6865                           
  6866                           ;mtouch_button.c: 254: callback_notPressed(button->name);
  6867  0041' 080D'              	movf	Button_State_Pressed@button,w
  6868  0042' 0086               	movwf	6
  6869  0043' 0187               	clrf	7
  6870  0044' 0801               	movf	1,w
  6871  0045' 0080'              	movwf	??_Button_State_Pressed
  6872  0046' 0800'              	movf	??_Button_State_Pressed,w
  6873  0047' 0080'              	movwf	Button_DefaultCallback@button
  6874  0048' 080D'              	movf	_callback_notPressed+1,w
  6875  0049' 008A               	movwf	10
  6876  004A' 080C'              	movf	_callback_notPressed,w
  6877  004B' 000A               	callw
  6878  004C' 3180'              	pagesel	$
  6879  004D' 0008               	return
  6880  004E'                    __end_of_Button_State_Pressed:	
  6881                           
  6882                           	psect	text43
  6883  0000'                    __ptext43:	
  6884 ;; *************** function _MTOUCH_Button_Initialize *****************
  6885 ;; Defined at:
  6886 ;;		line 130 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  name            1    wreg     enum E5405
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  name            1    2[COMMON] enum E5405
  6891 ;;  button          1    3[COMMON] PTR struct .
  6892 ;;		 -> mtouch_button(16), 
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  1    wreg      void 
  6895 ;; Registers used:
  6896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6902 ;;      Params:         0       0       0       0
  6903 ;;      Locals:         2       0       0       0
  6904 ;;      Temps:          2       0       0       0
  6905 ;;      Totals:         4       0       0       0
  6906 ;;Total ram usage:        4 bytes
  6907 ;; Hardware stack levels used:    1
  6908 ;; Hardware stack levels required when called:    1
  6909 ;; This function calls:
  6910 ;;		_MTOUCH_Sensor_Calibrate
  6911 ;; This function is called by:
  6912 ;;		_MTOUCH_Button_InitializeAll
  6913 ;;		_Button_Service
  6914 ;;		_Button_State_NotPressed
  6915 ;;		_Button_State_Pressed
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function _MTOUCH_Button_Initialize
  6921  0000'                    _MTOUCH_Button_Initialize:	
  6922                           
  6923                           ;incstack = 0
  6924                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6925                           ;MTOUCH_Button_Initialize@name stored from wreg
  6926  0000' 0082'              	movwf	MTOUCH_Button_Initialize@name
  6927                           
  6928                           ;mtouch_button.c: 132: mtouch_button_t* button = &mtouch_button[name];
  6929  0001' 0802'              	movf	MTOUCH_Button_Initialize@name,w
  6930  0002' 0080'              	movwf	??_MTOUCH_Button_Initialize
  6931  0003' 3003               	movlw	3
  6932  0004'                    u1305:	
  6933  0004' 3580'              	lslf	??_MTOUCH_Button_Initialize,f
  6934  0005' 3EFF               	addlw	-1
  6935  0006' 1D03               	skipz
  6936  0007' 2804'              	goto	u1305
  6937  0008' 3500'              	lslf	??_MTOUCH_Button_Initialize,w
  6938  0009' 3E00'              	addlw	(low (_mtouch_button| 0))& (0+255)
  6939  000A' 0081'              	movwf	??_MTOUCH_Button_Initialize+1
  6940  000B' 0801'              	movf	??_MTOUCH_Button_Initialize+1,w
  6941  000C' 0083'              	movwf	MTOUCH_Button_Initialize@button
  6942                           
  6943                           ;mtouch_button.c: 134: button->state = MTOUCH_BUTTON_STATE_initializing;
  6944  000D' 0803'              	movf	MTOUCH_Button_Initialize@button,w
  6945  000E' 3E02               	addlw	2
  6946  000F' 0086               	movwf	6
  6947  0010' 0187               	clrf	7
  6948  0011' 0181               	clrf	1
  6949                           
  6950                           ;mtouch_button.c: 135: button->baseline = (mtouch_button_baseline_t)0;
  6951  0012' 0803'              	movf	MTOUCH_Button_Initialize@button,w
  6952  0013' 3E05               	addlw	5
  6953  0014' 0086               	movwf	6
  6954  0015' 0187               	clrf	7
  6955  0016' 3000               	movlw	0
  6956  0017' 3FC0               	movwi [0]fsr1
  6957  0018' 3000               	movlw	0
  6958  0019' 3FC1               	movwi [1]fsr1
  6959  001A' 3FC2               	movwi [2]fsr1
  6960  001B' 3FC3               	movwi [3]fsr1
  6961                           
  6962                           ;mtouch_button.c: 136: button->counter = (mtouch_button_statecounter_t)0;
  6963  001C' 0803'              	movf	MTOUCH_Button_Initialize@button,w
  6964  001D' 3E0A               	addlw	10
  6965  001E' 0086               	movwf	6
  6966  001F' 0187               	clrf	7
  6967  0020' 3000               	movlw	0
  6968  0021' 3FC0               	movwi [0]fsr1
  6969  0022' 3FC1               	movwi [1]fsr1
  6970                           
  6971                           ;mtouch_button.c: 137: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  6972  0023' 0803'              	movf	MTOUCH_Button_Initialize@button,w
  6973  0024' 3E0C               	addlw	12
  6974  0025' 0086               	movwf	6
  6975  0026' 0187               	clrf	7
  6976  0027' 3000               	movlw	0
  6977  0028' 3FC0               	movwi [0]fsr1
  6978  0029' 3FC1               	movwi [1]fsr1
  6979                           
  6980                           ;mtouch_button.c: 139: MTOUCH_Sensor_Calibrate(button->sensor);
  6981  002A' 0A03'              	incf	MTOUCH_Button_Initialize@button,w
  6982  002B' 0086               	movwf	6
  6983  002C' 0187               	clrf	7
  6984  002D' 0801               	movf	1,w
  6985  002E' 2000'              	fcall	_MTOUCH_Sensor_Calibrate
  6986  002F' 0008               	return
  6987  0030'                    __end_of_MTOUCH_Button_Initialize:	
  6988                           
  6989                           	psect	text44
  6990  0000'                    __ptext44:	
  6991 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  6992 ;; Defined at:
  6993 ;;		line 508 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  sensor          1    wreg     enum E5394
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;  sensor          1    0[COMMON] enum E5394
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      void 
  7000 ;; Registers used:
  7001 ;;		wreg
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7007 ;;      Params:         0       0       0       0
  7008 ;;      Locals:         0       0       0       0
  7009 ;;      Temps:          0       0       0       0
  7010 ;;      Totals:         0       0       0       0
  7011 ;;Total ram usage:        0 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; This function calls:
  7014 ;;		Nothing
  7015 ;; This function is called by:
  7016 ;;		_MTOUCH_Button_Initialize
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           
  7021                           ;psect for function _MTOUCH_Sensor_Calibrate
  7022  0000'                    _MTOUCH_Sensor_Calibrate:	
  7023                           
  7024                           ;incstack = 0
  7025                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
  7026  0000' 0008               	return
  7027  0001'                    __end_of_MTOUCH_Sensor_Calibrate:	
  7028                           
  7029                           	psect	text45
  7030  0000'                    __ptext45:	
  7031 ;; *************** function _Button_DefaultCallback *****************
  7032 ;; Defined at:
  7033 ;;		line 458 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  button          1    0[COMMON] enum E5405
  7036 ;; Auto vars:     Size  Location     Type
  7037 ;;		None
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  1    wreg      void 
  7040 ;; Registers used:
  7041 ;;		None
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7047 ;;      Params:         1       0       0       0
  7048 ;;      Locals:         0       0       0       0
  7049 ;;      Temps:          0       0       0       0
  7050 ;;      Totals:         1       0       0       0
  7051 ;;Total ram usage:        1 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; This function calls:
  7054 ;;		Nothing
  7055 ;; This function is called by:
  7056 ;;		_Button_State_NotPressed
  7057 ;;		_Button_State_Pressed
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           
  7062                           ;psect for function _Button_DefaultCallback
  7063  0000'                    _Button_DefaultCallback:	
  7064                           
  7065                           ;incstack = 0
  7066                           ; Regs used in _Button_DefaultCallback: []
  7067  0000' 0008               	return
  7068  0001'                    __end_of_Button_DefaultCallback:	
  7069                           
  7070                           	psect	text46
  7071  0000'                    __ptext46:	
  7072 ;; *************** function _Button_Baseline_Update *****************
  7073 ;; Defined at:
  7074 ;;		line 416 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  button          1    wreg     PTR struct .
  7077 ;;		 -> mtouch_button(16), 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  button          1    6[COMMON] PTR struct .
  7080 ;;		 -> mtouch_button(16), 
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      void 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7090 ;;      Params:         0       0       0       0
  7091 ;;      Locals:         1       0       0       0
  7092 ;;      Temps:          6       0       0       0
  7093 ;;      Totals:         7       0       0       0
  7094 ;;Total ram usage:        7 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; This function calls:
  7097 ;;		Nothing
  7098 ;; This function is called by:
  7099 ;;		_Button_State_Initializing
  7100 ;;		_Button_State_NotPressed
  7101 ;; This function uses a non-reentrant model
  7102 ;;
  7103                           
  7104                           
  7105                           ;psect for function _Button_Baseline_Update
  7106  0000'                    _Button_Baseline_Update:	
  7107                           
  7108                           ;incstack = 0
  7109                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  7110                           ;Button_Baseline_Update@button stored from wreg
  7111  0000' 0086'              	movwf	Button_Baseline_Update@button
  7112                           
  7113                           ;mtouch_button.c: 418: if (GIE == (uint8_t)1)
  7114  0001' 1F8B               	btfss	11,7	;volatile
  7115  0002' 2846'              	goto	l2108
  7116                           
  7117                           ;mtouch_button.c: 419: {
  7118                           ;mtouch_button.c: 420: GIE = (uint8_t)0;
  7119  0003' 138B               	bcf	11,7	;volatile
  7120                           
  7121                           ;mtouch_button.c: 421: button->baseline -= (button->baseline) >> ((uint8_t)4);
  7122  0004' 0806'              	movf	Button_Baseline_Update@button,w
  7123  0005' 3E05               	addlw	5
  7124  0006' 0086               	movwf	6
  7125  0007' 0187               	clrf	7
  7126  0008' 3F40               	moviw [0]fsr1
  7127  0009' 0080'              	movwf	??_Button_Baseline_Update
  7128  000A' 3F41               	moviw [1]fsr1
  7129  000B' 0081'              	movwf	??_Button_Baseline_Update+1
  7130  000C' 3F42               	moviw [2]fsr1
  7131  000D' 0082'              	movwf	??_Button_Baseline_Update+2
  7132  000E' 3F43               	moviw [3]fsr1
  7133  000F' 0083'              	movwf	??_Button_Baseline_Update+3
  7134  0010' 3004               	movlw	4
  7135  0011'                    u1335:	
  7136  0011' 3683'              	lsrf	??_Button_Baseline_Update+3,f
  7137  0012' 0C82'              	rrf	??_Button_Baseline_Update+2,f
  7138  0013' 0C81'              	rrf	??_Button_Baseline_Update+1,f
  7139  0014' 0C80'              	rrf	??_Button_Baseline_Update,f
  7140  0015' 0B89               	decfsz	9,f
  7141  0016' 2811'              	goto	u1335
  7142  0017' 0806'              	movf	Button_Baseline_Update@button,w
  7143  0018' 3E05               	addlw	5
  7144  0019' 0086               	movwf	6
  7145  001A' 0187               	clrf	7
  7146  001B' 0800'              	movf	??_Button_Baseline_Update,w
  7147  001C' 0281               	subwf	1,f
  7148  001D' 3141               	addfsr 1,1
  7149  001E' 0801'              	movf	??_Button_Baseline_Update+1,w
  7150  001F' 3B81               	subwfb	1,f
  7151  0020' 3141               	addfsr 1,1
  7152  0021' 0802'              	movf	??_Button_Baseline_Update+2,w
  7153  0022' 3B81               	subwfb	1,f
  7154  0023' 3141               	addfsr 1,1
  7155  0024' 0803'              	movf	??_Button_Baseline_Update+3,w
  7156  0025' 3B81               	subwfb	1,f
  7157  0026' 317D               	addfsr 1,-3
  7158                           
  7159                           ;mtouch_button.c: 422: button->baseline += button->reading;
  7160  0027' 0806'              	movf	Button_Baseline_Update@button,w
  7161  0028' 3E03               	addlw	3
  7162  0029' 0086               	movwf	6
  7163  002A' 0187               	clrf	7
  7164  002B' 3F40               	moviw [0]fsr1
  7165  002C' 0080'              	movwf	??_Button_Baseline_Update
  7166  002D' 3F41               	moviw [1]fsr1
  7167  002E' 0081'              	movwf	??_Button_Baseline_Update+1
  7168  002F' 0800'              	movf	??_Button_Baseline_Update,w
  7169  0030' 0082'              	movwf	??_Button_Baseline_Update+2
  7170  0031' 0801'              	movf	??_Button_Baseline_Update+1,w
  7171  0032' 0083'              	movwf	??_Button_Baseline_Update+3
  7172  0033' 0184'              	clrf	??_Button_Baseline_Update+4
  7173  0034' 0185'              	clrf	??_Button_Baseline_Update+5
  7174  0035' 0806'              	movf	Button_Baseline_Update@button,w
  7175  0036' 3E05               	addlw	5
  7176  0037' 0086               	movwf	6
  7177  0038' 0187               	clrf	7
  7178  0039' 0802'              	movf	??_Button_Baseline_Update+2,w
  7179  003A' 0781               	addwf	1,f
  7180  003B' 3141               	addfsr 1,1
  7181  003C' 0803'              	movf	??_Button_Baseline_Update+3,w
  7182  003D' 3D81               	addwfc	1,f
  7183  003E' 3141               	addfsr 1,1
  7184  003F' 0804'              	movf	??_Button_Baseline_Update+4,w
  7185  0040' 3D81               	addwfc	1,f
  7186  0041' 3141               	addfsr 1,1
  7187  0042' 0805'              	movf	??_Button_Baseline_Update+5,w
  7188  0043' 3D81               	addwfc	1,f
  7189                           
  7190                           ;mtouch_button.c: 423: GIE = (uint8_t)1;
  7191  0044' 178B               	bsf	11,7	;volatile
  7192                           
  7193                           ;mtouch_button.c: 424: }
  7194  0045' 0008               	return
  7195  0046'                    l2108:	
  7196                           
  7197                           ;mtouch_button.c: 425: else
  7198                           ;mtouch_button.c: 426: {
  7199                           ;mtouch_button.c: 427: button->baseline -= (button->baseline) >> ((uint8_t)4);
  7200  0046' 0806'              	movf	Button_Baseline_Update@button,w
  7201  0047' 3E05               	addlw	5
  7202  0048' 0086               	movwf	6
  7203  0049' 0187               	clrf	7
  7204  004A' 3F40               	moviw [0]fsr1
  7205  004B' 0080'              	movwf	??_Button_Baseline_Update
  7206  004C' 3F41               	moviw [1]fsr1
  7207  004D' 0081'              	movwf	??_Button_Baseline_Update+1
  7208  004E' 3F42               	moviw [2]fsr1
  7209  004F' 0082'              	movwf	??_Button_Baseline_Update+2
  7210  0050' 3F43               	moviw [3]fsr1
  7211  0051' 0083'              	movwf	??_Button_Baseline_Update+3
  7212  0052' 3004               	movlw	4
  7213  0053'                    u1345:	
  7214  0053' 3683'              	lsrf	??_Button_Baseline_Update+3,f
  7215  0054' 0C82'              	rrf	??_Button_Baseline_Update+2,f
  7216  0055' 0C81'              	rrf	??_Button_Baseline_Update+1,f
  7217  0056' 0C80'              	rrf	??_Button_Baseline_Update,f
  7218  0057' 0B89               	decfsz	9,f
  7219  0058' 2853'              	goto	u1345
  7220  0059' 0806'              	movf	Button_Baseline_Update@button,w
  7221  005A' 3E05               	addlw	5
  7222  005B' 0086               	movwf	6
  7223  005C' 0187               	clrf	7
  7224  005D' 0800'              	movf	??_Button_Baseline_Update,w
  7225  005E' 0281               	subwf	1,f
  7226  005F' 3141               	addfsr 1,1
  7227  0060' 0801'              	movf	??_Button_Baseline_Update+1,w
  7228  0061' 3B81               	subwfb	1,f
  7229  0062' 3141               	addfsr 1,1
  7230  0063' 0802'              	movf	??_Button_Baseline_Update+2,w
  7231  0064' 3B81               	subwfb	1,f
  7232  0065' 3141               	addfsr 1,1
  7233  0066' 0803'              	movf	??_Button_Baseline_Update+3,w
  7234  0067' 3B81               	subwfb	1,f
  7235  0068' 317D               	addfsr 1,-3
  7236                           
  7237                           ;mtouch_button.c: 428: button->baseline += button->reading;
  7238  0069' 0806'              	movf	Button_Baseline_Update@button,w
  7239  006A' 3E03               	addlw	3
  7240  006B' 0086               	movwf	6
  7241  006C' 0187               	clrf	7
  7242  006D' 3F40               	moviw [0]fsr1
  7243  006E' 0080'              	movwf	??_Button_Baseline_Update
  7244  006F' 3F41               	moviw [1]fsr1
  7245  0070' 0081'              	movwf	??_Button_Baseline_Update+1
  7246  0071' 0800'              	movf	??_Button_Baseline_Update,w
  7247  0072' 0082'              	movwf	??_Button_Baseline_Update+2
  7248  0073' 0801'              	movf	??_Button_Baseline_Update+1,w
  7249  0074' 0083'              	movwf	??_Button_Baseline_Update+3
  7250  0075' 0184'              	clrf	??_Button_Baseline_Update+4
  7251  0076' 0185'              	clrf	??_Button_Baseline_Update+5
  7252  0077' 0806'              	movf	Button_Baseline_Update@button,w
  7253  0078' 3E05               	addlw	5
  7254  0079' 0086               	movwf	6
  7255  007A' 0187               	clrf	7
  7256  007B' 0802'              	movf	??_Button_Baseline_Update+2,w
  7257  007C' 0781               	addwf	1,f
  7258  007D' 3141               	addfsr 1,1
  7259  007E' 0803'              	movf	??_Button_Baseline_Update+3,w
  7260  007F' 3D81               	addwfc	1,f
  7261  0080' 3141               	addfsr 1,1
  7262  0081' 0804'              	movf	??_Button_Baseline_Update+4,w
  7263  0082' 3D81               	addwfc	1,f
  7264  0083' 3141               	addfsr 1,1
  7265  0084' 0805'              	movf	??_Button_Baseline_Update+5,w
  7266  0085' 3D81               	addwfc	1,f
  7267  0086' 0008               	return
  7268  0087'                    __end_of_Button_Baseline_Update:	
  7269                           
  7270                           	psect	text47
  7271  0000'                    __ptext47:	
  7272 ;; *************** function _Button_Baseline_Initialize *****************
  7273 ;; Defined at:
  7274 ;;		line 410 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  button          1    wreg     PTR struct .
  7277 ;;		 -> mtouch_button(16), 
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;  button          1   12[COMMON] PTR struct .
  7280 ;;		 -> mtouch_button(16), 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7290 ;;      Params:         0       0       0       0
  7291 ;;      Locals:         1       0       0       0
  7292 ;;      Temps:          4       0       0       0
  7293 ;;      Totals:         5       0       0       0
  7294 ;;Total ram usage:        5 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    2
  7297 ;; This function calls:
  7298 ;;		_MTOUCH_Sensor_RawSample_Get
  7299 ;; This function is called by:
  7300 ;;		_Button_State_Initializing
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           
  7305                           ;psect for function _Button_Baseline_Initialize
  7306  0000'                    _Button_Baseline_Initialize:	
  7307                           
  7308                           ;incstack = 0
  7309                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7310                           ;Button_Baseline_Initialize@button stored from wreg
  7311  0000' 008C'              	movwf	Button_Baseline_Initialize@button
  7312                           
  7313                           ;mtouch_button.c: 412: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
  7314  0001' 0A0C'              	incf	Button_Baseline_Initialize@button,w
  7315  0002' 0086               	movwf	6
  7316  0003' 0187               	clrf	7
  7317  0004' 0801               	movf	1,w
  7318  0005' 2000'              	fcall	_MTOUCH_Sensor_RawSample_Get
  7319  0006' 0804'              	movf	?_MTOUCH_Sensor_RawSample_Get,w
  7320  0007' 0088'              	movwf	??_Button_Baseline_Initialize
  7321  0008' 0805'              	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  7322  0009' 0089'              	movwf	??_Button_Baseline_Initialize+1
  7323  000A' 018A'              	clrf	??_Button_Baseline_Initialize+2
  7324  000B' 018B'              	clrf	??_Button_Baseline_Initialize+3
  7325  000C' 080C'              	movf	Button_Baseline_Initialize@button,w
  7326  000D' 3E05               	addlw	5
  7327  000E' 0086               	movwf	6
  7328  000F' 0187               	clrf	7
  7329  0010' 0808'              	movf	??_Button_Baseline_Initialize,w
  7330  0011' 3FC0               	movwi [0]fsr1
  7331  0012' 0809'              	movf	??_Button_Baseline_Initialize+1,w
  7332  0013' 3FC1               	movwi [1]fsr1
  7333  0014' 080A'              	movf	??_Button_Baseline_Initialize+2,w
  7334  0015' 3FC2               	movwi [2]fsr1
  7335  0016' 080B'              	movf	??_Button_Baseline_Initialize+3,w
  7336  0017' 3FC3               	movwi [3]fsr1
  7337                           
  7338                           ;mtouch_button.c: 413: button->baseline <<= ((uint8_t)4);
  7339  0018' 080C'              	movf	Button_Baseline_Initialize@button,w
  7340  0019' 3E05               	addlw	5
  7341  001A' 0086               	movwf	6
  7342  001B' 0187               	clrf	7
  7343  001C' 3004               	movlw	4
  7344  001D'                    u1315:	
  7345  001D' 3581               	lslf	1,f
  7346  001E' 3141               	addfsr 1,1
  7347  001F' 0D81               	rlf	1,f
  7348  0020' 3141               	addfsr 1,1
  7349  0021' 0D81               	rlf	1,f
  7350  0022' 3141               	addfsr 1,1
  7351  0023' 0D81               	rlf	1,f
  7352  0024' 317D               	addfsr 1,-3
  7353  0025' 0B89               	decfsz	9,f
  7354  0026' 281D'              	goto	u1315
  7355  0027' 0008               	return
  7356  0028'                    __end_of_Button_Baseline_Initialize:	
  7357                           
  7358                           	psect	text48
  7359  0000'                    __ptext48:	
  7360 ;; *************** function _Button_Reading_Update *****************
  7361 ;; Defined at:
  7362 ;;		line 394 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;  button          1    wreg     PTR struct .
  7365 ;;		 -> mtouch_button(16), 
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;  button          1   10[COMMON] PTR struct .
  7368 ;;		 -> mtouch_button(16), 
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      void 
  7371 ;; Registers used:
  7372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7378 ;;      Params:         0       0       0       0
  7379 ;;      Locals:         1       0       0       0
  7380 ;;      Temps:          2       0       0       0
  7381 ;;      Totals:         3       0       0       0
  7382 ;;Total ram usage:        3 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    2
  7385 ;; This function calls:
  7386 ;;		_MTOUCH_Sensor_RawSample_Get
  7387 ;; This function is called by:
  7388 ;;		_Button_Service
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           
  7393                           ;psect for function _Button_Reading_Update
  7394  0000'                    _Button_Reading_Update:	
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7398                           ;Button_Reading_Update@button stored from wreg
  7399  0000' 008A'              	movwf	Button_Reading_Update@button
  7400                           
  7401                           ;mtouch_button.c: 396: if (GIE == (uint8_t)1)
  7402  0001' 1F8B               	btfss	11,7	;volatile
  7403  0002' 2833'              	goto	l2208
  7404                           
  7405                           ;mtouch_button.c: 397: {
  7406                           ;mtouch_button.c: 398: GIE = (uint8_t)0;
  7407  0003' 138B               	bcf	11,7	;volatile
  7408                           
  7409                           ;mtouch_button.c: 399: button->reading -= button->reading>>(uint8_t)2;
  7410  0004' 080A'              	movf	Button_Reading_Update@button,w
  7411  0005' 3E03               	addlw	3
  7412  0006' 0086               	movwf	6
  7413  0007' 0187               	clrf	7
  7414  0008' 3F40               	moviw [0]fsr1
  7415  0009' 0088'              	movwf	??_Button_Reading_Update
  7416  000A' 3F41               	moviw [1]fsr1
  7417  000B' 0089'              	movwf	??_Button_Reading_Update+1
  7418  000C' 3689'              	lsrf	??_Button_Reading_Update+1,f
  7419  000D' 0C88'              	rrf	??_Button_Reading_Update,f
  7420  000E' 3689'              	lsrf	??_Button_Reading_Update+1,f
  7421  000F' 0C88'              	rrf	??_Button_Reading_Update,f
  7422  0010' 080A'              	movf	Button_Reading_Update@button,w
  7423  0011' 3E03               	addlw	3
  7424  0012' 0086               	movwf	6
  7425  0013' 0187               	clrf	7
  7426  0014' 0808'              	movf	??_Button_Reading_Update,w
  7427  0015' 0281               	subwf	1,f
  7428  0016' 3141               	addfsr 1,1
  7429  0017' 0809'              	movf	??_Button_Reading_Update+1,w
  7430  0018' 3B81               	subwfb	1,f
  7431  0019' 317F               	addfsr 1,-1
  7432                           
  7433                           ;mtouch_button.c: 400: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor)>>(
      +                          uint8_t)2;
  7434  001A' 0A0A'              	incf	Button_Reading_Update@button,w
  7435  001B' 0086               	movwf	6
  7436  001C' 0187               	clrf	7
  7437  001D' 0801               	movf	1,w
  7438  001E' 2000'              	fcall	_MTOUCH_Sensor_RawSample_Get
  7439  001F' 0804'              	movf	?_MTOUCH_Sensor_RawSample_Get,w
  7440  0020' 0088'              	movwf	??_Button_Reading_Update
  7441  0021' 0805'              	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  7442  0022' 0089'              	movwf	??_Button_Reading_Update+1
  7443  0023' 3689'              	lsrf	??_Button_Reading_Update+1,f
  7444  0024' 0C88'              	rrf	??_Button_Reading_Update,f
  7445  0025' 3689'              	lsrf	??_Button_Reading_Update+1,f
  7446  0026' 0C88'              	rrf	??_Button_Reading_Update,f
  7447  0027' 080A'              	movf	Button_Reading_Update@button,w
  7448  0028' 3E03               	addlw	3
  7449  0029' 0086               	movwf	6
  7450  002A' 0187               	clrf	7
  7451  002B' 0808'              	movf	??_Button_Reading_Update,w
  7452  002C' 0781               	addwf	1,f
  7453  002D' 3141               	addfsr 1,1
  7454  002E' 0809'              	movf	??_Button_Reading_Update+1,w
  7455  002F' 3D81               	addwfc	1,f
  7456  0030' 317F               	addfsr 1,-1
  7457                           
  7458                           ;mtouch_button.c: 401: GIE = (uint8_t)1;
  7459  0031' 178B               	bsf	11,7	;volatile
  7460                           
  7461                           ;mtouch_button.c: 402: }
  7462  0032' 0008               	return
  7463  0033'                    l2208:	
  7464                           
  7465                           ;mtouch_button.c: 403: else
  7466                           ;mtouch_button.c: 404: {
  7467                           ;mtouch_button.c: 405: button->reading -= button->reading>>(uint8_t)2;
  7468  0033' 080A'              	movf	Button_Reading_Update@button,w
  7469  0034' 3E03               	addlw	3
  7470  0035' 0086               	movwf	6
  7471  0036' 0187               	clrf	7
  7472  0037' 3F40               	moviw [0]fsr1
  7473  0038' 0088'              	movwf	??_Button_Reading_Update
  7474  0039' 3F41               	moviw [1]fsr1
  7475  003A' 0089'              	movwf	??_Button_Reading_Update+1
  7476  003B' 3689'              	lsrf	??_Button_Reading_Update+1,f
  7477  003C' 0C88'              	rrf	??_Button_Reading_Update,f
  7478  003D' 3689'              	lsrf	??_Button_Reading_Update+1,f
  7479  003E' 0C88'              	rrf	??_Button_Reading_Update,f
  7480  003F' 080A'              	movf	Button_Reading_Update@button,w
  7481  0040' 3E03               	addlw	3
  7482  0041' 0086               	movwf	6
  7483  0042' 0187               	clrf	7
  7484  0043' 0808'              	movf	??_Button_Reading_Update,w
  7485  0044' 0281               	subwf	1,f
  7486  0045' 3141               	addfsr 1,1
  7487  0046' 0809'              	movf	??_Button_Reading_Update+1,w
  7488  0047' 3B81               	subwfb	1,f
  7489  0048' 317F               	addfsr 1,-1
  7490                           
  7491                           ;mtouch_button.c: 406: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor)>>(
      +                          uint8_t)2;
  7492  0049' 0A0A'              	incf	Button_Reading_Update@button,w
  7493  004A' 0086               	movwf	6
  7494  004B' 0187               	clrf	7
  7495  004C' 0801               	movf	1,w
  7496  004D' 2000'              	fcall	_MTOUCH_Sensor_RawSample_Get
  7497  004E' 0804'              	movf	?_MTOUCH_Sensor_RawSample_Get,w
  7498  004F' 0088'              	movwf	??_Button_Reading_Update
  7499  0050' 0805'              	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  7500  0051' 0089'              	movwf	??_Button_Reading_Update+1
  7501  0052' 3689'              	lsrf	??_Button_Reading_Update+1,f
  7502  0053' 0C88'              	rrf	??_Button_Reading_Update,f
  7503  0054' 3689'              	lsrf	??_Button_Reading_Update+1,f
  7504  0055' 0C88'              	rrf	??_Button_Reading_Update,f
  7505  0056' 080A'              	movf	Button_Reading_Update@button,w
  7506  0057' 3E03               	addlw	3
  7507  0058' 0086               	movwf	6
  7508  0059' 0187               	clrf	7
  7509  005A' 0808'              	movf	??_Button_Reading_Update,w
  7510  005B' 0781               	addwf	1,f
  7511  005C' 3141               	addfsr 1,1
  7512  005D' 0809'              	movf	??_Button_Reading_Update+1,w
  7513  005E' 3D81               	addwfc	1,f
  7514  005F' 317F               	addfsr 1,-1
  7515  0060' 0008               	return
  7516  0061'                    __end_of_Button_Reading_Update:	
  7517                           
  7518                           	psect	text49
  7519  0000'                    __ptext49:	
  7520 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  7521 ;; Defined at:
  7522 ;;		line 393 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;  name            1    wreg     enum E5394
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  name            1    7[COMMON] enum E5394
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  2    4[COMMON] unsigned int 
  7529 ;; Registers used:
  7530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7536 ;;      Params:         2       0       0       0
  7537 ;;      Locals:         1       0       0       0
  7538 ;;      Temps:          1       0       0       0
  7539 ;;      Totals:         4       0       0       0
  7540 ;;Total ram usage:        4 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; Hardware stack levels required when called:    1
  7543 ;; This function calls:
  7544 ;;		___bmul
  7545 ;; This function is called by:
  7546 ;;		_Button_Reading_Update
  7547 ;;		_Button_Baseline_Initialize
  7548 ;;		_main
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _MTOUCH_Sensor_RawSample_Get
  7554  0000'                    _MTOUCH_Sensor_RawSample_Get:	
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7558                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
  7559  0000' 0087'              	movwf	MTOUCH_Sensor_RawSample_Get@name
  7560                           
  7561                           ;mtouch_sensor.c: 395: if (name < 1)
  7562  0001' 0807'              	movf	MTOUCH_Sensor_RawSample_Get@name,w
  7563  0002' 1D03               	btfss	3,2
  7564  0003' 2813'              	goto	l2014
  7565                           
  7566                           ;mtouch_sensor.c: 396: {
  7567                           ;mtouch_sensor.c: 397: return mtouch_sensor[name].rawSample;
  7568  0004' 3009               	movlw	9
  7569  0005' 0086'              	movwf	??_MTOUCH_Sensor_RawSample_Get
  7570  0006' 0806'              	movf	??_MTOUCH_Sensor_RawSample_Get,w
  7571  0007' 0080'              	movwf	___bmul@multiplicand
  7572  0008' 0807'              	movf	MTOUCH_Sensor_RawSample_Get@name,w
  7573  0009' 2000'              	fcall	___bmul
  7574  000A' 3E06               	addlw	6
  7575  000B' 3E00'              	addlw	(low (_mtouch_sensor| 0))& (0+255)
  7576  000C' 0086               	movwf	6
  7577  000D' 0187               	clrf	7
  7578  000E' 3F40               	moviw [0]fsr1
  7579  000F' 0084'              	movwf	?_MTOUCH_Sensor_RawSample_Get
  7580  0010' 3F41               	moviw [1]fsr1
  7581  0011' 0085'              	movwf	?_MTOUCH_Sensor_RawSample_Get+1
  7582                           
  7583                           ;mtouch_sensor.c: 398: }
  7584  0012' 0008               	return
  7585  0013'                    l2014:	
  7586                           
  7587                           ;mtouch_sensor.c: 399: else
  7588                           ;mtouch_sensor.c: 400: return (mtouch_sensor_sample_t)0;
  7589  0013' 0184'              	clrf	?_MTOUCH_Sensor_RawSample_Get
  7590  0014' 0185'              	clrf	?_MTOUCH_Sensor_RawSample_Get+1
  7591  0015' 0008               	return
  7592  0016'                    __end_of_MTOUCH_Sensor_RawSample_Get:	
  7593                           
  7594                           	psect	text50
  7595  0000'                    __ptext50:	
  7596 ;; *************** function ___bmul *****************
  7597 ;; Defined at:
  7598 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul8.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;  multiplier      1    wreg     unsigned char 
  7601 ;;  multiplicand    1    0[COMMON] unsigned char 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  multiplier      1    3[COMMON] unsigned char 
  7604 ;;  product         1    2[COMMON] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      unsigned char 
  7607 ;; Registers used:
  7608 ;;		wreg, status,2, status,0
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7614 ;;      Params:         1       0       0       0
  7615 ;;      Locals:         2       0       0       0
  7616 ;;      Temps:          1       0       0       0
  7617 ;;      Totals:         4       0       0       0
  7618 ;;Total ram usage:        4 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; This function calls:
  7621 ;;		Nothing
  7622 ;; This function is called by:
  7623 ;;		_MTOUCH_Sensor_Initialize
  7624 ;;		_Sensor_Service
  7625 ;;		_Sensor_Acq_ExecuteScan
  7626 ;;		_MTOUCH_Sensor_RawSample_Get
  7627 ;;		_MTOUCH_Sensor_Enable
  7628 ;;		_MTOUCH_Sensor_wasSampled
  7629 ;;		_MTOUCH_Sensor_Disable
  7630 ;;		_MTOUCH_Sensor_isEnabled
  7631 ;;		_MTOUCH_Sensor_isActive
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function ___bmul
  7637  0000'                    ___bmul:	
  7638                           
  7639                           ;incstack = 0
  7640                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7641                           ;___bmul@multiplier stored from wreg
  7642  0000' 0083'              	movwf	___bmul@multiplier
  7643  0001' 0182'              	clrf	___bmul@product
  7644  0002'                    l1988:	
  7645  0002' 1C03'              	btfss	___bmul@multiplier,0
  7646  0003' 2808'              	goto	l1992
  7647  0004' 0800'              	movf	___bmul@multiplicand,w
  7648  0005' 0081'              	movwf	??___bmul
  7649  0006' 0801'              	movf	??___bmul,w
  7650  0007' 0782'              	addwf	___bmul@product,f
  7651  0008'                    l1992:	
  7652  0008' 1003               	clrc
  7653  0009' 0D80'              	rlf	___bmul@multiplicand,f
  7654  000A' 1003               	clrc
  7655  000B' 0C83'              	rrf	___bmul@multiplier,f
  7656  000C' 0803'              	movf	___bmul@multiplier,w
  7657  000D' 1D03               	btfss	3,2
  7658  000E' 2802'              	goto	l1988
  7659  000F' 0802'              	movf	___bmul@product,w
  7660  0010' 0008               	return
  7661  0011'                    __end_of___bmul:	
  7662                           
  7663                           	psect	text51
  7664  0000'                    __ptext51:	
  7665 ;; *************** function _Button_Deviation_Update *****************
  7666 ;; Defined at:
  7667 ;;		line 345 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;  button          1    wreg     PTR struct .
  7670 ;;		 -> mtouch_button(16), 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;  button          1    0[BANK0 ] PTR struct .
  7673 ;;		 -> mtouch_button(16), 
  7674 ;;  deviation       4    1[BANK0 ] long 
  7675 ;; Return value:  Size  Location     Type
  7676 ;;                  1    wreg      void 
  7677 ;; Registers used:
  7678 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7679 ;; Tracked objects:
  7680 ;;		On entry : 0/0
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7684 ;;      Params:         0       0       0       0
  7685 ;;      Locals:         0       5       0       0
  7686 ;;      Temps:         10       0       0       0
  7687 ;;      Totals:        10       5       0       0
  7688 ;;Total ram usage:       15 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; This function calls:
  7691 ;;		Nothing
  7692 ;; This function is called by:
  7693 ;;		_Button_Service
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function _Button_Deviation_Update
  7699  0000'                    _Button_Deviation_Update:	
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  7703                           ;Button_Deviation_Update@button stored from wreg
  7704  0000' 0020               	movlb	0	; select bank0
  7705  0001' 0080'              	movwf	Button_Deviation_Update@button
  7706                           
  7707                           ;mtouch_button.c: 347: int32_t deviation;
  7708                           ;mtouch_button.c: 349: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4)));
  7709  0002' 0800'              	movf	Button_Deviation_Update@button,w
  7710  0003' 3E05               	addlw	5
  7711  0004' 0086               	movwf	6
  7712  0005' 0187               	clrf	7
  7713  0006' 3F40               	moviw [0]fsr1
  7714  0007' 0080'              	movwf	??_Button_Deviation_Update
  7715  0008' 3F41               	moviw [1]fsr1
  7716  0009' 0081'              	movwf	??_Button_Deviation_Update+1
  7717  000A' 3F42               	moviw [2]fsr1
  7718  000B' 0082'              	movwf	??_Button_Deviation_Update+2
  7719  000C' 3F43               	moviw [3]fsr1
  7720  000D' 0083'              	movwf	??_Button_Deviation_Update+3
  7721  000E' 3004               	movlw	4
  7722  000F'                    u1435:	
  7723  000F' 3683'              	lsrf	??_Button_Deviation_Update+3,f
  7724  0010' 0C82'              	rrf	??_Button_Deviation_Update+2,f
  7725  0011' 0C81'              	rrf	??_Button_Deviation_Update+1,f
  7726  0012' 0C80'              	rrf	??_Button_Deviation_Update,f
  7727  0013' 0B89               	decfsz	9,f
  7728  0014' 280F'              	goto	u1435
  7729  0015' 0980'              	comf	??_Button_Deviation_Update,f
  7730  0016' 0981'              	comf	??_Button_Deviation_Update+1,f
  7731  0017' 0982'              	comf	??_Button_Deviation_Update+2,f
  7732  0018' 0983'              	comf	??_Button_Deviation_Update+3,f
  7733  0019' 0A80'              	incf	??_Button_Deviation_Update,f
  7734  001A' 1903               	skipnz
  7735  001B' 0A81'              	incf	??_Button_Deviation_Update+1,f
  7736  001C' 1903               	skipnz
  7737  001D' 0A82'              	incf	??_Button_Deviation_Update+2,f
  7738  001E' 1903               	skipnz
  7739  001F' 0A83'              	incf	??_Button_Deviation_Update+3,f
  7740  0020' 0800'              	movf	Button_Deviation_Update@button,w
  7741  0021' 3E03               	addlw	3
  7742  0022' 0086               	movwf	6
  7743  0023' 0187               	clrf	7
  7744  0024' 3F40               	moviw [0]fsr1
  7745  0025' 0084'              	movwf	??_Button_Deviation_Update+4
  7746  0026' 3F41               	moviw [1]fsr1
  7747  0027' 0085'              	movwf	??_Button_Deviation_Update+5
  7748  0028' 0804'              	movf	??_Button_Deviation_Update+4,w
  7749  0029' 0086'              	movwf	??_Button_Deviation_Update+6
  7750  002A' 0805'              	movf	??_Button_Deviation_Update+5,w
  7751  002B' 0087'              	movwf	??_Button_Deviation_Update+7
  7752  002C' 0188'              	clrf	??_Button_Deviation_Update+8
  7753  002D' 0189'              	clrf	??_Button_Deviation_Update+9
  7754  002E' 0806'              	movf	??_Button_Deviation_Update+6,w
  7755  002F' 0780'              	addwf	??_Button_Deviation_Update,f
  7756  0030' 0807'              	movf	??_Button_Deviation_Update+7,w
  7757  0031' 3D81'              	addwfc	??_Button_Deviation_Update+1,f
  7758  0032' 0808'              	movf	??_Button_Deviation_Update+8,w
  7759  0033' 3D82'              	addwfc	??_Button_Deviation_Update+2,f
  7760  0034' 0809'              	movf	??_Button_Deviation_Update+9,w
  7761  0035' 3D83'              	addwfc	??_Button_Deviation_Update+3,f
  7762  0036' 0803'              	movf	??_Button_Deviation_Update+3,w
  7763  0037' 0084'              	movwf	Button_Deviation_Update@deviation+3
  7764  0038' 0802'              	movf	??_Button_Deviation_Update+2,w
  7765  0039' 0083'              	movwf	Button_Deviation_Update@deviation+2
  7766  003A' 0801'              	movf	??_Button_Deviation_Update+1,w
  7767  003B' 0082'              	movwf	Button_Deviation_Update@deviation+1
  7768  003C' 0800'              	movf	??_Button_Deviation_Update,w
  7769  003D' 0081'              	movwf	Button_Deviation_Update@deviation
  7770                           
  7771                           ;mtouch_button.c: 352: deviation = deviation >> (button->scaling);
  7772  003E' 0801'              	movf	Button_Deviation_Update@deviation,w
  7773  003F' 0080'              	movwf	??_Button_Deviation_Update
  7774  0040' 0802'              	movf	Button_Deviation_Update@deviation+1,w
  7775  0041' 0081'              	movwf	??_Button_Deviation_Update+1
  7776  0042' 0803'              	movf	Button_Deviation_Update@deviation+2,w
  7777  0043' 0082'              	movwf	??_Button_Deviation_Update+2
  7778  0044' 0804'              	movf	Button_Deviation_Update@deviation+3,w
  7779  0045' 0083'              	movwf	??_Button_Deviation_Update+3
  7780  0046' 0800'              	movf	Button_Deviation_Update@button,w
  7781  0047' 3E0F               	addlw	15
  7782  0048' 0086               	movwf	6
  7783  0049' 0187               	clrf	7
  7784  004A' 0A01               	incf	1,w
  7785  004B' 2850'              	goto	u1440
  7786  004C'                    u1445:	
  7787  004C' 3783'              	asrf	??_Button_Deviation_Update+3,f
  7788  004D' 0C82'              	rrf	??_Button_Deviation_Update+2,f
  7789  004E' 0C81'              	rrf	??_Button_Deviation_Update+1,f
  7790  004F' 0C80'              	rrf	??_Button_Deviation_Update,f
  7791  0050'                    u1440:	
  7792  0050' 0B89               	decfsz	9,f
  7793  0051' 284C'              	goto	u1445
  7794  0052' 0803'              	movf	??_Button_Deviation_Update+3,w
  7795  0053' 0084'              	movwf	Button_Deviation_Update@deviation+3
  7796  0054' 0802'              	movf	??_Button_Deviation_Update+2,w
  7797  0055' 0083'              	movwf	Button_Deviation_Update@deviation+2
  7798  0056' 0801'              	movf	??_Button_Deviation_Update+1,w
  7799  0057' 0082'              	movwf	Button_Deviation_Update@deviation+1
  7800  0058' 0800'              	movf	??_Button_Deviation_Update,w
  7801  0059' 0081'              	movwf	Button_Deviation_Update@deviation
  7802                           
  7803                           ;mtouch_button.c: 355: if (deviation > ((127)))
  7804  005A' 1B84'              	btfsc	Button_Deviation_Update@deviation+3,7
  7805  005B' 2871'              	goto	l2218
  7806  005C' 0804'              	movf	Button_Deviation_Update@deviation+3,w
  7807  005D' 1D03               	btfss	3,2
  7808  005E' 2869'              	goto	l2216
  7809  005F' 0803'              	movf	Button_Deviation_Update@deviation+2,w
  7810  0060' 1D03               	btfss	3,2
  7811  0061' 2869'              	goto	l2216
  7812  0062' 0802'              	movf	Button_Deviation_Update@deviation+1,w
  7813  0063' 1D03               	btfss	3,2
  7814  0064' 2869'              	goto	l2216
  7815  0065' 3080               	movlw	128
  7816  0066' 0201'              	subwf	Button_Deviation_Update@deviation,w
  7817  0067' 1C03               	btfss	3,0
  7818  0068' 2871'              	goto	l2218
  7819  0069'                    l2216:	
  7820                           
  7821                           ;mtouch_button.c: 356: {
  7822                           ;mtouch_button.c: 357: deviation = ((127));
  7823  0069' 3000               	movlw	0
  7824  006A' 0084'              	movwf	Button_Deviation_Update@deviation+3
  7825  006B' 3000               	movlw	0
  7826  006C' 0083'              	movwf	Button_Deviation_Update@deviation+2
  7827  006D' 3000               	movlw	0
  7828  006E' 0082'              	movwf	Button_Deviation_Update@deviation+1
  7829  006F' 307F               	movlw	127
  7830  0070' 0081'              	movwf	Button_Deviation_Update@deviation
  7831  0071'                    l2218:	
  7832                           
  7833                           ;mtouch_button.c: 358: }
  7834                           ;mtouch_button.c: 359: if (deviation < ((-128)))
  7835  0071' 1F84'              	btfss	Button_Deviation_Update@deviation+3,7
  7836  0072' 2885'              	goto	l2222
  7837  0073' 3080               	movlw	128
  7838  0074' 0201'              	subwf	Button_Deviation_Update@deviation,w
  7839  0075' 30FF               	movlw	255
  7840  0076' 3B02'              	subwfb	Button_Deviation_Update@deviation+1,w
  7841  0077' 30FF               	movlw	255
  7842  0078' 3B03'              	subwfb	Button_Deviation_Update@deviation+2,w
  7843  0079' 30FF               	movlw	255
  7844  007A' 3B04'              	subwfb	Button_Deviation_Update@deviation+3,w
  7845  007B' 1803               	btfsc	3,0
  7846  007C' 2885'              	goto	l2222
  7847                           
  7848                           ;mtouch_button.c: 360: {
  7849                           ;mtouch_button.c: 361: deviation = ((-128));
  7850  007D' 30FF               	movlw	255
  7851  007E' 0084'              	movwf	Button_Deviation_Update@deviation+3
  7852  007F' 30FF               	movlw	255
  7853  0080' 0083'              	movwf	Button_Deviation_Update@deviation+2
  7854  0081' 30FF               	movlw	255
  7855  0082' 0082'              	movwf	Button_Deviation_Update@deviation+1
  7856  0083' 3080               	movlw	128
  7857  0084' 0081'              	movwf	Button_Deviation_Update@deviation
  7858  0085'                    l2222:	
  7859                           
  7860                           ;mtouch_button.c: 362: }
  7861                           ;mtouch_button.c: 364: button->deviation = (mtouch_button_deviation_t)deviation;
  7862  0085' 0801'              	movf	Button_Deviation_Update@deviation,w
  7863  0086' 0080'              	movwf	??_Button_Deviation_Update
  7864  0087' 0800'              	movf	Button_Deviation_Update@button,w
  7865  0088' 3E09               	addlw	9
  7866  0089' 0086               	movwf	6
  7867  008A' 0187               	clrf	7
  7868  008B' 0800'              	movf	??_Button_Deviation_Update,w
  7869  008C' 0081               	movwf	1
  7870  008D' 0008               	return
  7871  008E'                    __end_of_Button_Deviation_Update:	
  7872                           
  7873                           	psect	text52
  7874  0000'                    __ptext52:	
  7875 ;; *************** function _MTOUCH_Button_isPressed *****************
  7876 ;; Defined at:
  7877 ;;		line 321 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  name            1    wreg     enum E5405
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  name            1    1[COMMON] enum E5405
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      unsigned char 
  7884 ;; Registers used:
  7885 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7891 ;;      Params:         0       0       0       0
  7892 ;;      Locals:         1       0       0       0
  7893 ;;      Temps:          1       0       0       0
  7894 ;;      Totals:         2       0       0       0
  7895 ;;Total ram usage:        2 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_main
  7901 ;;		_MTOUCH_Button_Buttonmask_Get
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           
  7906                           ;psect for function _MTOUCH_Button_isPressed
  7907  0000'                    _MTOUCH_Button_isPressed:	
  7908                           
  7909                           ;incstack = 0
  7910                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
  7911                           ;MTOUCH_Button_isPressed@name stored from wreg
  7912  0000' 0081'              	movwf	MTOUCH_Button_isPressed@name
  7913                           
  7914                           ;mtouch_button.c: 323: if(name < 1)
  7915  0001' 0801'              	movf	MTOUCH_Button_isPressed@name,w
  7916  0002' 1D03               	btfss	3,2
  7917  0003' 2818'              	goto	l2592
  7918                           
  7919                           ;mtouch_button.c: 324: return (mtouch_button[name].state == MTOUCH_BUTTON_STATE_pressed)
      +                           ? 1 : 0;
  7920  0004' 0801'              	movf	MTOUCH_Button_isPressed@name,w
  7921  0005' 0080'              	movwf	??_MTOUCH_Button_isPressed
  7922  0006' 3003               	movlw	3
  7923  0007'                    u2045:	
  7924  0007' 3580'              	lslf	??_MTOUCH_Button_isPressed,f
  7925  0008' 3EFF               	addlw	-1
  7926  0009' 1D03               	skipz
  7927  000A' 2807'              	goto	u2045
  7928  000B' 3500'              	lslf	??_MTOUCH_Button_isPressed,w
  7929  000C' 3E02               	addlw	2
  7930  000D' 3E00'              	addlw	(low (_mtouch_button| 0))& (0+255)
  7931  000E' 0086               	movwf	6
  7932  000F' 0187               	clrf	7
  7933  0010' 3002               	movlw	2
  7934  0011' 0601               	xorwf	1,w
  7935  0012' 1D03               	btfss	3,2
  7936  0013' 2816'              	goto	u2050
  7937  0014' 3001               	movlw	1
  7938  0015' 0008               	return
  7939  0016'                    u2050:	
  7940  0016' 3000               	movlw	0
  7941  0017' 0008               	return
  7942  0018'                    l2592:	
  7943                           
  7944                           ;mtouch_button.c: 325: else
  7945                           ;mtouch_button.c: 326: return 0;
  7946  0018' 3000               	movlw	0
  7947  0019' 0008               	return
  7948  001A'                    __end_of_MTOUCH_Button_isPressed:	
  7949                           
  7950                           	psect	text53
  7951  0000'                    __ptext53:	
  7952 ;; *************** function _DisplayVal *****************
  7953 ;; Defined at:
  7954 ;;		line 54 in file "main.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  val             2   15[BANK0 ] int 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  valStr         10   18[BANK0 ] unsigned char [10]
  7959 ;;  str             1   28[BANK0 ] PTR unsigned char 
  7960 ;;		 -> DisplayVal@valStr(10), 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      void 
  7963 ;; Registers used:
  7964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7970 ;;      Params:         0       2       0       0
  7971 ;;      Locals:         0      11       0       0
  7972 ;;      Temps:          0       1       0       0
  7973 ;;      Totals:         0      14       0       0
  7974 ;;Total ram usage:       14 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    2
  7977 ;; This function calls:
  7978 ;;		_EUSART_Write
  7979 ;;		_sprintf
  7980 ;; This function is called by:
  7981 ;;		_main
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _DisplayVal
  7987  0000'                    _DisplayVal:	
  7988                           
  7989                           ;main.c: 55: char valStr[10];
  7990                           ;main.c: 56: char *str;
  7991                           ;main.c: 58: sprintf(valStr, "%d", val);
  7992                           
  7993                           ;incstack = 0
  7994                           ; Regs used in _DisplayVal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7995  0000' 3000'              	movlw	low (STR_1| (0+32768))
  7996  0001' 0020               	movlb	0	; select bank0
  7997  0002' 0080'              	movwf	sprintf@f
  7998  0003' 3000'              	movlw	high (STR_1| (0+32768))
  7999  0004' 0081'              	movwf	sprintf@f+1
  8000  0005' 0810'              	movf	DisplayVal@val+1,w
  8001  0006' 0083'              	movwf	?_sprintf+3
  8002  0007' 080F'              	movf	DisplayVal@val,w
  8003  0008' 0082'              	movwf	?_sprintf+2
  8004  0009' 3000'              	movlw	(low (DisplayVal@valStr| 0))& (0+255)
  8005  000A' 2000'              	fcall	_sprintf
  8006                           
  8007                           ;main.c: 59: str = valStr;
  8008  000B' 3000'              	movlw	(low (DisplayVal@valStr| 0))& (0+255)
  8009  000C' 0020               	movlb	0	; select bank0
  8010  000D' 0091'              	movwf	??_DisplayVal
  8011  000E' 0811'              	movf	??_DisplayVal,w
  8012  000F' 009C'              	movwf	DisplayVal@str
  8013  0010'                    l2604:	
  8014                           ;main.c: 61: while (*str)
  8015                           
  8016  0010' 081C'              	movf	DisplayVal@str,w
  8017  0011' 0086               	movwf	6
  8018  0012' 0187               	clrf	7
  8019  0013' 0801               	movf	1,w
  8020  0014' 1903               	btfsc	3,2
  8021  0015' 2821'              	goto	l2606
  8022                           
  8023                           ;main.c: 62: EUSART_Write(*str++);
  8024  0016' 081C'              	movf	DisplayVal@str,w
  8025  0017' 0086               	movwf	6
  8026  0018' 0187               	clrf	7
  8027  0019' 0801               	movf	1,w
  8028  001A' 2000'              	fcall	_EUSART_Write
  8029  001B' 3001               	movlw	1
  8030  001C' 0020               	movlb	0	; select bank0
  8031  001D' 0091'              	movwf	??_DisplayVal
  8032  001E' 0811'              	movf	??_DisplayVal,w
  8033  001F' 079C'              	addwf	DisplayVal@str,f
  8034  0020' 2810'              	goto	l2604
  8035  0021'                    l2606:	
  8036                           
  8037                           ;main.c: 64: EUSART_Write(',');
  8038  0021' 302C               	movlw	44
  8039  0022' 2000'              	fcall	_EUSART_Write
  8040                           
  8041                           ;main.c: 65: EUSART_Write(13);
  8042  0023' 300D               	movlw	13
  8043  0024' 2000'              	fcall	_EUSART_Write
  8044                           
  8045                           ;main.c: 66: EUSART_Write(10);
  8046  0025' 300A               	movlw	10
  8047  0026' 2000'              	fcall	_EUSART_Write
  8048  0027' 0008               	return
  8049  0028'                    __end_of_DisplayVal:	
  8050                           
  8051                           	psect	text54
  8052  0000'                    __ptext54:	
  8053 ;; *************** function _sprintf *****************
  8054 ;; Defined at:
  8055 ;;		line 492 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  sp              1    wreg     PTR unsigned char 
  8058 ;;		 -> DisplayVal@valStr(10), 
  8059 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  8060 ;;		 -> STR_1(3), 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  8063 ;;		 -> DisplayVal@valStr(10), 
  8064 ;;  tmpval          4    0        struct .
  8065 ;;  val             2   11[BANK0 ] unsigned int 
  8066 ;;  cp              2    0        PTR const unsigned char 
  8067 ;;  len             2    0        unsigned int 
  8068 ;;  c               1   14[BANK0 ] char 
  8069 ;;  prec            1   10[BANK0 ] char 
  8070 ;;  flag            1    9[BANK0 ] unsigned char 
  8071 ;;  ap              1    8[BANK0 ] PTR void [1]
  8072 ;;		 -> ?_sprintf(2), 
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  2    0[BANK0 ] int 
  8075 ;; Registers used:
  8076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8082 ;;      Params:         0       4       0       0
  8083 ;;      Locals:         0       7       0       0
  8084 ;;      Temps:          0       4       0       0
  8085 ;;      Totals:         0      15       0       0
  8086 ;;Total ram usage:       15 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    1
  8089 ;; This function calls:
  8090 ;;		___lwdiv
  8091 ;;		___lwmod
  8092 ;; This function is called by:
  8093 ;;		_DisplayVal
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           
  8098                           ;psect for function _sprintf
  8099  0000'                    _sprintf:	
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8103                           ;sprintf@sp stored from wreg
  8104  0000' 0020               	movlb	0	; select bank0
  8105  0001' 008D'              	movwf	sprintf@sp
  8106                           
  8107                           ;doprnt.c: 494: va_list ap;
  8108                           ;doprnt.c: 499: signed char c;
  8109                           ;doprnt.c: 506: signed char prec;
  8110                           ;doprnt.c: 508: unsigned char flag;
  8111                           ;doprnt.c: 523: union {
  8112                           ;doprnt.c: 524: unsigned long vd;
  8113                           ;doprnt.c: 525: double integ;
  8114                           ;doprnt.c: 526: } tmpval;
  8115                           ;doprnt.c: 528: unsigned int val;
  8116                           ;doprnt.c: 529: unsigned len;
  8117                           ;doprnt.c: 530: const char * cp;
  8118                           ;doprnt.c: 533: *ap = __va_start();
  8119  0002' 3000'              	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  8120  0003' 0084'              	movwf	??_sprintf
  8121  0004' 0804'              	movf	??_sprintf,w
  8122  0005' 0088'              	movwf	sprintf@ap
  8123  0006'                    l2550:	
  8124                           ;doprnt.c: 536: while(c = *f++) {
  8125                           
  8126  0006' 0801'              	movf	sprintf@f+1,w
  8127  0007' 0085'              	movwf	??_sprintf+1
  8128  0008' 0800'              	movf	sprintf@f,w
  8129  0009' 0084'              	movwf	??_sprintf
  8130  000A' 0A80'              	incf	sprintf@f,f
  8131  000B' 1903               	skipnz
  8132  000C' 0A81'              	incf	sprintf@f+1,f
  8133  000D' 0804'              	movf	??_sprintf,w
  8134  000E' 0084               	movwf	4
  8135  000F' 0805'              	movf	??_sprintf+1,w
  8136  0010' 0085               	movwf	5
  8137  0011' 0800               	movf	0,w	;code access
  8138  0012' 0086'              	movwf	??_sprintf+2
  8139  0013' 0806'              	movf	??_sprintf+2,w
  8140  0014' 008E'              	movwf	sprintf@c
  8141  0015' 080E'              	movf	sprintf@c,w
  8142  0016' 1903               	btfsc	3,2
  8143  0017' 28C4'              	goto	l2552
  8144                           
  8145                           ;doprnt.c: 538: if(c != '%')
  8146  0018' 3025               	movlw	37
  8147  0019' 060E'              	xorwf	sprintf@c,w
  8148  001A' 1903               	btfsc	3,2
  8149  001B' 2828'              	goto	l2506
  8150                           
  8151                           ;doprnt.c: 540: {
  8152                           ;doprnt.c: 541: ((*sp++ = (c)));
  8153  001C' 080E'              	movf	sprintf@c,w
  8154  001D' 0084'              	movwf	??_sprintf
  8155  001E' 080D'              	movf	sprintf@sp,w
  8156  001F' 0086               	movwf	6
  8157  0020' 0187               	clrf	7
  8158  0021' 0804'              	movf	??_sprintf,w
  8159  0022' 0081               	movwf	1
  8160  0023' 3001               	movlw	1
  8161  0024' 0084'              	movwf	??_sprintf
  8162  0025' 0804'              	movf	??_sprintf,w
  8163  0026' 078D'              	addwf	sprintf@sp,f
  8164                           
  8165                           ;doprnt.c: 542: continue;
  8166  0027' 2806'              	goto	l2550
  8167  0028'                    l2506:	
  8168                           
  8169                           ;doprnt.c: 543: }
  8170                           ;doprnt.c: 548: flag = 0;
  8171  0028' 0189'              	clrf	sprintf@flag
  8172                           
  8173                           ;doprnt.c: 822: }
  8174                           
  8175                           ;doprnt.c: 813: continue;
  8176                           
  8177                           ;doprnt.c: 802: default:
  8178                           
  8179                           ;doprnt.c: 698: case 'i':
  8180                           ;doprnt.c: 699: break;
  8181                           
  8182                           ;doprnt.c: 697: case 'd':
  8183                           
  8184                           ;doprnt.c: 638: goto alldone;
  8185                           
  8186                           ;doprnt.c: 637: case 0:
  8187                           
  8188                           ;doprnt.c: 635: switch(c = *f++) {
  8189  0029' 0801'              	movf	sprintf@f+1,w
  8190  002A' 0085'              	movwf	??_sprintf+1
  8191  002B' 0800'              	movf	sprintf@f,w
  8192  002C' 0084'              	movwf	??_sprintf
  8193  002D' 0A80'              	incf	sprintf@f,f
  8194  002E' 1903               	skipnz
  8195  002F' 0A81'              	incf	sprintf@f+1,f
  8196  0030' 0804'              	movf	??_sprintf,w
  8197  0031' 0084               	movwf	4
  8198  0032' 0805'              	movf	??_sprintf+1,w
  8199  0033' 0085               	movwf	5
  8200  0034' 0800               	movf	0,w	;code access
  8201  0035' 008E'              	movwf	sprintf@c
  8202                           
  8203                           ; Switch size 1, requested type "space"
  8204                           ; Number of cases is 3, Range of values is 0 to 105
  8205                           ; switch strategies available:
  8206                           ; Name         Instructions Cycles
  8207                           ; simple_byte           10     6 (average)
  8208                           ; direct_byte          218     6 (fixed)
  8209                           ; jumptable            260     6 (fixed)
  8210                           ;	Chosen strategy is simple_byte
  8211  0036' 3A00               	xorlw	0	; case 0
  8212  0037' 1903               	skipnz
  8213  0038' 28C4'              	goto	l2552
  8214  0039' 3A64               	xorlw	100	; case 100
  8215  003A' 1903               	skipnz
  8216  003B' 2840'              	goto	l2512
  8217  003C' 3A0D               	xorlw	13	; case 105
  8218  003D' 1903               	skipnz
  8219  003E' 2840'              	goto	l2512
  8220  003F' 2806'              	goto	l2550
  8221  0040'                    l2512:	
  8222                           
  8223                           ;doprnt.c: 1253: {
  8224                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8225  0040' 0808'              	movf	sprintf@ap,w
  8226  0041' 0086               	movwf	6
  8227  0042' 0187               	clrf	7
  8228  0043' 3F40               	moviw [0]fsr1
  8229  0044' 008B'              	movwf	sprintf@val
  8230  0045' 3F41               	moviw [1]fsr1
  8231  0046' 008C'              	movwf	sprintf@val+1
  8232  0047' 3002               	movlw	2
  8233  0048' 0084'              	movwf	??_sprintf
  8234  0049' 0804'              	movf	??_sprintf,w
  8235  004A' 0788'              	addwf	sprintf@ap,f
  8236                           
  8237                           ;doprnt.c: 1261: if((int)val < 0) {
  8238  004B' 1F8C'              	btfss	sprintf@val+1,7
  8239  004C' 2856'              	goto	l2522
  8240                           
  8241                           ;doprnt.c: 1262: flag |= 0x03;
  8242  004D' 3003               	movlw	3
  8243  004E' 0084'              	movwf	??_sprintf
  8244  004F' 0804'              	movf	??_sprintf,w
  8245  0050' 0489'              	iorwf	sprintf@flag,f
  8246                           
  8247                           ;doprnt.c: 1263: val = -val;
  8248  0051' 098B'              	comf	sprintf@val,f
  8249  0052' 098C'              	comf	sprintf@val+1,f
  8250  0053' 0A8B'              	incf	sprintf@val,f
  8251  0054' 1903               	skipnz
  8252  0055' 0A8C'              	incf	sprintf@val+1,f
  8253  0056'                    l2522:	
  8254                           
  8255                           ;doprnt.c: 1264: }
  8256                           ;doprnt.c: 1266: }
  8257                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8258  0056' 018E'              	clrf	sprintf@c
  8259  0057' 0A8E'              	incf	sprintf@c,f
  8260  0058' 3005               	movlw	5
  8261  0059' 060E'              	xorwf	sprintf@c,w
  8262  005A' 1903               	btfsc	3,2
  8263  005B' 287B'              	goto	l2534
  8264  005C'                    l2528:	
  8265                           
  8266                           ;doprnt.c: 1306: if(val < dpowers[c])
  8267  005C' 080E'              	movf	sprintf@c,w
  8268  005D' 0084'              	movwf	??_sprintf
  8269  005E' 0185'              	clrf	??_sprintf+1
  8270  005F' 3584'              	lslf	??_sprintf,f
  8271  0060' 0D85'              	rlf	??_sprintf+1,f
  8272  0061' 3000'              	movlw	low (_dpowers| (0+32768))
  8273  0062' 0704'              	addwf	??_sprintf,w
  8274  0063' 0084               	movwf	4
  8275  0064' 3000'              	movlw	high (_dpowers| (0+32768))
  8276  0065' 3D05'              	addwfc	??_sprintf+1,w
  8277  0066' 0085               	movwf	5
  8278  0067' 3F00               	moviw [0]fsr0
  8279  0068' 0086'              	movwf	??_sprintf+2
  8280  0069' 3F01               	moviw [1]fsr0
  8281  006A' 0087'              	movwf	??_sprintf+3
  8282  006B' 0807'              	movf	??_sprintf+3,w
  8283  006C' 020C'              	subwf	sprintf@val+1,w
  8284  006D' 1D03               	skipz
  8285  006E' 2871'              	goto	u1965
  8286  006F' 0806'              	movf	??_sprintf+2,w
  8287  0070' 020B'              	subwf	sprintf@val,w
  8288  0071'                    u1965:	
  8289  0071' 1C03               	btfss	3,0
  8290  0072' 287B'              	goto	l2534
  8291                           
  8292                           ;doprnt.c: 1307: break;
  8293  0073' 3001               	movlw	1
  8294  0074' 0084'              	movwf	??_sprintf
  8295  0075' 0804'              	movf	??_sprintf,w
  8296  0076' 078E'              	addwf	sprintf@c,f
  8297  0077' 3005               	movlw	5
  8298  0078' 060E'              	xorwf	sprintf@c,w
  8299  0079' 1D03               	btfss	3,2
  8300  007A' 285C'              	goto	l2528
  8301  007B'                    l2534:	
  8302                           
  8303                           ;doprnt.c: 1422: {
  8304                           ;doprnt.c: 1438: if(flag & 0x03)
  8305  007B' 0809'              	movf	sprintf@flag,w
  8306  007C' 3903               	andlw	3
  8307  007D' 1903               	btfsc	3,2
  8308  007E' 288A'              	goto	l2540
  8309                           
  8310                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8311  007F' 302D               	movlw	45
  8312  0080' 0084'              	movwf	??_sprintf
  8313  0081' 080D'              	movf	sprintf@sp,w
  8314  0082' 0086               	movwf	6
  8315  0083' 0187               	clrf	7
  8316  0084' 0804'              	movf	??_sprintf,w
  8317  0085' 0081               	movwf	1
  8318  0086' 3001               	movlw	1
  8319  0087' 0084'              	movwf	??_sprintf
  8320  0088' 0804'              	movf	??_sprintf,w
  8321  0089' 078D'              	addwf	sprintf@sp,f
  8322  008A'                    l2540:	
  8323                           
  8324                           ;doprnt.c: 1469: }
  8325                           ;doprnt.c: 1472: prec = c;
  8326  008A' 080E'              	movf	sprintf@c,w
  8327  008B' 0084'              	movwf	??_sprintf
  8328  008C' 0804'              	movf	??_sprintf,w
  8329  008D' 008A'              	movwf	sprintf@prec
  8330  008E'                    l2548:	
  8331                           ;doprnt.c: 1474: while(prec--) {
  8332                           
  8333  008E' 30FF               	movlw	255
  8334  008F' 0084'              	movwf	??_sprintf
  8335  0090' 0804'              	movf	??_sprintf,w
  8336  0091' 078A'              	addwf	sprintf@prec,f
  8337  0092' 0A0A'              	incf	sprintf@prec,w
  8338  0093' 1903               	btfsc	3,2
  8339  0094' 2806'              	goto	l2550
  8340                           
  8341                           ;doprnt.c: 1478: {
  8342                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8343  0095' 300A               	movlw	10
  8344  0096' 0088'              	movwf	___lwmod@divisor
  8345  0097' 3000               	movlw	0
  8346  0098' 0089'              	movwf	___lwmod@divisor+1
  8347  0099' 080A'              	movf	sprintf@prec,w
  8348  009A' 0084'              	movwf	??_sprintf
  8349  009B' 0185'              	clrf	??_sprintf+1
  8350  009C' 3584'              	lslf	??_sprintf,f
  8351  009D' 0D85'              	rlf	??_sprintf+1,f
  8352  009E' 3000'              	movlw	low (_dpowers| (0+32768))
  8353  009F' 0704'              	addwf	??_sprintf,w
  8354  00A0' 0084               	movwf	4
  8355  00A1' 3000'              	movlw	high (_dpowers| (0+32768))
  8356  00A2' 3D05'              	addwfc	??_sprintf+1,w
  8357  00A3' 0085               	movwf	5
  8358  00A4' 3F00               	moviw [0]fsr0
  8359  00A5' 0080'              	movwf	___lwdiv@divisor
  8360  00A6' 3F01               	moviw [1]fsr0
  8361  00A7' 0081'              	movwf	___lwdiv@divisor+1
  8362  00A8' 080C'              	movf	sprintf@val+1,w
  8363  00A9' 0083'              	movwf	___lwdiv@dividend+1
  8364  00AA' 080B'              	movf	sprintf@val,w
  8365  00AB' 0082'              	movwf	___lwdiv@dividend
  8366  00AC' 2000'              	fcall	___lwdiv
  8367  00AD' 0801'              	movf	?___lwdiv+1,w
  8368  00AE' 008B'              	movwf	___lwmod@dividend+1
  8369  00AF' 0800'              	movf	?___lwdiv,w
  8370  00B0' 008A'              	movwf	___lwmod@dividend
  8371  00B1' 2000'              	fcall	___lwmod
  8372  00B2' 0808'              	movf	?___lwmod,w
  8373  00B3' 3E30               	addlw	48
  8374  00B4' 0020               	movlb	0	; select bank0
  8375  00B5' 0086'              	movwf	??_sprintf+2
  8376  00B6' 0806'              	movf	??_sprintf+2,w
  8377  00B7' 008E'              	movwf	sprintf@c
  8378                           
  8379                           ;doprnt.c: 1523: }
  8380                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8381  00B8' 080E'              	movf	sprintf@c,w
  8382  00B9' 0084'              	movwf	??_sprintf
  8383  00BA' 080D'              	movf	sprintf@sp,w
  8384  00BB' 0086               	movwf	6
  8385  00BC' 0187               	clrf	7
  8386  00BD' 0804'              	movf	??_sprintf,w
  8387  00BE' 0081               	movwf	1
  8388  00BF' 3001               	movlw	1
  8389  00C0' 0084'              	movwf	??_sprintf
  8390  00C1' 0804'              	movf	??_sprintf,w
  8391  00C2' 078D'              	addwf	sprintf@sp,f
  8392  00C3' 288E'              	goto	l2548
  8393  00C4'                    l2552:	
  8394                           ;doprnt.c: 1525: }
  8395                           ;doprnt.c: 1533: }
  8396                           ;doprnt.c: 1535: alldone:
  8397                           
  8398                           
  8399                           ;doprnt.c: 1538: *sp = 0;
  8400  00C4' 080D'              	movf	sprintf@sp,w
  8401  00C5' 0086               	movwf	6
  8402  00C6' 0187               	clrf	7
  8403  00C7' 0181               	clrf	1
  8404  00C8' 0008               	return
  8405  00C9'                    __end_of_sprintf:	
  8406                           ;doprnt.c: 1540: return 0;
  8407                           ;	Return value of _sprintf is never used
  8408                           
  8409                           
  8410                           	psect	text55
  8411  0000'                    __ptext55:	
  8412 ;; *************** function ___lwmod *****************
  8413 ;; Defined at:
  8414 ;;		line 6 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;  divisor         2    8[COMMON] unsigned int 
  8417 ;;  dividend        2   10[COMMON] unsigned int 
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  counter         1   13[COMMON] unsigned char 
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  2    8[COMMON] unsigned int 
  8422 ;; Registers used:
  8423 ;;		wreg, status,2, status,0
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8429 ;;      Params:         4       0       0       0
  8430 ;;      Locals:         1       0       0       0
  8431 ;;      Temps:          1       0       0       0
  8432 ;;      Totals:         6       0       0       0
  8433 ;;Total ram usage:        6 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; This function calls:
  8436 ;;		Nothing
  8437 ;; This function is called by:
  8438 ;;		_sprintf
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           
  8443                           ;psect for function ___lwmod
  8444  0000'                    ___lwmod:	
  8445                           
  8446                           ;incstack = 0
  8447                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8448  0000' 0808'              	movf	___lwmod@divisor,w
  8449  0001' 0409'              	iorwf	___lwmod@divisor+1,w
  8450  0002' 1903               	btfsc	3,2
  8451  0003' 2827'              	goto	l2430
  8452  0004' 018D'              	clrf	___lwmod@counter
  8453  0005' 0A8D'              	incf	___lwmod@counter,f
  8454  0006'                    l2420:	
  8455  0006' 1B89'              	btfsc	___lwmod@divisor+1,7
  8456  0007' 2812'              	goto	l2422
  8457  0008' 3001               	movlw	1
  8458  0009'                    u1825:	
  8459  0009' 3588'              	lslf	___lwmod@divisor,f
  8460  000A' 0D89'              	rlf	___lwmod@divisor+1,f
  8461  000B' 0B89               	decfsz	9,f
  8462  000C' 2809'              	goto	u1825
  8463  000D' 3001               	movlw	1
  8464  000E' 008C'              	movwf	??___lwmod
  8465  000F' 080C'              	movf	??___lwmod,w
  8466  0010' 078D'              	addwf	___lwmod@counter,f
  8467  0011' 2806'              	goto	l2420
  8468  0012'                    l2422:	
  8469  0012' 0809'              	movf	___lwmod@divisor+1,w
  8470  0013' 020B'              	subwf	___lwmod@dividend+1,w
  8471  0014' 1D03               	skipz
  8472  0015' 2818'              	goto	u1845
  8473  0016' 0808'              	movf	___lwmod@divisor,w
  8474  0017' 020A'              	subwf	___lwmod@dividend,w
  8475  0018'                    u1845:	
  8476  0018' 1C03               	skipc
  8477  0019' 281E'              	goto	l2426
  8478  001A' 0808'              	movf	___lwmod@divisor,w
  8479  001B' 028A'              	subwf	___lwmod@dividend,f
  8480  001C' 0809'              	movf	___lwmod@divisor+1,w
  8481  001D' 3B8B'              	subwfb	___lwmod@dividend+1,f
  8482  001E'                    l2426:	
  8483  001E' 3001               	movlw	1
  8484  001F'                    u1855:	
  8485  001F' 3689'              	lsrf	___lwmod@divisor+1,f
  8486  0020' 0C88'              	rrf	___lwmod@divisor,f
  8487  0021' 0B89               	decfsz	9,f
  8488  0022' 281F'              	goto	u1855
  8489  0023' 3001               	movlw	1
  8490  0024' 028D'              	subwf	___lwmod@counter,f
  8491  0025' 1D03               	btfss	3,2
  8492  0026' 2812'              	goto	l2422
  8493  0027'                    l2430:	
  8494  0027' 080B'              	movf	___lwmod@dividend+1,w
  8495  0028' 0089'              	movwf	?___lwmod+1
  8496  0029' 080A'              	movf	___lwmod@dividend,w
  8497  002A' 0088'              	movwf	?___lwmod
  8498  002B' 0008               	return
  8499  002C'                    __end_of___lwmod:	
  8500                           
  8501                           	psect	text56
  8502  0000'                    __ptext56:	
  8503 ;; *************** function ___lwdiv *****************
  8504 ;; Defined at:
  8505 ;;		line 6 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;  divisor         2    0[COMMON] unsigned int 
  8508 ;;  dividend        2    2[COMMON] unsigned int 
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  quotient        2    5[COMMON] unsigned int 
  8511 ;;  counter         1    7[COMMON] unsigned char 
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  2    0[COMMON] unsigned int 
  8514 ;; Registers used:
  8515 ;;		wreg, status,2, status,0
  8516 ;; Tracked objects:
  8517 ;;		On entry : 0/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8521 ;;      Params:         4       0       0       0
  8522 ;;      Locals:         3       0       0       0
  8523 ;;      Temps:          1       0       0       0
  8524 ;;      Totals:         8       0       0       0
  8525 ;;Total ram usage:        8 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; This function calls:
  8528 ;;		Nothing
  8529 ;; This function is called by:
  8530 ;;		_sprintf
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function ___lwdiv
  8536  0000'                    ___lwdiv:	
  8537                           
  8538                           ;incstack = 0
  8539                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8540  0000' 0185'              	clrf	___lwdiv@quotient
  8541  0001' 0186'              	clrf	___lwdiv@quotient+1
  8542  0002' 0800'              	movf	___lwdiv@divisor,w
  8543  0003' 0401'              	iorwf	___lwdiv@divisor+1,w
  8544  0004' 1903               	btfsc	3,2
  8545  0005' 282F'              	goto	l2408
  8546  0006' 0187'              	clrf	___lwdiv@counter
  8547  0007' 0A87'              	incf	___lwdiv@counter,f
  8548  0008'                    l2396:	
  8549  0008' 1B81'              	btfsc	___lwdiv@divisor+1,7
  8550  0009' 2814'              	goto	l2398
  8551  000A' 3001               	movlw	1
  8552  000B'                    u1755:	
  8553  000B' 3580'              	lslf	___lwdiv@divisor,f
  8554  000C' 0D81'              	rlf	___lwdiv@divisor+1,f
  8555  000D' 0B89               	decfsz	9,f
  8556  000E' 280B'              	goto	u1755
  8557  000F' 3001               	movlw	1
  8558  0010' 0084'              	movwf	??___lwdiv
  8559  0011' 0804'              	movf	??___lwdiv,w
  8560  0012' 0787'              	addwf	___lwdiv@counter,f
  8561  0013' 2808'              	goto	l2396
  8562  0014'                    l2398:	
  8563  0014' 3001               	movlw	1
  8564  0015'                    u1775:	
  8565  0015' 3585'              	lslf	___lwdiv@quotient,f
  8566  0016' 0D86'              	rlf	___lwdiv@quotient+1,f
  8567  0017' 0B89               	decfsz	9,f
  8568  0018' 2815'              	goto	u1775
  8569  0019' 0801'              	movf	___lwdiv@divisor+1,w
  8570  001A' 0203'              	subwf	___lwdiv@dividend+1,w
  8571  001B' 1D03               	skipz
  8572  001C' 281F'              	goto	u1785
  8573  001D' 0800'              	movf	___lwdiv@divisor,w
  8574  001E' 0202'              	subwf	___lwdiv@dividend,w
  8575  001F'                    u1785:	
  8576  001F' 1C03               	skipc
  8577  0020' 2826'              	goto	l2404
  8578  0021' 0800'              	movf	___lwdiv@divisor,w
  8579  0022' 0282'              	subwf	___lwdiv@dividend,f
  8580  0023' 0801'              	movf	___lwdiv@divisor+1,w
  8581  0024' 3B83'              	subwfb	___lwdiv@dividend+1,f
  8582  0025' 1405'              	bsf	___lwdiv@quotient,0
  8583  0026'                    l2404:	
  8584  0026' 3001               	movlw	1
  8585  0027'                    u1795:	
  8586  0027' 3681'              	lsrf	___lwdiv@divisor+1,f
  8587  0028' 0C80'              	rrf	___lwdiv@divisor,f
  8588  0029' 0B89               	decfsz	9,f
  8589  002A' 2827'              	goto	u1795
  8590  002B' 3001               	movlw	1
  8591  002C' 0287'              	subwf	___lwdiv@counter,f
  8592  002D' 1D03               	btfss	3,2
  8593  002E' 2814'              	goto	l2398
  8594  002F'                    l2408:	
  8595  002F' 0806'              	movf	___lwdiv@quotient+1,w
  8596  0030' 0081'              	movwf	?___lwdiv+1
  8597  0031' 0805'              	movf	___lwdiv@quotient,w
  8598  0032' 0080'              	movwf	?___lwdiv
  8599  0033' 0008               	return
  8600  0034'                    __end_of___lwdiv:	
  8601                           
  8602                           	psect	text57
  8603  0000'                    __ptext57:	
  8604 ;; *************** function _EUSART_Write *****************
  8605 ;; Defined at:
  8606 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;  txData          1    wreg     unsigned char 
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  txData          1    0[COMMON] unsigned char 
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      void 
  8613 ;; Registers used:
  8614 ;;		wreg
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8620 ;;      Params:         0       0       0       0
  8621 ;;      Locals:         1       0       0       0
  8622 ;;      Temps:          0       0       0       0
  8623 ;;      Totals:         1       0       0       0
  8624 ;;Total ram usage:        1 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; This function calls:
  8627 ;;		Nothing
  8628 ;; This function is called by:
  8629 ;;		_DisplayVal
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _EUSART_Write
  8635  0000'                    _EUSART_Write:	
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _EUSART_Write: [wreg]
  8639                           ;EUSART_Write@txData stored from wreg
  8640  0000' 0080'              	movwf	EUSART_Write@txData
  8641  0001'                    l44:	
  8642                           ;eusart.c: 115: {
  8643                           
  8644                           ;eusart.c: 114: while(0 == PIR1bits.TXIF)
  8645                           
  8646  0001' 0020               	movlb	0	; select bank0
  8647  0002' 1E11               	btfss	17,4	;volatile
  8648  0003' 2801'              	goto	l44
  8649                           
  8650                           ;eusart.c: 116: }
  8651                           ;eusart.c: 118: TX1REG = txData;
  8652  0004' 0800'              	movf	EUSART_Write@txData,w
  8653  0005' 0023               	movlb	3	; select bank3
  8654  0006' 009A               	movwf	26	;volatile
  8655  0007' 0008               	return
  8656  0008'                    __end_of_EUSART_Write:	
  8657  007E                     btemp	set	126	;btemp
  8658  007E                     wtemp0	set	126


Data Sizes:
    Strings     3
    Constant    26
    Data        25
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     34      71
    BANK1            80      0      16
    BANK2            80      0       0

Pointer List with Targets:

    Button_Service$1586$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Service$1586	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> DisplayVal@valStr(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    DisplayVal@str	PTR unsigned char  size(1) Largest target is 10
		 -> DisplayVal@valStr(BANK0[10]), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Service@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    S539$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    S539$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E5394,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Service@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E5405,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E5405,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_Acq_ExecuteScan
    _Sensor_Acq_ExecuteScan->___bmul
    _Button_Service->_Button_State_Initializing
    _Button_Service->_Button_State_NotPressed
    _Button_Service->_Button_State_Pressed
    _MTOUCH_Sensor_wasSampled->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_DisplayVal
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_Deviation_Update
    _DisplayVal->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    9474
                                             29 BANK0      5     5      0
                         _DisplayVal
            _MTOUCH_Button_isPressed
        _MTOUCH_Sensor_RawSample_Get
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1275
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    1275
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0     918
                                              8 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0     850
                                              6 COMMON     2     2      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     370
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0     201
                                              4 COMMON     2     2      0
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0    6163
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     121
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   0     0      0     121
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0    1985
                                             13 COMMON     1     1      0
                                             13 BANK0      1     1      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       5     5      0    1917
                                              8 BANK0      5     5      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                  _Sensor_setSampled
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              1     1      0      77
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1      53
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   6     6      0    1250
                                              9 COMMON     4     4      0
                                              6 BANK0      2     2      0
           _Sensor_Acq_ExecutePacket
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     1     1      0      77
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Acq_ExecutePacket                             7     7      0     732
                                              8 COMMON     1     1      0
                                              0 BANK0      6     6      0
                       _MTOUCH_Delay
                      _MTOUCH_Random
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_Acq_ExecuteScan
             _Sensor_setScanFunction
 ---------------------------------------------------------------------------------
 (6) _Sensor_setScanFunction                               1     1      0      77
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecuteScan                               4     4      0     394
                                              4 COMMON     4     4      0
                 _MTOUCH_CVD_ScanA_0 *
                 _MTOUCH_CVD_ScanB_0 *
                             ___bmul
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_CVD_ScanB_0                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_CVD_ScanA_0                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Random                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Delay                                         2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    3901
                                              9 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    3833
                                              5 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     370
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1     521
                                             13 COMMON     1     0      1
                                              0 BANK0      2     2      0
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1     882
                                             13 COMMON     1     0      1
                                              0 BANK0      2     2      0
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     133
                                              0 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1     936
                                             13 COMMON     1     0      1
                                              0 BANK0      4     4      0
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     478
                                              8 COMMON     5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                3     3      0     579
                                              8 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     370
                                              4 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     326
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              0 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DisplayVal                                          14    12      2    1531
                                             15 BANK0     14    12      2
                       _EUSART_Write
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    19      4    1311
                                              0 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     414
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DisplayVal
     _EUSART_Write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _MTOUCH_Button_isPressed
   _MTOUCH_Sensor_RawSample_Get
     ___bmul
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _MTOUCH_Sensor_RawSample_Get
             ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Delay
             _MTOUCH_Random
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_Acq_ExecuteScan
               _MTOUCH_CVD_ScanA_0 *
               _MTOUCH_CVD_ScanB_0 *
               ___bmul *
             _Sensor_setScanFunction
           _Sensor_isEnabled
           _Sensor_setActive
           _Sensor_setInactive
           _abs
         _Sensor_DefaultCallback *
         _Sensor_RawSample_Update *
         _Sensor_setSampled *
         ___bmul *
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
   _SYSTEM_Initialize
     _EUSART_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _WDT_Initialize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      65       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     22      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      10       8       20.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      65      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr  6 20:11:57 2018

           ?_MTOUCH_Sensor_RawSample_Get 0004                                        pc 0002  
                         ___bmul@product 0002                              __CFG_CP$OFF 0000  
                 _Sensor_setScanFunction 0000                                       l44 0001  
        __size_of_Sensor_Acq_ExecuteScan 005E               __end_of_Sensor_setInactive 0007  
                                    LATA 010C                              __CFG_LVP$ON 0000  
                                    l201 0063                                      l433 003E  
                                    l189 0033                                      l437 0056  
                                    l391 0019                                      l388 0002  
                                    l590 003E                                      l582 0001  
                                    l594 005C                                      _GIE 005F  
                           __CFG_CPD$OFF 0000                                      _abs 0000  
                __size_of_PMD_Initialize 0008                                      wreg 0009  
       ??_MTOUCH_Sensor_Sampled_ResetAll 0001          ?_MTOUCH_Sensor_Sampled_ResetAll 0000  
       __size_of_MTOUCH_Sensor_SampleAll 0016        __size_of_MTOUCH_Sensor_Initialize 001A  
                                   S2776 0000                                     S2778 0000  
              ?_MTOUCH_Sensor_Initialize 0000                                     INDF0 0000  
                                   INDF1 0001                                     FSR0H 0005  
                                   FSR1H 0007                                     FSR0L 0004  
                                   FSR1L 0006                       _MTOUCH_CVD_ScanA_0 0000  
                     _MTOUCH_CVD_ScanB_0 0000                                     ?_abs 0000  
                                   l2014 0013                                     l2022 0005  
                                   l2050 0032                                     l2042 000C  
                                   l2108 0046                                     l2044 0012  
                                   l2060 0058                                     l2124 000B  
                                   l2222 0085                                     l2230 0015  
                                   l2302 0047                                     l2216 0069  
                                   l2208 0033                                     l2056 0051  
                                   l2048 0019                                     l2304 004A  
                                   l2218 0071                                     l2250 005C  
                                   l2058 0055                                     l2404 0026  
                                   l2420 0006                                     l2260 0023  
                                   l2228 0013                                     l2244 002F  
                                   l2156 0035                                     l2316 000F  
                                   l2422 0012                                     l2430 0027  
                                   l2190 0011                                     l2334 0010  
                                   l2408 002F                                     l2512 0040  
                                   l2426 001E                                     l2522 0056  
                                   l2506 0028                                     l2290 000D  
                                   l2540 008A                                     l2604 0010  
                                   l2380 0024                                     l2276 0009  
                                   l2534 007B                                     l2550 0006  
                                   l2606 0021                                     l2382 0033  
                                   l2374 0014                                     l2278 000E  
                                   l2710 005E                                     l2528 005C  
                                   l2552 00C4                                     l2296 0015  
                                   l2480 0014                                     l2472 0005  
                                   l2712 006D                                     l2706 004C  
                                   l2396 0008                                     l2548 008E  
                                   l2398 0014                                     l2478 000C  
                                   l2592 0018                                     l2690 001E  
                                   l2774 0028                                     l2686 001A  
                                   l1992 0008                                     l2696 0036  
                                   l2688 001C                                     l1988 0002  
                                   TRISA 008C                                     STR_1 0010  
                                   u1305 0004                                     u2050 0016  
                                   u1315 001D                                     u2045 0007  
                                   _LATA 010C                                     u1335 0011  
                                   u1440 0050                                     u1345 0053  
                                   u2305 002E                                     u1435 000F  
                                   u1445 004C                                     u2325 004A  
                                   u1615 0042                                     u2335 0057  
                                   u1705 0005                                     u2345 006B  
                                   u2357 0006                                     u1495 003B  
                                   u2367 0006                                     u1825 0009  
                                   u1755 000B                                     u1845 0018  
                                   u1775 0015                                     u1855 001F  
                                   u1785 001F                                     u1795 0027  
                                   _PMD0 0911                                     u1965 0071  
                                   _PMD1 0912                                     _PMD2 0913  
                                   _PMD3 0914                                     _PMD4 0915  
                                   _PMD5 0916               Button_State_Pressed@button 000D  
                                   _WPUA 020C        __size_of_Sensor_Acq_ExecutePacket 0058  
              ?_Sensor_Acq_ExecutePacket 0000                             __CFG_WRT$OFF 0000  
                          __CFG_FCMEN$ON 0000                                     abs@a 0000  
                                   _main 0000     __size_of_MTOUCH_Button_InitializeAll 001B  
                       DisplayVal@valStr 0012                                     fsr0h 0005  
                                   fsr1h 0007                                     indf0 0000  
                                   fsr0l 0004                                     indf1 0001  
                                   fsr1l 0006     __size_of_MTOUCH_Sensor_InitializeAll 000B  
                                   btemp 007E                      ?_MTOUCH_CVD_ScanA_0 0000  
                    ?_MTOUCH_CVD_ScanB_0 0000                            __CFG_BOREN$ON 0000  
                          __CFG_BORV$LOW 0000                                     start 0000* 
                          __CFG_CSWEN$ON 0000                        ___bmul@multiplier 0003  
                          __CFG_MCLRE$ON 0000                                    ADCON0 009D  
               ?_MTOUCH_Service_Mainloop 0000         __size_of_MTOUCH_Button_isPressed 001A  
          __size_of_Button_State_Pressed 004E                                    ??_abs 0002  
            ?_Button_Baseline_Initialize 0000            ??_MTOUCH_Sensor_RawSample_Get 0006  
          Sensor_RawSample_Update@sensor 0000                __size_of_Sensor_isEnabled 000D  
                          ?_EUSART_Write 0000           __size_of_OSCILLATOR_Initialize 0009  
          __end_of_OSCILLATOR_Initialize 0009                                    _ADACT 009F  
                                  ?_main 0000                                    _ADRES 009B  
                          __CFG_WDTE$OFF 0000                     ??_MTOUCH_CVD_ScanA_0 0000  
                   ??_MTOUCH_CVD_ScanB_0 0000                           __CFG_DEBUG$OFF 0000  
                __size_of_Button_Service 0046                          __end_of___lwdiv 0034  
                        __end_of___lwmod 002C                                    u165m0 000C  
                                  _OSCEN 091D                                    _TRISA 008C  
        __size_of_Button_DefaultCallback 0001                               _DisplayVal 0000  
        __size_of_Sensor_DefaultCallback 0001                          __end_of_dpowers 000A  
                __size_of_Sensor_Service 0036    __end_of_MTOUCH_Sensor_Scan_Initialize 0006  
 __size_of_MTOUCH_Sensor_Scan_Initialize 0006            _MTOUCH_Sensor_Scan_Initialize 0000  
                         _WDT_Initialize 0000                  Sensor_setSampled@sensor 0000  
                 _Sensor_Acq_ExecuteScan 0000                                    main@i 0020  
       __size_of_Button_State_NotPressed 0086                                    pclath 000A  
                   _Sensor_Sampled_Reset 0000                                    status 0003  
                                  wtemp0 007E                          __end_of_sprintf 00C9  
              __size_of_Sensor_setActive 0007                   Sensor_isEnabled@sensor 0000  
                        __initialization 0000                             __end_of_main 0074  
                  __end_of_MTOUCH_Random 0011                           ??_EUSART_Write 0000  
       __end_of_MTOUCH_Button_Initialize 0030                                   ??_main 001D  
                _MTOUCH_Sensor_Calibrate 0000                  ??_Button_Reading_Update 0008  
   MTOUCH_Sensor_Sampled_ResetAll@sensor 0002                 ?_Button_Deviation_Update 0000  
                 __end_of_WDT_Initialize 0004                             ?_MTOUCH_Tick 0000  
           Button_Baseline_Update@button 0006                                   _ADCON0 009D  
                                 _ADCON1 009E     __size_of_MTOUCH_Sensor_RawSample_Get 0016  
                                 _ANSELA 018C                       __CFG_RSTOSC$HFINT1 0000  
                                 _RC1REG 0199                                   _RC1STA 019D  
                                 _ODCONA 028C                    ?_Sensor_Sampled_Reset 0000  
                                 _OSCFRQ 091F                                   _TX1REG 019A  
                                 _WDTCON 0097                                   _TX1STA 019E  
      MTOUCH_Button_InitializeAll@button 0005                   _Button_DefaultCallback 0000  
        __end_of_MTOUCH_Service_Mainloop 0010                           __CFG_PWRTE$OFF 0000  
                 _Sensor_DefaultCallback 0000                            _packet_sample 0002  
                                 ___bmul 0000             Sensor_DefaultCallback@sensor 0000  
                         __CFG_STVREN$ON 0000                                ??___lwdiv 0004  
                              ??___lwmod 000C                                   _bright 0000  
       __end_of_MTOUCH_Button_ServiceAll 000D                           _PMD_Initialize 0000  
                _MTOUCH_Sensor_SampleAll 0000             Button_DefaultCallback@button 0000  
                        ?_WDT_Initialize 0000                 ?_Sensor_RawSample_Update 0000  
                            ?_DisplayVal 000F               __end_of_Sensor_Acquisition 004C  
                ?_Button_Baseline_Update 0000                                ??_sprintf 0004  
        MTOUCH_Sensor_RawSample_Get@name 0007                        _SYSTEM_Initialize 0000  
                __end_of__initialization 0016      __size_of_Button_Baseline_Initialize 0028  
         ?_MTOUCH_Sensor_Scan_Initialize 0000                       ?_SYSTEM_Initialize 0000  
                    _Button_StateMachine 0000               __end_of_Button_Tick_helper 0023  
          MTOUCH_Sensor_Calibrate@sensor 0000                      ___bmul@multiplicand 0000  
                ?_Sensor_setScanFunction 0000                           __pcstackCOMMON 0000  
                _MTOUCH_Button_isPressed 0000                             __pidataBANK0 0000  
                    ??_SYSTEM_Initialize 000A               __end_of_MTOUCH_Button_Tick 0003  
       __end_of_MTOUCH_Sensor_Initialize 001A                ??_MTOUCH_Sensor_Calibrate 0000  
                       _Sensor_isEnabled 0000          __end_of_Button_Deviation_Update 008E  
                 __end_of_PMD_Initialize 0008                 Sensor_setInactive@sensor 0000  
                         _Button_Service 0000         __end_of_Sensor_Acq_ExecutePacket 0058  
             ?_Button_State_Initializing 000D                     Button_Service@button 0008  
         __end_of_Button_Baseline_Update 0087                     Sensor_Service@sensor 000C  
               _MTOUCH_Button_Initialize 0000                           _Sensor_Service 0000  
                _Button_State_NotPressed 0000            __size_of_MTOUCH_Sensor_Enable 0010  
                     _Sensor_setInactive 0000                __end_of_SYSTEM_Initialize 0007  
       MTOUCH_Sensor_isCalibrated@sensor 0000                   ??_Sensor_Sampled_Reset 0000  
                             __pbssBANK0 0000                               __pbssBANK1 0000  
                   __end_of_EUSART_Write 0008                      ?_Sensor_setInactive 0000  
                       _Sensor_setActive 0000                       Sensor_Service@name 000A  
             __end_of_mtouch_button_init 0010           __end_of_Sensor_setScanFunction 0012  
                             __pmaintext 0000                            ?_MTOUCH_Delay 0000  
                                ?___bmul 0000                      __size_of_DisplayVal 0028  
                        __CFG_PPS1WAY$ON 0000           MTOUCH_Sensor_wasSampled@sensor 0005  
                 __end_of_Button_Service 0046      __end_of_MTOUCH_Button_InitializeAll 001B  
            _MTOUCH_Button_InitializeAll 0000      __end_of_MTOUCH_Sensor_InitializeAll 000B  
            _MTOUCH_Sensor_InitializeAll 0000                ??_MTOUCH_Sensor_SampleAll 000D  
                        ?_PMD_Initialize 0000          __end_of_Sensor_RawSample_Update 0019  
                   ??_Sensor_setInactive 0000        __size_of_MTOUCH_Sensor_wasSampled 0013  
              ?_MTOUCH_Sensor_wasSampled 0000        __end_of_Button_State_Initializing 0057  
                 __end_of_Sensor_Service 0036                                  _SP1BRGH 019C  
                                _SP1BRGL 019B                 _MTOUCH_Button_ServiceAll 0000  
                ?_Sensor_Acq_ExecuteScan 0000                                  _OSCCON1 0919  
                                _OSCCON3 091B            MTOUCH_Sensor_SampleAll@sensor 000D  
                                _OSCTUNE 091E         __size_of_MTOUCH_Service_Mainloop 0010  
           __end_of_Button_State_Pressed 004E         Button_Baseline_Initialize@button 000C  
                   __size_of_MTOUCH_Tick 0002                ??_MTOUCH_Button_isPressed 0000  
                         ??_MTOUCH_Delay 0000                           _packet_counter 0007  
                Sensor_Acquisition@retry 0006                          __size_of___bmul 0011  
         MTOUCH_Button_Initialize@button 0003                                  ___lwdiv 0000  
                                ___lwmod 0000                          ?_Button_Service 0000  
                                __ptext1 0000                                  __ptext2 0000  
                                __ptext3 0000                                  __ptext4 0000  
                                __ptext5 0000                                  __ptext6 0000  
                                __ptext7 0000                                  __ptext8 0000  
                                __ptext9 0000              Button_Reading_Update@button 000A  
            __size_of_MTOUCH_CVD_ScanA_0 0025              __size_of_MTOUCH_CVD_ScanB_0 0025  
               _MTOUCH_Sensor_Initialize 0000                                  _dpowers 0000  
         __end_of_Sensor_Acq_ExecuteScan 005E                    _OSCILLATOR_Initialize 0000  
                           __size_of_abs 000E                ??_Button_State_NotPressed 0000  
                        ?_Sensor_Service 0000                 ??_PIN_MANAGER_Initialize 0000  
         __size_of_Button_Reading_Update 0061            __end_of_Button_Reading_Update 0061  
      MTOUCH_Sensor_InitializeAll@sensor 0009                 _Sensor_Acq_ExecutePacket 0000  
                       _callback_sampled 000A               __size_of_SYSTEM_Initialize 0007  
                                _sprintf 0000                                  clrloop0 0001  
                       _callback_pressed 000E           MTOUCH_Sensor_Initialize@sensor 0007  
                   end_of_initialization 0016                  ?_Button_DefaultCallback 0000  
                                init_ram 0000                                  initloop 0001  
                ?_Sensor_DefaultCallback 0000         __size_of_Button_Deviation_Update 008E  
                      _EUSART_Initialize 0000             ??_MTOUCH_Sensor_isCalibrated 0000  
                     ?_EUSART_Initialize 0000      __end_of_MTOUCH_Sensor_RawSample_Get 0016  
            _MTOUCH_Sensor_RawSample_Get 0000                            MTOUCH_Delay@i 0001  
                    ??_EUSART_Initialize 0000                         ??_WDT_Initialize 0000  
                              _PORTAbits 000C                   Sensor_setActive@sensor 0000  
          Button_Deviation_Update@button 0000                                _TRISAbits 008C  
                           ??_DisplayVal 0011                    __size_of_EUSART_Write 0008  
             MTOUCH_Sensor_Enable@sensor 0005                      _callback_notPressed 000C  
                       __CFG_FEXTOSC$OFF 0000      __size_of_MTOUCH_Sensor_isCalibrated 0002  
         __end_of_Button_DefaultCallback 0001                       _sensor_globalFlags 0009  
                 __size_of_MTOUCH_Random 0011                 __end_of_Sensor_isEnabled 000D  
         __end_of_Sensor_DefaultCallback 0001                __end_of_EUSART_Initialize 000C  
           Sensor_Acq_ExecuteScan@result 0006         __size_of_Sensor_RawSample_Update 0019  
                     _Sensor_Acquisition 0000                       __end_of_DisplayVal 0028  
                   _Button_State_Pressed 0000                           __end_of___bmul 0011  
                    ?_Sensor_Acquisition 0000               ??_MTOUCH_Button_Initialize 0000  
        ??_MTOUCH_Sensor_Scan_Initialize 0000                             _EUSART_Write 0000  
          Sensor_Acq_ExecutePacket@error 0004                       _Button_Tick_helper 0000  
                 ?_OSCILLATOR_Initialize 0000                 __end_of_Sensor_setActive 0007  
            ??_Button_State_Initializing 0000                      start_initialization 0000  
                _MTOUCH_Service_Mainloop 0000          __size_of_PIN_MANAGER_Initialize 0012  
                   __end_of_MTOUCH_Delay 000B                       _MTOUCH_Button_Tick 0000  
                    ?_Button_Tick_helper 0000                              __end_of_abs 000E  
                   ??_Sensor_Acquisition 0009                      ?_MTOUCH_Button_Tick 0000  
        Button_State_Initializing@button 000D         __end_of_MTOUCH_Sensor_wasSampled 0013  
                       __CFG_LPBOREN$OFF 0000                     ??_Button_Tick_helper 0000  
           __end_of_MTOUCH_Sensor_Enable 0010                                 ??___bmul 0001  
                       ??_PMD_Initialize 0000                    ?_Button_State_Pressed 000D  
             ??_MTOUCH_Button_ServiceAll 0009                              __pdataBANK0 0000  
                          _MTOUCH_Random 0000             ??_Button_Baseline_Initialize 0008  
                   ??_MTOUCH_Button_Tick 0003                       _mtouch_button_init 0000  
             Sensor_Sampled_Reset@sensor 0000       Sensor_Acq_ExecutePacket@ADACT_temp 0002  
                              ___latbits 0000                            __pcstackBANK0 0000  
         MTOUCH_Button_ServiceAll@button 000A                      Sensor_Service@error 000B  
          __size_of_Sensor_Sampled_Reset 0007               __size_of_EUSART_Initialize 000C  
                            sprintf@flag 0009                  _Button_Deviation_Update 0000  
                            sprintf@prec 000A                _Button_State_Initializing 0000  
     __end_of_MTOUCH_Sensor_isCalibrated 0002               _MTOUCH_Sensor_isCalibrated 0000  
                      _Sensor_setSampled 0000                         ___lwdiv@dividend 0002  
                 _PIN_MANAGER_Initialize 0000                         ??_Button_Service 0005  
               ?_MTOUCH_Sensor_Calibrate 0000                       ?_Sensor_setSampled 0000  
             ??_MTOUCH_Sensor_Initialize 0006                           ?_MTOUCH_Random 0000  
                               ?___lwdiv 0000                                 ?___lwmod 0008  
                       ??_Sensor_Service 0008               ??_Sensor_Acq_ExecutePacket 0008  
                    ??_Sensor_setSampled 0000                                __pswtext1 0000  
                              __pswtext2 0000                ??_MTOUCH_Service_Mainloop 000E  
            __size_of_Sensor_setInactive 0007                                 _BAUD1CON 019F  
         Sensor_Acq_ExecutePacket@sensor 0005                            ??_MTOUCH_Tick 0003  
                       ___lwdiv@quotient 0005                                 ?_sprintf 0000  
              __end_of_Sensor_setSampled 0007                       _currentScannSensor 0008  
                _Sensor_RawSample_Update 0000                                clear_ram0 0000  
                               _PIR1bits 0011                   ??_Button_State_Pressed 0000  
 __end_of_MTOUCH_Sensor_Sampled_ResetAll 0011  __size_of_MTOUCH_Sensor_Sampled_ResetAll 0011  
         _MTOUCH_Sensor_Sampled_ResetAll 0000                 ?_MTOUCH_Sensor_SampleAll 0000  
               _MTOUCH_Sensor_wasSampled 0000                       _mtouch_time_toScan 000B  
                              _toggleLED 0005               __end_of_MTOUCH_CVD_ScanA_0 0025  
             __end_of_MTOUCH_CVD_ScanB_0 0025                 ??_Button_Baseline_Update 0000  
                             _ADCON0bits 009D                    __size_of_MTOUCH_Delay 000B  
                               _WPUAbits 020C                     _MTOUCH_Sensor_Enable 0000  
               Button_Tick_helper@button 0002                ??_Button_Deviation_Update 0000  
                  _Button_Reading_Update 0000                 ??_Sensor_setScanFunction 0000  
               ?_MTOUCH_Button_isPressed 0000                        ?_Sensor_isEnabled 0000  
                    __end_of_MTOUCH_Tick 0002                        _MTOUCH_Initialize 0000  
        __end_of_MTOUCH_Sensor_Calibrate 0001                       ??_Sensor_isEnabled 0000  
                     ?_MTOUCH_Initialize 0000                          ??_MTOUCH_Random 0000  
                           _MTOUCH_Delay 0000                             _sample_delay 0006  
                ??_OSCILLATOR_Initialize 0000       __end_of_Button_Baseline_Initialize 0028  
             _Button_Baseline_Initialize 0000                 Sensor_Acquisition@sensor 0007  
                    ??_MTOUCH_Initialize 000A                         __size_of___lwdiv 0034  
                       __size_of___lwmod 002C                 ?_Button_State_NotPressed 000D  
                             _ANSELAbits 018C                       Button_Service@name 0007  
                      ?_Sensor_setActive 0000                               sprintf@val 000B  
                           _Sensor_scanA 0008                             _Sensor_scanB 0006  
                        ___lwdiv@divisor 0000                       ??_Sensor_setActive 0000  
                        ___lwdiv@counter 0007                    ?_MTOUCH_Sensor_Enable 0000  
                               __ptext10 0000                                 __ptext11 0000  
                               __ptext20 0000                                 __ptext12 0000  
                               __ptext21 0000                                 __ptext13 0000  
                               __ptext30 0000                                 __ptext22 0000  
                               __ptext14 0000                                 __ptext31 0000  
                               __ptext23 0000                                 __ptext15 0000  
                               __ptext40 0000                                 __ptext32 0000  
                               __ptext24 0000                                 __ptext16 0000  
                               __ptext41 0000                                 __ptext33 0000  
                               __ptext25 0000                                 __ptext17 0000  
                               __ptext50 0000                                 __ptext42 0000  
                               __ptext34 0000                                 __ptext26 0000  
                               __ptext18 0000                                 __ptext51 0000  
                               __ptext43 0000                                 __ptext35 0000  
                               __ptext27 0000                                 __ptext19 0000  
                               __ptext52 0000                                 __ptext44 0000  
                               __ptext36 0000                                 __ptext28 0000  
                               __ptext53 0000                                 __ptext45 0000  
                               __ptext37 0000                                 __ptext29 0000  
                               __ptext54 0000                                 __ptext46 0000  
                               __ptext38 0000                                 __ptext55 0000  
                               __ptext47 0000                                 __ptext39 0000  
                               __ptext56 0000                                 __ptext48 0000  
                               __ptext57 0000                                 __ptext49 0000  
                       __size_of_sprintf 00C9                __end_of_MTOUCH_Initialize 0005  
              ??_Sensor_RawSample_Update 0000      Sensor_Acq_ExecutePacket@ADCON0_temp 0000  
    Sensor_Acq_ExecutePacket@ADCON1_temp 0001               __size_of_Sensor_setSampled 0007  
                          __size_of_main 0074          __end_of_MTOUCH_Sensor_SampleAll 0016  
                               _myStatus 0004                               _RA4PPSbits 0E94  
                             _RC1STAbits 019D             Sensor_setScanFunction@sensor 0000  
               ??_Sensor_Acq_ExecuteScan 0004       __size_of_Button_State_Initializing 0057  
                               main@data 001E        Sensor_Acq_ExecutePacket@GIE_state 0003  
                          DisplayVal@val 000F                            DisplayVal@str 001C  
        __size_of_Button_Baseline_Update 0087             ?_MTOUCH_Button_InitializeAll 0000  
           ?_MTOUCH_Sensor_InitializeAll 0000                            _mtouch_button 0000  
                             _INTCONbits 000B                            _mtouch_sensor 0010  
        __end_of_MTOUCH_Button_isPressed 001A                              _MTOUCH_Tick 0000  
                 ?_Button_Reading_Update 0000         Button_Deviation_Update@deviation 0001  
                __size_of_WDT_Initialize 0004             MTOUCH_Button_Initialize@name 0002  
      __size_of_MTOUCH_Button_Initialize 0030                ?_MTOUCH_Button_Initialize 0000  
            __size_of_Sensor_Acquisition 004C                                sprintf@ap 0008  
                              sprintf@sp 000D          __size_of_Sensor_setScanFunction 0012  
                       ___lwmod@dividend 000A                  ?_PIN_MANAGER_Initialize 0000  
                      __CFG_CLKOUTEN$OFF 0000              ?_MTOUCH_Sensor_isCalibrated 0000  
                      MTOUCH_Random@seed 000A              __size_of_Button_Tick_helper 0023  
        __end_of_Button_State_NotPressed 0086             __end_of_Sensor_Sampled_Reset 0007  
            __size_of_MTOUCH_Button_Tick 0003                            __pstringtext1 0000  
                          __pstringtext2 0000                            __pstringtext3 0000  
                               sprintf@c 000E                                 sprintf@f 0000  
          ??_MTOUCH_Button_InitializeAll 0004                 ??_Button_DefaultCallback 0001  
                        ___lwmod@divisor 0008            ??_MTOUCH_Sensor_InitializeAll 0008  
       __size_of_MTOUCH_Sensor_Calibrate 0001                          ___lwmod@counter 000D  
                 ??_MTOUCH_Sensor_Enable 0004                 ??_Sensor_DefaultCallback 0001  
                             _TX1STAbits 019E        __size_of_MTOUCH_Button_ServiceAll 000D  
              ?_MTOUCH_Button_ServiceAll 0000            Button_State_NotPressed@button 000D  
                     EUSART_Write@txData 0000               __size_of_MTOUCH_Initialize 0005  
         __end_of_PIN_MANAGER_Initialize 0012                   _Button_Baseline_Update 0000  
            MTOUCH_Button_isPressed@name 0001               ??_MTOUCH_Sensor_wasSampled 0004  
