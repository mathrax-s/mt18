

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr  6 20:14:00 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	16F18313
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	swtext1,local,class=CONST,delta=2
    46                           	psect	swtext2,local,class=CONST,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text56,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2
    74                           	psect	pa_nodes0,global,class=CODE,delta=2
    75                           	dabs	1,0x7E,2
    76  0000                     
    77                           ; Version 1.45
    78                           ; Generated 16/11/2017 GMT
    79                           ; 
    80                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC16F18313 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  008C                     	;# 
   144  0090                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0097                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  0111                     	;# 
   158  0112                     	;# 
   159  0115                     	;# 
   160  0116                     	;# 
   161  0117                     	;# 
   162  0118                     	;# 
   163  0119                     	;# 
   164  018C                     	;# 
   165  0197                     	;# 
   166  0199                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  019A                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019C                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019D                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019E                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  020C                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0216                     	;# 
   205  0216                     	;# 
   206  0217                     	;# 
   207  0217                     	;# 
   208  028C                     	;# 
   209  0291                     	;# 
   210  0291                     	;# 
   211  0292                     	;# 
   212  0293                     	;# 
   213  0294                     	;# 
   214  0295                     	;# 
   215  0295                     	;# 
   216  0296                     	;# 
   217  0297                     	;# 
   218  0298                     	;# 
   219  030C                     	;# 
   220  038C                     	;# 
   221  0391                     	;# 
   222  0392                     	;# 
   223  0393                     	;# 
   224  039A                     	;# 
   225  039C                     	;# 
   226  039D                     	;# 
   227  039E                     	;# 
   228  039F                     	;# 
   229  0498                     	;# 
   230  0498                     	;# 
   231  0499                     	;# 
   232  049A                     	;# 
   233  049B                     	;# 
   234  049B                     	;# 
   235  049C                     	;# 
   236  049D                     	;# 
   237  049E                     	;# 
   238  049F                     	;# 
   239  0617                     	;# 
   240  0618                     	;# 
   241  0619                     	;# 
   242  0619                     	;# 
   243  061A                     	;# 
   244  061B                     	;# 
   245  061C                     	;# 
   246  061C                     	;# 
   247  0691                     	;# 
   248  0692                     	;# 
   249  0693                     	;# 
   250  0694                     	;# 
   251  0695                     	;# 
   252  0696                     	;# 
   253  0697                     	;# 
   254  0698                     	;# 
   255  0699                     	;# 
   256  0891                     	;# 
   257  0891                     	;# 
   258  0891                     	;# 
   259  0891                     	;# 
   260  0891                     	;# 
   261  0891                     	;# 
   262  0892                     	;# 
   263  0892                     	;# 
   264  0892                     	;# 
   265  0893                     	;# 
   266  0893                     	;# 
   267  0893                     	;# 
   268  0893                     	;# 
   269  0893                     	;# 
   270  0893                     	;# 
   271  0894                     	;# 
   272  0894                     	;# 
   273  0894                     	;# 
   274  0895                     	;# 
   275  0895                     	;# 
   276  0895                     	;# 
   277  0896                     	;# 
   278  0896                     	;# 
   279  0896                     	;# 
   280  089B                     	;# 
   281  0911                     	;# 
   282  0912                     	;# 
   283  0913                     	;# 
   284  0914                     	;# 
   285  0915                     	;# 
   286  0916                     	;# 
   287  0918                     	;# 
   288  0919                     	;# 
   289  091A                     	;# 
   290  091B                     	;# 
   291  091C                     	;# 
   292  091D                     	;# 
   293  091E                     	;# 
   294  091F                     	;# 
   295  0E0F                     	;# 
   296  0E10                     	;# 
   297  0E11                     	;# 
   298  0E12                     	;# 
   299  0E13                     	;# 
   300  0E14                     	;# 
   301  0E15                     	;# 
   302  0E18                     	;# 
   303  0E1A                     	;# 
   304  0E1B                     	;# 
   305  0E1C                     	;# 
   306  0E20                     	;# 
   307  0E21                     	;# 
   308  0E22                     	;# 
   309  0E24                     	;# 
   310  0E25                     	;# 
   311  0E28                     	;# 
   312  0E29                     	;# 
   313  0E2A                     	;# 
   314  0E2B                     	;# 
   315  0E90                     	;# 
   316  0E91                     	;# 
   317  0E92                     	;# 
   318  0E94                     	;# 
   319  0E95                     	;# 
   320  0F0F                     	;# 
   321  0F10                     	;# 
   322  0F11                     	;# 
   323  0F12                     	;# 
   324  0F13                     	;# 
   325  0F14                     	;# 
   326  0F15                     	;# 
   327  0F16                     	;# 
   328  0F17                     	;# 
   329  0F18                     	;# 
   330  0F19                     	;# 
   331  0F1A                     	;# 
   332  0F1B                     	;# 
   333  0F1C                     	;# 
   334  0F1D                     	;# 
   335  0F1E                     	;# 
   336  0F1F                     	;# 
   337  0F20                     	;# 
   338  0F21                     	;# 
   339  0F22                     	;# 
   340  0F23                     	;# 
   341  0FE4                     	;# 
   342  0FE5                     	;# 
   343  0FE6                     	;# 
   344  0FE7                     	;# 
   345  0FE8                     	;# 
   346  0FE9                     	;# 
   347  0FEA                     	;# 
   348  0FEB                     	;# 
   349  0FED                     	;# 
   350  0FEE                     	;# 
   351  0FEF                     	;# 
   352  0000                     	;# 
   353  0001                     	;# 
   354  0002                     	;# 
   355  0003                     	;# 
   356  0004                     	;# 
   357  0005                     	;# 
   358  0006                     	;# 
   359  0007                     	;# 
   360  0008                     	;# 
   361  0009                     	;# 
   362  000A                     	;# 
   363  000B                     	;# 
   364  000C                     	;# 
   365  0010                     	;# 
   366  0011                     	;# 
   367  0012                     	;# 
   368  0013                     	;# 
   369  0014                     	;# 
   370  0015                     	;# 
   371  0015                     	;# 
   372  0016                     	;# 
   373  0016                     	;# 
   374  0017                     	;# 
   375  0018                     	;# 
   376  0019                     	;# 
   377  0019                     	;# 
   378  001A                     	;# 
   379  001B                     	;# 
   380  001C                     	;# 
   381  001D                     	;# 
   382  001E                     	;# 
   383  001F                     	;# 
   384  008C                     	;# 
   385  0090                     	;# 
   386  0091                     	;# 
   387  0092                     	;# 
   388  0093                     	;# 
   389  0094                     	;# 
   390  0097                     	;# 
   391  009B                     	;# 
   392  009B                     	;# 
   393  009C                     	;# 
   394  009D                     	;# 
   395  009E                     	;# 
   396  009F                     	;# 
   397  010C                     	;# 
   398  0111                     	;# 
   399  0112                     	;# 
   400  0115                     	;# 
   401  0116                     	;# 
   402  0117                     	;# 
   403  0118                     	;# 
   404  0119                     	;# 
   405  018C                     	;# 
   406  0197                     	;# 
   407  0199                     	;# 
   408  0199                     	;# 
   409  0199                     	;# 
   410  019A                     	;# 
   411  019A                     	;# 
   412  019A                     	;# 
   413  019B                     	;# 
   414  019B                     	;# 
   415  019B                     	;# 
   416  019B                     	;# 
   417  019B                     	;# 
   418  019C                     	;# 
   419  019C                     	;# 
   420  019C                     	;# 
   421  019D                     	;# 
   422  019D                     	;# 
   423  019D                     	;# 
   424  019E                     	;# 
   425  019E                     	;# 
   426  019E                     	;# 
   427  019F                     	;# 
   428  019F                     	;# 
   429  019F                     	;# 
   430  019F                     	;# 
   431  019F                     	;# 
   432  020C                     	;# 
   433  0211                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0212                     	;# 
   437  0213                     	;# 
   438  0213                     	;# 
   439  0214                     	;# 
   440  0214                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  028C                     	;# 
   450  0291                     	;# 
   451  0291                     	;# 
   452  0292                     	;# 
   453  0293                     	;# 
   454  0294                     	;# 
   455  0295                     	;# 
   456  0295                     	;# 
   457  0296                     	;# 
   458  0297                     	;# 
   459  0298                     	;# 
   460  030C                     	;# 
   461  038C                     	;# 
   462  0391                     	;# 
   463  0392                     	;# 
   464  0393                     	;# 
   465  039A                     	;# 
   466  039C                     	;# 
   467  039D                     	;# 
   468  039E                     	;# 
   469  039F                     	;# 
   470  0498                     	;# 
   471  0498                     	;# 
   472  0499                     	;# 
   473  049A                     	;# 
   474  049B                     	;# 
   475  049B                     	;# 
   476  049C                     	;# 
   477  049D                     	;# 
   478  049E                     	;# 
   479  049F                     	;# 
   480  0617                     	;# 
   481  0618                     	;# 
   482  0619                     	;# 
   483  0619                     	;# 
   484  061A                     	;# 
   485  061B                     	;# 
   486  061C                     	;# 
   487  061C                     	;# 
   488  0691                     	;# 
   489  0692                     	;# 
   490  0693                     	;# 
   491  0694                     	;# 
   492  0695                     	;# 
   493  0696                     	;# 
   494  0697                     	;# 
   495  0698                     	;# 
   496  0699                     	;# 
   497  0891                     	;# 
   498  0891                     	;# 
   499  0891                     	;# 
   500  0891                     	;# 
   501  0891                     	;# 
   502  0891                     	;# 
   503  0892                     	;# 
   504  0892                     	;# 
   505  0892                     	;# 
   506  0893                     	;# 
   507  0893                     	;# 
   508  0893                     	;# 
   509  0893                     	;# 
   510  0893                     	;# 
   511  0893                     	;# 
   512  0894                     	;# 
   513  0894                     	;# 
   514  0894                     	;# 
   515  0895                     	;# 
   516  0895                     	;# 
   517  0895                     	;# 
   518  0896                     	;# 
   519  0896                     	;# 
   520  0896                     	;# 
   521  089B                     	;# 
   522  0911                     	;# 
   523  0912                     	;# 
   524  0913                     	;# 
   525  0914                     	;# 
   526  0915                     	;# 
   527  0916                     	;# 
   528  0918                     	;# 
   529  0919                     	;# 
   530  091A                     	;# 
   531  091B                     	;# 
   532  091C                     	;# 
   533  091D                     	;# 
   534  091E                     	;# 
   535  091F                     	;# 
   536  0E0F                     	;# 
   537  0E10                     	;# 
   538  0E11                     	;# 
   539  0E12                     	;# 
   540  0E13                     	;# 
   541  0E14                     	;# 
   542  0E15                     	;# 
   543  0E18                     	;# 
   544  0E1A                     	;# 
   545  0E1B                     	;# 
   546  0E1C                     	;# 
   547  0E20                     	;# 
   548  0E21                     	;# 
   549  0E22                     	;# 
   550  0E24                     	;# 
   551  0E25                     	;# 
   552  0E28                     	;# 
   553  0E29                     	;# 
   554  0E2A                     	;# 
   555  0E2B                     	;# 
   556  0E90                     	;# 
   557  0E91                     	;# 
   558  0E92                     	;# 
   559  0E94                     	;# 
   560  0E95                     	;# 
   561  0F0F                     	;# 
   562  0F10                     	;# 
   563  0F11                     	;# 
   564  0F12                     	;# 
   565  0F13                     	;# 
   566  0F14                     	;# 
   567  0F15                     	;# 
   568  0F16                     	;# 
   569  0F17                     	;# 
   570  0F18                     	;# 
   571  0F19                     	;# 
   572  0F1A                     	;# 
   573  0F1B                     	;# 
   574  0F1C                     	;# 
   575  0F1D                     	;# 
   576  0F1E                     	;# 
   577  0F1F                     	;# 
   578  0F20                     	;# 
   579  0F21                     	;# 
   580  0F22                     	;# 
   581  0F23                     	;# 
   582  0FE4                     	;# 
   583  0FE5                     	;# 
   584  0FE6                     	;# 
   585  0FE7                     	;# 
   586  0FE8                     	;# 
   587  0FE9                     	;# 
   588  0FEA                     	;# 
   589  0FEB                     	;# 
   590  0FED                     	;# 
   591  0FEE                     	;# 
   592  0FEF                     	;# 
   593  0000                     	;# 
   594  0001                     	;# 
   595  0002                     	;# 
   596  0003                     	;# 
   597  0004                     	;# 
   598  0005                     	;# 
   599  0006                     	;# 
   600  0007                     	;# 
   601  0008                     	;# 
   602  0009                     	;# 
   603  000A                     	;# 
   604  000B                     	;# 
   605  000C                     	;# 
   606  0010                     	;# 
   607  0011                     	;# 
   608  0012                     	;# 
   609  0013                     	;# 
   610  0014                     	;# 
   611  0015                     	;# 
   612  0015                     	;# 
   613  0016                     	;# 
   614  0016                     	;# 
   615  0017                     	;# 
   616  0018                     	;# 
   617  0019                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  001D                     	;# 
   623  001E                     	;# 
   624  001F                     	;# 
   625  008C                     	;# 
   626  0090                     	;# 
   627  0091                     	;# 
   628  0092                     	;# 
   629  0093                     	;# 
   630  0094                     	;# 
   631  0097                     	;# 
   632  009B                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  010C                     	;# 
   639  0111                     	;# 
   640  0112                     	;# 
   641  0115                     	;# 
   642  0116                     	;# 
   643  0117                     	;# 
   644  0118                     	;# 
   645  0119                     	;# 
   646  018C                     	;# 
   647  0197                     	;# 
   648  0199                     	;# 
   649  0199                     	;# 
   650  0199                     	;# 
   651  019A                     	;# 
   652  019A                     	;# 
   653  019A                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019B                     	;# 
   658  019B                     	;# 
   659  019C                     	;# 
   660  019C                     	;# 
   661  019C                     	;# 
   662  019D                     	;# 
   663  019D                     	;# 
   664  019D                     	;# 
   665  019E                     	;# 
   666  019E                     	;# 
   667  019E                     	;# 
   668  019F                     	;# 
   669  019F                     	;# 
   670  019F                     	;# 
   671  019F                     	;# 
   672  019F                     	;# 
   673  020C                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0216                     	;# 
   687  0216                     	;# 
   688  0217                     	;# 
   689  0217                     	;# 
   690  028C                     	;# 
   691  0291                     	;# 
   692  0291                     	;# 
   693  0292                     	;# 
   694  0293                     	;# 
   695  0294                     	;# 
   696  0295                     	;# 
   697  0295                     	;# 
   698  0296                     	;# 
   699  0297                     	;# 
   700  0298                     	;# 
   701  030C                     	;# 
   702  038C                     	;# 
   703  0391                     	;# 
   704  0392                     	;# 
   705  0393                     	;# 
   706  039A                     	;# 
   707  039C                     	;# 
   708  039D                     	;# 
   709  039E                     	;# 
   710  039F                     	;# 
   711  0498                     	;# 
   712  0498                     	;# 
   713  0499                     	;# 
   714  049A                     	;# 
   715  049B                     	;# 
   716  049B                     	;# 
   717  049C                     	;# 
   718  049D                     	;# 
   719  049E                     	;# 
   720  049F                     	;# 
   721  0617                     	;# 
   722  0618                     	;# 
   723  0619                     	;# 
   724  0619                     	;# 
   725  061A                     	;# 
   726  061B                     	;# 
   727  061C                     	;# 
   728  061C                     	;# 
   729  0691                     	;# 
   730  0692                     	;# 
   731  0693                     	;# 
   732  0694                     	;# 
   733  0695                     	;# 
   734  0696                     	;# 
   735  0697                     	;# 
   736  0698                     	;# 
   737  0699                     	;# 
   738  0891                     	;# 
   739  0891                     	;# 
   740  0891                     	;# 
   741  0891                     	;# 
   742  0891                     	;# 
   743  0891                     	;# 
   744  0892                     	;# 
   745  0892                     	;# 
   746  0892                     	;# 
   747  0893                     	;# 
   748  0893                     	;# 
   749  0893                     	;# 
   750  0893                     	;# 
   751  0893                     	;# 
   752  0893                     	;# 
   753  0894                     	;# 
   754  0894                     	;# 
   755  0894                     	;# 
   756  0895                     	;# 
   757  0895                     	;# 
   758  0895                     	;# 
   759  0896                     	;# 
   760  0896                     	;# 
   761  0896                     	;# 
   762  089B                     	;# 
   763  0911                     	;# 
   764  0912                     	;# 
   765  0913                     	;# 
   766  0914                     	;# 
   767  0915                     	;# 
   768  0916                     	;# 
   769  0918                     	;# 
   770  0919                     	;# 
   771  091A                     	;# 
   772  091B                     	;# 
   773  091C                     	;# 
   774  091D                     	;# 
   775  091E                     	;# 
   776  091F                     	;# 
   777  0E0F                     	;# 
   778  0E10                     	;# 
   779  0E11                     	;# 
   780  0E12                     	;# 
   781  0E13                     	;# 
   782  0E14                     	;# 
   783  0E15                     	;# 
   784  0E18                     	;# 
   785  0E1A                     	;# 
   786  0E1B                     	;# 
   787  0E1C                     	;# 
   788  0E20                     	;# 
   789  0E21                     	;# 
   790  0E22                     	;# 
   791  0E24                     	;# 
   792  0E25                     	;# 
   793  0E28                     	;# 
   794  0E29                     	;# 
   795  0E2A                     	;# 
   796  0E2B                     	;# 
   797  0E90                     	;# 
   798  0E91                     	;# 
   799  0E92                     	;# 
   800  0E94                     	;# 
   801  0E95                     	;# 
   802  0F0F                     	;# 
   803  0F10                     	;# 
   804  0F11                     	;# 
   805  0F12                     	;# 
   806  0F13                     	;# 
   807  0F14                     	;# 
   808  0F15                     	;# 
   809  0F16                     	;# 
   810  0F17                     	;# 
   811  0F18                     	;# 
   812  0F19                     	;# 
   813  0F1A                     	;# 
   814  0F1B                     	;# 
   815  0F1C                     	;# 
   816  0F1D                     	;# 
   817  0F1E                     	;# 
   818  0F1F                     	;# 
   819  0F20                     	;# 
   820  0F21                     	;# 
   821  0F22                     	;# 
   822  0F23                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0013                     	;# 
   851  0014                     	;# 
   852  0015                     	;# 
   853  0015                     	;# 
   854  0016                     	;# 
   855  0016                     	;# 
   856  0017                     	;# 
   857  0018                     	;# 
   858  0019                     	;# 
   859  0019                     	;# 
   860  001A                     	;# 
   861  001B                     	;# 
   862  001C                     	;# 
   863  001D                     	;# 
   864  001E                     	;# 
   865  001F                     	;# 
   866  008C                     	;# 
   867  0090                     	;# 
   868  0091                     	;# 
   869  0092                     	;# 
   870  0093                     	;# 
   871  0094                     	;# 
   872  0097                     	;# 
   873  009B                     	;# 
   874  009B                     	;# 
   875  009C                     	;# 
   876  009D                     	;# 
   877  009E                     	;# 
   878  009F                     	;# 
   879  010C                     	;# 
   880  0111                     	;# 
   881  0112                     	;# 
   882  0115                     	;# 
   883  0116                     	;# 
   884  0117                     	;# 
   885  0118                     	;# 
   886  0119                     	;# 
   887  018C                     	;# 
   888  0197                     	;# 
   889  0199                     	;# 
   890  0199                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019A                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019D                     	;# 
   905  019D                     	;# 
   906  019E                     	;# 
   907  019E                     	;# 
   908  019E                     	;# 
   909  019F                     	;# 
   910  019F                     	;# 
   911  019F                     	;# 
   912  019F                     	;# 
   913  019F                     	;# 
   914  020C                     	;# 
   915  0211                     	;# 
   916  0211                     	;# 
   917  0212                     	;# 
   918  0212                     	;# 
   919  0213                     	;# 
   920  0213                     	;# 
   921  0214                     	;# 
   922  0214                     	;# 
   923  0215                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0216                     	;# 
   928  0216                     	;# 
   929  0217                     	;# 
   930  0217                     	;# 
   931  028C                     	;# 
   932  0291                     	;# 
   933  0291                     	;# 
   934  0292                     	;# 
   935  0293                     	;# 
   936  0294                     	;# 
   937  0295                     	;# 
   938  0295                     	;# 
   939  0296                     	;# 
   940  0297                     	;# 
   941  0298                     	;# 
   942  030C                     	;# 
   943  038C                     	;# 
   944  0391                     	;# 
   945  0392                     	;# 
   946  0393                     	;# 
   947  039A                     	;# 
   948  039C                     	;# 
   949  039D                     	;# 
   950  039E                     	;# 
   951  039F                     	;# 
   952  0498                     	;# 
   953  0498                     	;# 
   954  0499                     	;# 
   955  049A                     	;# 
   956  049B                     	;# 
   957  049B                     	;# 
   958  049C                     	;# 
   959  049D                     	;# 
   960  049E                     	;# 
   961  049F                     	;# 
   962  0617                     	;# 
   963  0618                     	;# 
   964  0619                     	;# 
   965  0619                     	;# 
   966  061A                     	;# 
   967  061B                     	;# 
   968  061C                     	;# 
   969  061C                     	;# 
   970  0691                     	;# 
   971  0692                     	;# 
   972  0693                     	;# 
   973  0694                     	;# 
   974  0695                     	;# 
   975  0696                     	;# 
   976  0697                     	;# 
   977  0698                     	;# 
   978  0699                     	;# 
   979  0891                     	;# 
   980  0891                     	;# 
   981  0891                     	;# 
   982  0891                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0892                     	;# 
   986  0892                     	;# 
   987  0892                     	;# 
   988  0893                     	;# 
   989  0893                     	;# 
   990  0893                     	;# 
   991  0893                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0894                     	;# 
   995  0894                     	;# 
   996  0894                     	;# 
   997  0895                     	;# 
   998  0895                     	;# 
   999  0895                     	;# 
  1000  0896                     	;# 
  1001  0896                     	;# 
  1002  0896                     	;# 
  1003  089B                     	;# 
  1004  0911                     	;# 
  1005  0912                     	;# 
  1006  0913                     	;# 
  1007  0914                     	;# 
  1008  0915                     	;# 
  1009  0916                     	;# 
  1010  0918                     	;# 
  1011  0919                     	;# 
  1012  091A                     	;# 
  1013  091B                     	;# 
  1014  091C                     	;# 
  1015  091D                     	;# 
  1016  091E                     	;# 
  1017  091F                     	;# 
  1018  0E0F                     	;# 
  1019  0E10                     	;# 
  1020  0E11                     	;# 
  1021  0E12                     	;# 
  1022  0E13                     	;# 
  1023  0E14                     	;# 
  1024  0E15                     	;# 
  1025  0E18                     	;# 
  1026  0E1A                     	;# 
  1027  0E1B                     	;# 
  1028  0E1C                     	;# 
  1029  0E20                     	;# 
  1030  0E21                     	;# 
  1031  0E22                     	;# 
  1032  0E24                     	;# 
  1033  0E25                     	;# 
  1034  0E28                     	;# 
  1035  0E29                     	;# 
  1036  0E2A                     	;# 
  1037  0E2B                     	;# 
  1038  0E90                     	;# 
  1039  0E91                     	;# 
  1040  0E92                     	;# 
  1041  0E94                     	;# 
  1042  0E95                     	;# 
  1043  0F0F                     	;# 
  1044  0F10                     	;# 
  1045  0F11                     	;# 
  1046  0F12                     	;# 
  1047  0F13                     	;# 
  1048  0F14                     	;# 
  1049  0F15                     	;# 
  1050  0F16                     	;# 
  1051  0F17                     	;# 
  1052  0F18                     	;# 
  1053  0F19                     	;# 
  1054  0F1A                     	;# 
  1055  0F1B                     	;# 
  1056  0F1C                     	;# 
  1057  0F1D                     	;# 
  1058  0F1E                     	;# 
  1059  0F1F                     	;# 
  1060  0F20                     	;# 
  1061  0F21                     	;# 
  1062  0F22                     	;# 
  1063  0F23                     	;# 
  1064  0FE4                     	;# 
  1065  0FE5                     	;# 
  1066  0FE6                     	;# 
  1067  0FE7                     	;# 
  1068  0FE8                     	;# 
  1069  0FE9                     	;# 
  1070  0FEA                     	;# 
  1071  0FEB                     	;# 
  1072  0FED                     	;# 
  1073  0FEE                     	;# 
  1074  0FEF                     	;# 
  1075  0000                     	;# 
  1076  0001                     	;# 
  1077  0002                     	;# 
  1078  0003                     	;# 
  1079  0004                     	;# 
  1080  0005                     	;# 
  1081  0006                     	;# 
  1082  0007                     	;# 
  1083  0008                     	;# 
  1084  0009                     	;# 
  1085  000A                     	;# 
  1086  000B                     	;# 
  1087  000C                     	;# 
  1088  0010                     	;# 
  1089  0011                     	;# 
  1090  0012                     	;# 
  1091  0013                     	;# 
  1092  0014                     	;# 
  1093  0015                     	;# 
  1094  0015                     	;# 
  1095  0016                     	;# 
  1096  0016                     	;# 
  1097  0017                     	;# 
  1098  0018                     	;# 
  1099  0019                     	;# 
  1100  0019                     	;# 
  1101  001A                     	;# 
  1102  001B                     	;# 
  1103  001C                     	;# 
  1104  001D                     	;# 
  1105  001E                     	;# 
  1106  001F                     	;# 
  1107  008C                     	;# 
  1108  0090                     	;# 
  1109  0091                     	;# 
  1110  0092                     	;# 
  1111  0093                     	;# 
  1112  0094                     	;# 
  1113  0097                     	;# 
  1114  009B                     	;# 
  1115  009B                     	;# 
  1116  009C                     	;# 
  1117  009D                     	;# 
  1118  009E                     	;# 
  1119  009F                     	;# 
  1120  010C                     	;# 
  1121  0111                     	;# 
  1122  0112                     	;# 
  1123  0115                     	;# 
  1124  0116                     	;# 
  1125  0117                     	;# 
  1126  0118                     	;# 
  1127  0119                     	;# 
  1128  018C                     	;# 
  1129  0197                     	;# 
  1130  0199                     	;# 
  1131  0199                     	;# 
  1132  0199                     	;# 
  1133  019A                     	;# 
  1134  019A                     	;# 
  1135  019A                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019C                     	;# 
  1142  019C                     	;# 
  1143  019C                     	;# 
  1144  019D                     	;# 
  1145  019D                     	;# 
  1146  019D                     	;# 
  1147  019E                     	;# 
  1148  019E                     	;# 
  1149  019E                     	;# 
  1150  019F                     	;# 
  1151  019F                     	;# 
  1152  019F                     	;# 
  1153  019F                     	;# 
  1154  019F                     	;# 
  1155  020C                     	;# 
  1156  0211                     	;# 
  1157  0211                     	;# 
  1158  0212                     	;# 
  1159  0212                     	;# 
  1160  0213                     	;# 
  1161  0213                     	;# 
  1162  0214                     	;# 
  1163  0214                     	;# 
  1164  0215                     	;# 
  1165  0215                     	;# 
  1166  0215                     	;# 
  1167  0215                     	;# 
  1168  0216                     	;# 
  1169  0216                     	;# 
  1170  0217                     	;# 
  1171  0217                     	;# 
  1172  028C                     	;# 
  1173  0291                     	;# 
  1174  0291                     	;# 
  1175  0292                     	;# 
  1176  0293                     	;# 
  1177  0294                     	;# 
  1178  0295                     	;# 
  1179  0295                     	;# 
  1180  0296                     	;# 
  1181  0297                     	;# 
  1182  0298                     	;# 
  1183  030C                     	;# 
  1184  038C                     	;# 
  1185  0391                     	;# 
  1186  0392                     	;# 
  1187  0393                     	;# 
  1188  039A                     	;# 
  1189  039C                     	;# 
  1190  039D                     	;# 
  1191  039E                     	;# 
  1192  039F                     	;# 
  1193  0498                     	;# 
  1194  0498                     	;# 
  1195  0499                     	;# 
  1196  049A                     	;# 
  1197  049B                     	;# 
  1198  049B                     	;# 
  1199  049C                     	;# 
  1200  049D                     	;# 
  1201  049E                     	;# 
  1202  049F                     	;# 
  1203  0617                     	;# 
  1204  0618                     	;# 
  1205  0619                     	;# 
  1206  0619                     	;# 
  1207  061A                     	;# 
  1208  061B                     	;# 
  1209  061C                     	;# 
  1210  061C                     	;# 
  1211  0691                     	;# 
  1212  0692                     	;# 
  1213  0693                     	;# 
  1214  0694                     	;# 
  1215  0695                     	;# 
  1216  0696                     	;# 
  1217  0697                     	;# 
  1218  0698                     	;# 
  1219  0699                     	;# 
  1220  0891                     	;# 
  1221  0891                     	;# 
  1222  0891                     	;# 
  1223  0891                     	;# 
  1224  0891                     	;# 
  1225  0891                     	;# 
  1226  0892                     	;# 
  1227  0892                     	;# 
  1228  0892                     	;# 
  1229  0893                     	;# 
  1230  0893                     	;# 
  1231  0893                     	;# 
  1232  0893                     	;# 
  1233  0893                     	;# 
  1234  0893                     	;# 
  1235  0894                     	;# 
  1236  0894                     	;# 
  1237  0894                     	;# 
  1238  0895                     	;# 
  1239  0895                     	;# 
  1240  0895                     	;# 
  1241  0896                     	;# 
  1242  0896                     	;# 
  1243  0896                     	;# 
  1244  089B                     	;# 
  1245  0911                     	;# 
  1246  0912                     	;# 
  1247  0913                     	;# 
  1248  0914                     	;# 
  1249  0915                     	;# 
  1250  0916                     	;# 
  1251  0918                     	;# 
  1252  0919                     	;# 
  1253  091A                     	;# 
  1254  091B                     	;# 
  1255  091C                     	;# 
  1256  091D                     	;# 
  1257  091E                     	;# 
  1258  091F                     	;# 
  1259  0E0F                     	;# 
  1260  0E10                     	;# 
  1261  0E11                     	;# 
  1262  0E12                     	;# 
  1263  0E13                     	;# 
  1264  0E14                     	;# 
  1265  0E15                     	;# 
  1266  0E18                     	;# 
  1267  0E1A                     	;# 
  1268  0E1B                     	;# 
  1269  0E1C                     	;# 
  1270  0E20                     	;# 
  1271  0E21                     	;# 
  1272  0E22                     	;# 
  1273  0E24                     	;# 
  1274  0E25                     	;# 
  1275  0E28                     	;# 
  1276  0E29                     	;# 
  1277  0E2A                     	;# 
  1278  0E2B                     	;# 
  1279  0E90                     	;# 
  1280  0E91                     	;# 
  1281  0E92                     	;# 
  1282  0E94                     	;# 
  1283  0E95                     	;# 
  1284  0F0F                     	;# 
  1285  0F10                     	;# 
  1286  0F11                     	;# 
  1287  0F12                     	;# 
  1288  0F13                     	;# 
  1289  0F14                     	;# 
  1290  0F15                     	;# 
  1291  0F16                     	;# 
  1292  0F17                     	;# 
  1293  0F18                     	;# 
  1294  0F19                     	;# 
  1295  0F1A                     	;# 
  1296  0F1B                     	;# 
  1297  0F1C                     	;# 
  1298  0F1D                     	;# 
  1299  0F1E                     	;# 
  1300  0F1F                     	;# 
  1301  0F20                     	;# 
  1302  0F21                     	;# 
  1303  0F22                     	;# 
  1304  0F23                     	;# 
  1305  0FE4                     	;# 
  1306  0FE5                     	;# 
  1307  0FE6                     	;# 
  1308  0FE7                     	;# 
  1309  0FE8                     	;# 
  1310  0FE9                     	;# 
  1311  0FEA                     	;# 
  1312  0FEB                     	;# 
  1313  0FED                     	;# 
  1314  0FEE                     	;# 
  1315  0FEF                     	;# 
  1316  0000                     	;# 
  1317  0001                     	;# 
  1318  0002                     	;# 
  1319  0003                     	;# 
  1320  0004                     	;# 
  1321  0005                     	;# 
  1322  0006                     	;# 
  1323  0007                     	;# 
  1324  0008                     	;# 
  1325  0009                     	;# 
  1326  000A                     	;# 
  1327  000B                     	;# 
  1328  000C                     	;# 
  1329  0010                     	;# 
  1330  0011                     	;# 
  1331  0012                     	;# 
  1332  0013                     	;# 
  1333  0014                     	;# 
  1334  0015                     	;# 
  1335  0015                     	;# 
  1336  0016                     	;# 
  1337  0016                     	;# 
  1338  0017                     	;# 
  1339  0018                     	;# 
  1340  0019                     	;# 
  1341  0019                     	;# 
  1342  001A                     	;# 
  1343  001B                     	;# 
  1344  001C                     	;# 
  1345  001D                     	;# 
  1346  001E                     	;# 
  1347  001F                     	;# 
  1348  008C                     	;# 
  1349  0090                     	;# 
  1350  0091                     	;# 
  1351  0092                     	;# 
  1352  0093                     	;# 
  1353  0094                     	;# 
  1354  0097                     	;# 
  1355  009B                     	;# 
  1356  009B                     	;# 
  1357  009C                     	;# 
  1358  009D                     	;# 
  1359  009E                     	;# 
  1360  009F                     	;# 
  1361  010C                     	;# 
  1362  0111                     	;# 
  1363  0112                     	;# 
  1364  0115                     	;# 
  1365  0116                     	;# 
  1366  0117                     	;# 
  1367  0118                     	;# 
  1368  0119                     	;# 
  1369  018C                     	;# 
  1370  0197                     	;# 
  1371  0199                     	;# 
  1372  0199                     	;# 
  1373  0199                     	;# 
  1374  019A                     	;# 
  1375  019A                     	;# 
  1376  019A                     	;# 
  1377  019B                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019B                     	;# 
  1382  019C                     	;# 
  1383  019C                     	;# 
  1384  019C                     	;# 
  1385  019D                     	;# 
  1386  019D                     	;# 
  1387  019D                     	;# 
  1388  019E                     	;# 
  1389  019E                     	;# 
  1390  019E                     	;# 
  1391  019F                     	;# 
  1392  019F                     	;# 
  1393  019F                     	;# 
  1394  019F                     	;# 
  1395  019F                     	;# 
  1396  020C                     	;# 
  1397  0211                     	;# 
  1398  0211                     	;# 
  1399  0212                     	;# 
  1400  0212                     	;# 
  1401  0213                     	;# 
  1402  0213                     	;# 
  1403  0214                     	;# 
  1404  0214                     	;# 
  1405  0215                     	;# 
  1406  0215                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0216                     	;# 
  1410  0216                     	;# 
  1411  0217                     	;# 
  1412  0217                     	;# 
  1413  028C                     	;# 
  1414  0291                     	;# 
  1415  0291                     	;# 
  1416  0292                     	;# 
  1417  0293                     	;# 
  1418  0294                     	;# 
  1419  0295                     	;# 
  1420  0295                     	;# 
  1421  0296                     	;# 
  1422  0297                     	;# 
  1423  0298                     	;# 
  1424  030C                     	;# 
  1425  038C                     	;# 
  1426  0391                     	;# 
  1427  0392                     	;# 
  1428  0393                     	;# 
  1429  039A                     	;# 
  1430  039C                     	;# 
  1431  039D                     	;# 
  1432  039E                     	;# 
  1433  039F                     	;# 
  1434  0498                     	;# 
  1435  0498                     	;# 
  1436  0499                     	;# 
  1437  049A                     	;# 
  1438  049B                     	;# 
  1439  049B                     	;# 
  1440  049C                     	;# 
  1441  049D                     	;# 
  1442  049E                     	;# 
  1443  049F                     	;# 
  1444  0617                     	;# 
  1445  0618                     	;# 
  1446  0619                     	;# 
  1447  0619                     	;# 
  1448  061A                     	;# 
  1449  061B                     	;# 
  1450  061C                     	;# 
  1451  061C                     	;# 
  1452  0691                     	;# 
  1453  0692                     	;# 
  1454  0693                     	;# 
  1455  0694                     	;# 
  1456  0695                     	;# 
  1457  0696                     	;# 
  1458  0697                     	;# 
  1459  0698                     	;# 
  1460  0699                     	;# 
  1461  0891                     	;# 
  1462  0891                     	;# 
  1463  0891                     	;# 
  1464  0891                     	;# 
  1465  0891                     	;# 
  1466  0891                     	;# 
  1467  0892                     	;# 
  1468  0892                     	;# 
  1469  0892                     	;# 
  1470  0893                     	;# 
  1471  0893                     	;# 
  1472  0893                     	;# 
  1473  0893                     	;# 
  1474  0893                     	;# 
  1475  0893                     	;# 
  1476  0894                     	;# 
  1477  0894                     	;# 
  1478  0894                     	;# 
  1479  0895                     	;# 
  1480  0895                     	;# 
  1481  0895                     	;# 
  1482  0896                     	;# 
  1483  0896                     	;# 
  1484  0896                     	;# 
  1485  089B                     	;# 
  1486  0911                     	;# 
  1487  0912                     	;# 
  1488  0913                     	;# 
  1489  0914                     	;# 
  1490  0915                     	;# 
  1491  0916                     	;# 
  1492  0918                     	;# 
  1493  0919                     	;# 
  1494  091A                     	;# 
  1495  091B                     	;# 
  1496  091C                     	;# 
  1497  091D                     	;# 
  1498  091E                     	;# 
  1499  091F                     	;# 
  1500  0E0F                     	;# 
  1501  0E10                     	;# 
  1502  0E11                     	;# 
  1503  0E12                     	;# 
  1504  0E13                     	;# 
  1505  0E14                     	;# 
  1506  0E15                     	;# 
  1507  0E18                     	;# 
  1508  0E1A                     	;# 
  1509  0E1B                     	;# 
  1510  0E1C                     	;# 
  1511  0E20                     	;# 
  1512  0E21                     	;# 
  1513  0E22                     	;# 
  1514  0E24                     	;# 
  1515  0E25                     	;# 
  1516  0E28                     	;# 
  1517  0E29                     	;# 
  1518  0E2A                     	;# 
  1519  0E2B                     	;# 
  1520  0E90                     	;# 
  1521  0E91                     	;# 
  1522  0E92                     	;# 
  1523  0E94                     	;# 
  1524  0E95                     	;# 
  1525  0F0F                     	;# 
  1526  0F10                     	;# 
  1527  0F11                     	;# 
  1528  0F12                     	;# 
  1529  0F13                     	;# 
  1530  0F14                     	;# 
  1531  0F15                     	;# 
  1532  0F16                     	;# 
  1533  0F17                     	;# 
  1534  0F18                     	;# 
  1535  0F19                     	;# 
  1536  0F1A                     	;# 
  1537  0F1B                     	;# 
  1538  0F1C                     	;# 
  1539  0F1D                     	;# 
  1540  0F1E                     	;# 
  1541  0F1F                     	;# 
  1542  0F20                     	;# 
  1543  0F21                     	;# 
  1544  0F22                     	;# 
  1545  0F23                     	;# 
  1546  0FE4                     	;# 
  1547  0FE5                     	;# 
  1548  0FE6                     	;# 
  1549  0FE7                     	;# 
  1550  0FE8                     	;# 
  1551  0FE9                     	;# 
  1552  0FEA                     	;# 
  1553  0FEB                     	;# 
  1554  0FED                     	;# 
  1555  0FEE                     	;# 
  1556  0FEF                     	;# 
  1557  0000                     	;# 
  1558  0001                     	;# 
  1559  0002                     	;# 
  1560  0003                     	;# 
  1561  0004                     	;# 
  1562  0005                     	;# 
  1563  0006                     	;# 
  1564  0007                     	;# 
  1565  0008                     	;# 
  1566  0009                     	;# 
  1567  000A                     	;# 
  1568  000B                     	;# 
  1569  000C                     	;# 
  1570  0010                     	;# 
  1571  0011                     	;# 
  1572  0012                     	;# 
  1573  0013                     	;# 
  1574  0014                     	;# 
  1575  0015                     	;# 
  1576  0015                     	;# 
  1577  0016                     	;# 
  1578  0016                     	;# 
  1579  0017                     	;# 
  1580  0018                     	;# 
  1581  0019                     	;# 
  1582  0019                     	;# 
  1583  001A                     	;# 
  1584  001B                     	;# 
  1585  001C                     	;# 
  1586  001D                     	;# 
  1587  001E                     	;# 
  1588  001F                     	;# 
  1589  008C                     	;# 
  1590  0090                     	;# 
  1591  0091                     	;# 
  1592  0092                     	;# 
  1593  0093                     	;# 
  1594  0094                     	;# 
  1595  0097                     	;# 
  1596  009B                     	;# 
  1597  009B                     	;# 
  1598  009C                     	;# 
  1599  009D                     	;# 
  1600  009E                     	;# 
  1601  009F                     	;# 
  1602  010C                     	;# 
  1603  0111                     	;# 
  1604  0112                     	;# 
  1605  0115                     	;# 
  1606  0116                     	;# 
  1607  0117                     	;# 
  1608  0118                     	;# 
  1609  0119                     	;# 
  1610  018C                     	;# 
  1611  0197                     	;# 
  1612  0199                     	;# 
  1613  0199                     	;# 
  1614  0199                     	;# 
  1615  019A                     	;# 
  1616  019A                     	;# 
  1617  019A                     	;# 
  1618  019B                     	;# 
  1619  019B                     	;# 
  1620  019B                     	;# 
  1621  019B                     	;# 
  1622  019B                     	;# 
  1623  019C                     	;# 
  1624  019C                     	;# 
  1625  019C                     	;# 
  1626  019D                     	;# 
  1627  019D                     	;# 
  1628  019D                     	;# 
  1629  019E                     	;# 
  1630  019E                     	;# 
  1631  019E                     	;# 
  1632  019F                     	;# 
  1633  019F                     	;# 
  1634  019F                     	;# 
  1635  019F                     	;# 
  1636  019F                     	;# 
  1637  020C                     	;# 
  1638  0211                     	;# 
  1639  0211                     	;# 
  1640  0212                     	;# 
  1641  0212                     	;# 
  1642  0213                     	;# 
  1643  0213                     	;# 
  1644  0214                     	;# 
  1645  0214                     	;# 
  1646  0215                     	;# 
  1647  0215                     	;# 
  1648  0215                     	;# 
  1649  0215                     	;# 
  1650  0216                     	;# 
  1651  0216                     	;# 
  1652  0217                     	;# 
  1653  0217                     	;# 
  1654  028C                     	;# 
  1655  0291                     	;# 
  1656  0291                     	;# 
  1657  0292                     	;# 
  1658  0293                     	;# 
  1659  0294                     	;# 
  1660  0295                     	;# 
  1661  0295                     	;# 
  1662  0296                     	;# 
  1663  0297                     	;# 
  1664  0298                     	;# 
  1665  030C                     	;# 
  1666  038C                     	;# 
  1667  0391                     	;# 
  1668  0392                     	;# 
  1669  0393                     	;# 
  1670  039A                     	;# 
  1671  039C                     	;# 
  1672  039D                     	;# 
  1673  039E                     	;# 
  1674  039F                     	;# 
  1675  0498                     	;# 
  1676  0498                     	;# 
  1677  0499                     	;# 
  1678  049A                     	;# 
  1679  049B                     	;# 
  1680  049B                     	;# 
  1681  049C                     	;# 
  1682  049D                     	;# 
  1683  049E                     	;# 
  1684  049F                     	;# 
  1685  0617                     	;# 
  1686  0618                     	;# 
  1687  0619                     	;# 
  1688  0619                     	;# 
  1689  061A                     	;# 
  1690  061B                     	;# 
  1691  061C                     	;# 
  1692  061C                     	;# 
  1693  0691                     	;# 
  1694  0692                     	;# 
  1695  0693                     	;# 
  1696  0694                     	;# 
  1697  0695                     	;# 
  1698  0696                     	;# 
  1699  0697                     	;# 
  1700  0698                     	;# 
  1701  0699                     	;# 
  1702  0891                     	;# 
  1703  0891                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0891                     	;# 
  1708  0892                     	;# 
  1709  0892                     	;# 
  1710  0892                     	;# 
  1711  0893                     	;# 
  1712  0893                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0893                     	;# 
  1717  0894                     	;# 
  1718  0894                     	;# 
  1719  0894                     	;# 
  1720  0895                     	;# 
  1721  0895                     	;# 
  1722  0895                     	;# 
  1723  0896                     	;# 
  1724  0896                     	;# 
  1725  0896                     	;# 
  1726  089B                     	;# 
  1727  0911                     	;# 
  1728  0912                     	;# 
  1729  0913                     	;# 
  1730  0914                     	;# 
  1731  0915                     	;# 
  1732  0916                     	;# 
  1733  0918                     	;# 
  1734  0919                     	;# 
  1735  091A                     	;# 
  1736  091B                     	;# 
  1737  091C                     	;# 
  1738  091D                     	;# 
  1739  091E                     	;# 
  1740  091F                     	;# 
  1741  0E0F                     	;# 
  1742  0E10                     	;# 
  1743  0E11                     	;# 
  1744  0E12                     	;# 
  1745  0E13                     	;# 
  1746  0E14                     	;# 
  1747  0E15                     	;# 
  1748  0E18                     	;# 
  1749  0E1A                     	;# 
  1750  0E1B                     	;# 
  1751  0E1C                     	;# 
  1752  0E20                     	;# 
  1753  0E21                     	;# 
  1754  0E22                     	;# 
  1755  0E24                     	;# 
  1756  0E25                     	;# 
  1757  0E28                     	;# 
  1758  0E29                     	;# 
  1759  0E2A                     	;# 
  1760  0E2B                     	;# 
  1761  0E90                     	;# 
  1762  0E91                     	;# 
  1763  0E92                     	;# 
  1764  0E94                     	;# 
  1765  0E95                     	;# 
  1766  0F0F                     	;# 
  1767  0F10                     	;# 
  1768  0F11                     	;# 
  1769  0F12                     	;# 
  1770  0F13                     	;# 
  1771  0F14                     	;# 
  1772  0F15                     	;# 
  1773  0F16                     	;# 
  1774  0F17                     	;# 
  1775  0F18                     	;# 
  1776  0F19                     	;# 
  1777  0F1A                     	;# 
  1778  0F1B                     	;# 
  1779  0F1C                     	;# 
  1780  0F1D                     	;# 
  1781  0F1E                     	;# 
  1782  0F1F                     	;# 
  1783  0F20                     	;# 
  1784  0F21                     	;# 
  1785  0F22                     	;# 
  1786  0F23                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE9                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEF                     	;# 
  1798  0000                     	;# 
  1799  0001                     	;# 
  1800  0002                     	;# 
  1801  0003                     	;# 
  1802  0004                     	;# 
  1803  0005                     	;# 
  1804  0006                     	;# 
  1805  0007                     	;# 
  1806  0008                     	;# 
  1807  0009                     	;# 
  1808  000A                     	;# 
  1809  000B                     	;# 
  1810  000C                     	;# 
  1811  0010                     	;# 
  1812  0011                     	;# 
  1813  0012                     	;# 
  1814  0013                     	;# 
  1815  0014                     	;# 
  1816  0015                     	;# 
  1817  0015                     	;# 
  1818  0016                     	;# 
  1819  0016                     	;# 
  1820  0017                     	;# 
  1821  0018                     	;# 
  1822  0019                     	;# 
  1823  0019                     	;# 
  1824  001A                     	;# 
  1825  001B                     	;# 
  1826  001C                     	;# 
  1827  001D                     	;# 
  1828  001E                     	;# 
  1829  001F                     	;# 
  1830  008C                     	;# 
  1831  0090                     	;# 
  1832  0091                     	;# 
  1833  0092                     	;# 
  1834  0093                     	;# 
  1835  0094                     	;# 
  1836  0097                     	;# 
  1837  009B                     	;# 
  1838  009B                     	;# 
  1839  009C                     	;# 
  1840  009D                     	;# 
  1841  009E                     	;# 
  1842  009F                     	;# 
  1843  010C                     	;# 
  1844  0111                     	;# 
  1845  0112                     	;# 
  1846  0115                     	;# 
  1847  0116                     	;# 
  1848  0117                     	;# 
  1849  0118                     	;# 
  1850  0119                     	;# 
  1851  018C                     	;# 
  1852  0197                     	;# 
  1853  0199                     	;# 
  1854  0199                     	;# 
  1855  0199                     	;# 
  1856  019A                     	;# 
  1857  019A                     	;# 
  1858  019A                     	;# 
  1859  019B                     	;# 
  1860  019B                     	;# 
  1861  019B                     	;# 
  1862  019B                     	;# 
  1863  019B                     	;# 
  1864  019C                     	;# 
  1865  019C                     	;# 
  1866  019C                     	;# 
  1867  019D                     	;# 
  1868  019D                     	;# 
  1869  019D                     	;# 
  1870  019E                     	;# 
  1871  019E                     	;# 
  1872  019E                     	;# 
  1873  019F                     	;# 
  1874  019F                     	;# 
  1875  019F                     	;# 
  1876  019F                     	;# 
  1877  019F                     	;# 
  1878  020C                     	;# 
  1879  0211                     	;# 
  1880  0211                     	;# 
  1881  0212                     	;# 
  1882  0212                     	;# 
  1883  0213                     	;# 
  1884  0213                     	;# 
  1885  0214                     	;# 
  1886  0214                     	;# 
  1887  0215                     	;# 
  1888  0215                     	;# 
  1889  0215                     	;# 
  1890  0215                     	;# 
  1891  0216                     	;# 
  1892  0216                     	;# 
  1893  0217                     	;# 
  1894  0217                     	;# 
  1895  028C                     	;# 
  1896  0291                     	;# 
  1897  0291                     	;# 
  1898  0292                     	;# 
  1899  0293                     	;# 
  1900  0294                     	;# 
  1901  0295                     	;# 
  1902  0295                     	;# 
  1903  0296                     	;# 
  1904  0297                     	;# 
  1905  0298                     	;# 
  1906  030C                     	;# 
  1907  038C                     	;# 
  1908  0391                     	;# 
  1909  0392                     	;# 
  1910  0393                     	;# 
  1911  039A                     	;# 
  1912  039C                     	;# 
  1913  039D                     	;# 
  1914  039E                     	;# 
  1915  039F                     	;# 
  1916  0498                     	;# 
  1917  0498                     	;# 
  1918  0499                     	;# 
  1919  049A                     	;# 
  1920  049B                     	;# 
  1921  049B                     	;# 
  1922  049C                     	;# 
  1923  049D                     	;# 
  1924  049E                     	;# 
  1925  049F                     	;# 
  1926  0617                     	;# 
  1927  0618                     	;# 
  1928  0619                     	;# 
  1929  0619                     	;# 
  1930  061A                     	;# 
  1931  061B                     	;# 
  1932  061C                     	;# 
  1933  061C                     	;# 
  1934  0691                     	;# 
  1935  0692                     	;# 
  1936  0693                     	;# 
  1937  0694                     	;# 
  1938  0695                     	;# 
  1939  0696                     	;# 
  1940  0697                     	;# 
  1941  0698                     	;# 
  1942  0699                     	;# 
  1943  0891                     	;# 
  1944  0891                     	;# 
  1945  0891                     	;# 
  1946  0891                     	;# 
  1947  0891                     	;# 
  1948  0891                     	;# 
  1949  0892                     	;# 
  1950  0892                     	;# 
  1951  0892                     	;# 
  1952  0893                     	;# 
  1953  0893                     	;# 
  1954  0893                     	;# 
  1955  0893                     	;# 
  1956  0893                     	;# 
  1957  0893                     	;# 
  1958  0894                     	;# 
  1959  0894                     	;# 
  1960  0894                     	;# 
  1961  0895                     	;# 
  1962  0895                     	;# 
  1963  0895                     	;# 
  1964  0896                     	;# 
  1965  0896                     	;# 
  1966  0896                     	;# 
  1967  089B                     	;# 
  1968  0911                     	;# 
  1969  0912                     	;# 
  1970  0913                     	;# 
  1971  0914                     	;# 
  1972  0915                     	;# 
  1973  0916                     	;# 
  1974  0918                     	;# 
  1975  0919                     	;# 
  1976  091A                     	;# 
  1977  091B                     	;# 
  1978  091C                     	;# 
  1979  091D                     	;# 
  1980  091E                     	;# 
  1981  091F                     	;# 
  1982  0E0F                     	;# 
  1983  0E10                     	;# 
  1984  0E11                     	;# 
  1985  0E12                     	;# 
  1986  0E13                     	;# 
  1987  0E14                     	;# 
  1988  0E15                     	;# 
  1989  0E18                     	;# 
  1990  0E1A                     	;# 
  1991  0E1B                     	;# 
  1992  0E1C                     	;# 
  1993  0E20                     	;# 
  1994  0E21                     	;# 
  1995  0E22                     	;# 
  1996  0E24                     	;# 
  1997  0E25                     	;# 
  1998  0E28                     	;# 
  1999  0E29                     	;# 
  2000  0E2A                     	;# 
  2001  0E2B                     	;# 
  2002  0E90                     	;# 
  2003  0E91                     	;# 
  2004  0E92                     	;# 
  2005  0E94                     	;# 
  2006  0E95                     	;# 
  2007  0F0F                     	;# 
  2008  0F10                     	;# 
  2009  0F11                     	;# 
  2010  0F12                     	;# 
  2011  0F13                     	;# 
  2012  0F14                     	;# 
  2013  0F15                     	;# 
  2014  0F16                     	;# 
  2015  0F17                     	;# 
  2016  0F18                     	;# 
  2017  0F19                     	;# 
  2018  0F1A                     	;# 
  2019  0F1B                     	;# 
  2020  0F1C                     	;# 
  2021  0F1D                     	;# 
  2022  0F1E                     	;# 
  2023  0F1F                     	;# 
  2024  0F20                     	;# 
  2025  0F21                     	;# 
  2026  0F22                     	;# 
  2027  0F23                     	;# 
  2028  0FE4                     	;# 
  2029  0FE5                     	;# 
  2030  0FE6                     	;# 
  2031  0FE7                     	;# 
  2032  0FE8                     	;# 
  2033  0FE9                     	;# 
  2034  0FEA                     	;# 
  2035  0FEB                     	;# 
  2036  0FED                     	;# 
  2037  0FEE                     	;# 
  2038  0FEF                     	;# 
  2039  0000                     	;# 
  2040  0001                     	;# 
  2041  0002                     	;# 
  2042  0003                     	;# 
  2043  0004                     	;# 
  2044  0005                     	;# 
  2045  0006                     	;# 
  2046  0007                     	;# 
  2047  0008                     	;# 
  2048  0009                     	;# 
  2049  000A                     	;# 
  2050  000B                     	;# 
  2051  000C                     	;# 
  2052  0010                     	;# 
  2053  0011                     	;# 
  2054  0012                     	;# 
  2055  0013                     	;# 
  2056  0014                     	;# 
  2057  0015                     	;# 
  2058  0015                     	;# 
  2059  0016                     	;# 
  2060  0016                     	;# 
  2061  0017                     	;# 
  2062  0018                     	;# 
  2063  0019                     	;# 
  2064  0019                     	;# 
  2065  001A                     	;# 
  2066  001B                     	;# 
  2067  001C                     	;# 
  2068  001D                     	;# 
  2069  001E                     	;# 
  2070  001F                     	;# 
  2071  008C                     	;# 
  2072  0090                     	;# 
  2073  0091                     	;# 
  2074  0092                     	;# 
  2075  0093                     	;# 
  2076  0094                     	;# 
  2077  0097                     	;# 
  2078  009B                     	;# 
  2079  009B                     	;# 
  2080  009C                     	;# 
  2081  009D                     	;# 
  2082  009E                     	;# 
  2083  009F                     	;# 
  2084  010C                     	;# 
  2085  0111                     	;# 
  2086  0112                     	;# 
  2087  0115                     	;# 
  2088  0116                     	;# 
  2089  0117                     	;# 
  2090  0118                     	;# 
  2091  0119                     	;# 
  2092  018C                     	;# 
  2093  0197                     	;# 
  2094  0199                     	;# 
  2095  0199                     	;# 
  2096  0199                     	;# 
  2097  019A                     	;# 
  2098  019A                     	;# 
  2099  019A                     	;# 
  2100  019B                     	;# 
  2101  019B                     	;# 
  2102  019B                     	;# 
  2103  019B                     	;# 
  2104  019B                     	;# 
  2105  019C                     	;# 
  2106  019C                     	;# 
  2107  019C                     	;# 
  2108  019D                     	;# 
  2109  019D                     	;# 
  2110  019D                     	;# 
  2111  019E                     	;# 
  2112  019E                     	;# 
  2113  019E                     	;# 
  2114  019F                     	;# 
  2115  019F                     	;# 
  2116  019F                     	;# 
  2117  019F                     	;# 
  2118  019F                     	;# 
  2119  020C                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0216                     	;# 
  2133  0216                     	;# 
  2134  0217                     	;# 
  2135  0217                     	;# 
  2136  028C                     	;# 
  2137  0291                     	;# 
  2138  0291                     	;# 
  2139  0292                     	;# 
  2140  0293                     	;# 
  2141  0294                     	;# 
  2142  0295                     	;# 
  2143  0295                     	;# 
  2144  0296                     	;# 
  2145  0297                     	;# 
  2146  0298                     	;# 
  2147  030C                     	;# 
  2148  038C                     	;# 
  2149  0391                     	;# 
  2150  0392                     	;# 
  2151  0393                     	;# 
  2152  039A                     	;# 
  2153  039C                     	;# 
  2154  039D                     	;# 
  2155  039E                     	;# 
  2156  039F                     	;# 
  2157  0498                     	;# 
  2158  0498                     	;# 
  2159  0499                     	;# 
  2160  049A                     	;# 
  2161  049B                     	;# 
  2162  049B                     	;# 
  2163  049C                     	;# 
  2164  049D                     	;# 
  2165  049E                     	;# 
  2166  049F                     	;# 
  2167  0617                     	;# 
  2168  0618                     	;# 
  2169  0619                     	;# 
  2170  0619                     	;# 
  2171  061A                     	;# 
  2172  061B                     	;# 
  2173  061C                     	;# 
  2174  061C                     	;# 
  2175  0691                     	;# 
  2176  0692                     	;# 
  2177  0693                     	;# 
  2178  0694                     	;# 
  2179  0695                     	;# 
  2180  0696                     	;# 
  2181  0697                     	;# 
  2182  0698                     	;# 
  2183  0699                     	;# 
  2184  0891                     	;# 
  2185  0891                     	;# 
  2186  0891                     	;# 
  2187  0891                     	;# 
  2188  0891                     	;# 
  2189  0891                     	;# 
  2190  0892                     	;# 
  2191  0892                     	;# 
  2192  0892                     	;# 
  2193  0893                     	;# 
  2194  0893                     	;# 
  2195  0893                     	;# 
  2196  0893                     	;# 
  2197  0893                     	;# 
  2198  0893                     	;# 
  2199  0894                     	;# 
  2200  0894                     	;# 
  2201  0894                     	;# 
  2202  0895                     	;# 
  2203  0895                     	;# 
  2204  0895                     	;# 
  2205  0896                     	;# 
  2206  0896                     	;# 
  2207  0896                     	;# 
  2208  089B                     	;# 
  2209  0911                     	;# 
  2210  0912                     	;# 
  2211  0913                     	;# 
  2212  0914                     	;# 
  2213  0915                     	;# 
  2214  0916                     	;# 
  2215  0918                     	;# 
  2216  0919                     	;# 
  2217  091A                     	;# 
  2218  091B                     	;# 
  2219  091C                     	;# 
  2220  091D                     	;# 
  2221  091E                     	;# 
  2222  091F                     	;# 
  2223  0E0F                     	;# 
  2224  0E10                     	;# 
  2225  0E11                     	;# 
  2226  0E12                     	;# 
  2227  0E13                     	;# 
  2228  0E14                     	;# 
  2229  0E15                     	;# 
  2230  0E18                     	;# 
  2231  0E1A                     	;# 
  2232  0E1B                     	;# 
  2233  0E1C                     	;# 
  2234  0E20                     	;# 
  2235  0E21                     	;# 
  2236  0E22                     	;# 
  2237  0E24                     	;# 
  2238  0E25                     	;# 
  2239  0E28                     	;# 
  2240  0E29                     	;# 
  2241  0E2A                     	;# 
  2242  0E2B                     	;# 
  2243  0E90                     	;# 
  2244  0E91                     	;# 
  2245  0E92                     	;# 
  2246  0E94                     	;# 
  2247  0E95                     	;# 
  2248  0F0F                     	;# 
  2249  0F10                     	;# 
  2250  0F11                     	;# 
  2251  0F12                     	;# 
  2252  0F13                     	;# 
  2253  0F14                     	;# 
  2254  0F15                     	;# 
  2255  0F16                     	;# 
  2256  0F17                     	;# 
  2257  0F18                     	;# 
  2258  0F19                     	;# 
  2259  0F1A                     	;# 
  2260  0F1B                     	;# 
  2261  0F1C                     	;# 
  2262  0F1D                     	;# 
  2263  0F1E                     	;# 
  2264  0F1F                     	;# 
  2265  0F20                     	;# 
  2266  0F21                     	;# 
  2267  0F22                     	;# 
  2268  0F23                     	;# 
  2269  0FE4                     	;# 
  2270  0FE5                     	;# 
  2271  0FE6                     	;# 
  2272  0FE7                     	;# 
  2273  0FE8                     	;# 
  2274  0FE9                     	;# 
  2275  0FEA                     	;# 
  2276  0FEB                     	;# 
  2277  0FED                     	;# 
  2278  0FEE                     	;# 
  2279  0FEF                     	;# 
  2280                           
  2281                           	psect	idataBANK0
  2282  0000                     __pidataBANK0:	
  2283                           
  2284                           	psect	stringtext1
  2285  01E3                     __pstringtext1:	
  2286  01E3                     _dpowers:	
  2287  01E3  3401               	retlw	1
  2288  01E4  3400               	retlw	0
  2289  01E5  340A               	retlw	10
  2290  01E6  3400               	retlw	0
  2291  01E7  3464               	retlw	100
  2292  01E8  3400               	retlw	0
  2293  01E9  34E8               	retlw	232
  2294  01EA  3403               	retlw	3
  2295  01EB  3410               	retlw	16
  2296  01EC  3427               	retlw	39
  2297  01ED                     __end_of_dpowers:	
  2298                           
  2299                           	psect	stringtext2
  2300  029D                     __pstringtext2:	
  2301  029D                     _mtouch_button_init:	
  2302  029D  3400               	retlw	0
  2303  029E  3400               	retlw	0
  2304  029F  3400               	retlw	0
  2305  02A0  3400               	retlw	0
  2306  02A1  3400               	retlw	0
  2307  02A2  3400               	retlw	0
  2308  02A3  3400               	retlw	0
  2309  02A4  3400               	retlw	0
  2310  02A5  3400               	retlw	0
  2311  02A6  3400               	retlw	0
  2312  02A7  3400               	retlw	0
  2313  02A8  3400               	retlw	0
  2314  02A9  3400               	retlw	0
  2315  02AA  3400               	retlw	0
  2316  02AB  3464               	retlw	100
  2317  02AC  3403               	retlw	3
  2318  02AD                     __end_of_mtouch_button_init:	
  2319  000C                     _PORTAbits	set	12
  2320  000B                     _INTCONbits	set	11
  2321  0011                     _PIR1bits	set	17
  2322  005F                     _GIE	set	95
  2323  009B                     _ADRES	set	155
  2324  008C                     _TRISA	set	140
  2325  009D                     _ADCON0bits	set	157
  2326  009F                     _ADACT	set	159
  2327  009E                     _ADCON1	set	158
  2328  009D                     _ADCON0	set	157
  2329  008C                     _TRISAbits	set	140
  2330  0097                     _WDTCON	set	151
  2331  010C                     _LATA	set	268
  2332  018C                     _ANSELA	set	396
  2333  018C                     _ANSELAbits	set	396
  2334  019A                     _TX1REG	set	410
  2335  019C                     _SP1BRGH	set	412
  2336  019B                     _SP1BRGL	set	411
  2337  019E                     _TX1STA	set	414
  2338  019D                     _RC1STA	set	413
  2339  019F                     _BAUD1CON	set	415
  2340  020C                     _WPUA	set	524
  2341  020C                     _WPUAbits	set	524
  2342  028C                     _ODCONA	set	652
  2343  0916                     _PMD5	set	2326
  2344  0915                     _PMD4	set	2325
  2345  0914                     _PMD3	set	2324
  2346  0913                     _PMD2	set	2323
  2347  0912                     _PMD1	set	2322
  2348  0911                     _PMD0	set	2321
  2349  091E                     _OSCTUNE	set	2334
  2350  091F                     _OSCFRQ	set	2335
  2351  091D                     _OSCEN	set	2333
  2352  091B                     _OSCCON3	set	2331
  2353  0919                     _OSCCON1	set	2329
  2354  0E94                     _RA4PPSbits	set	3732
  2355  02AD                     STR_1:	
  2356  02AD  3425               	retlw	37	;'%'
  2357  02AE  3464               	retlw	100	;'d'
  2358  02AF  3400               	retlw	0
  2359                           
  2360                           	psect	stringtext3
  2361  0000                     __pstringtext3:	
  2362                           
  2363                           ; #config settings
  2364  0000                     
  2365                           	psect	cinit
  2366  07DC                     start_initialization:	
  2367  07DC                     __initialization:	
  2368                           
  2369                           ;initializer for _Button_StateMachine
  2370  07DC  3093               	movlw	low _Button_State_Initializing
  2371  07DD  00DB               	movwf	__pdataBANK0& (0+127)
  2372  07DE  3005               	movlw	high _Button_State_Initializing
  2373  07DF  00DC               	movwf	(__pdataBANK0+1)& (0+127)
  2374  07E0  302B               	movlw	low _Button_State_NotPressed
  2375  07E1  00DD               	movwf	(__pdataBANK0+2)& (0+127)
  2376  07E2  3006               	movlw	high _Button_State_NotPressed
  2377  07E3  00DE               	movwf	(__pdataBANK0+3)& (0+127)
  2378  07E4  3022               	movlw	low _Button_State_Pressed
  2379  07E5  00DF               	movwf	(__pdataBANK0+4)& (0+127)
  2380  07E6  3004               	movlw	high _Button_State_Pressed
  2381  07E7  00E0               	movwf	(__pdataBANK0+5)& (0+127)
  2382                           
  2383                           ;initializer for _mtouch_sensor
  2384  07E8  3000               	movlw	0
  2385  07E9  00E1               	movwf	(__pdataBANK0+6)& (0+127)
  2386  07EA  3089               	movlw	low _MTOUCH_CVD_ScanA_0
  2387  07EB  00E2               	movwf	(__pdataBANK0+7)& (0+127)
  2388  07EC  3003               	movlw	high _MTOUCH_CVD_ScanA_0
  2389  07ED  00E3               	movwf	(__pdataBANK0+8)& (0+127)
  2390  07EE  30AE               	movlw	low _MTOUCH_CVD_ScanB_0
  2391  07EF  00E4               	movwf	(__pdataBANK0+9)& (0+127)
  2392  07F0  3003               	movlw	high _MTOUCH_CVD_ScanB_0
  2393  07F1  00E5               	movwf	(__pdataBANK0+10)& (0+127)
  2394  07F2  3020               	movlw	32
  2395  07F3  00E6               	movwf	(__pdataBANK0+11)& (0+127)
  2396  07F4  3000               	movlw	0
  2397  07F5  00E7               	movwf	(__pdataBANK0+12)& (0+127)
  2398  07F6  00E8               	movwf	(__pdataBANK0+13)& (0+127)
  2399  07F7  00E9               	movwf	(__pdataBANK0+14)& (0+127)
  2400                           
  2401                           ; Clear objects allocated to BANK0
  2402  07F8  303F               	movlw	low __pbssBANK0
  2403  07F9  0084               	movwf	4
  2404  07FA  3000               	movlw	high __pbssBANK0
  2405  07FB  0085               	movwf	5
  2406  07FC  301C               	movlw	28
  2407  07FD  219A               	fcall	clear_ram0
  2408  07FE                     end_of_initialization:	
  2409                           ;End of C runtime variable initialization code
  2410                           
  2411  07FE                     __end_of__initialization:	
  2412  07FE  0020               	movlb	0
  2413  07FF  2E86               	ljmp	_main	;jump to C main() function
  2414                           
  2415                           	psect	bssBANK0
  2416  003F                     __pbssBANK0:	
  2417  003F                     _bright:	
  2418  003F                     	ds	2
  2419  0041                     _packet_sample:	
  2420  0041                     	ds	2
  2421  0043                     _myStatus:	
  2422  0043                     	ds	1
  2423  0044                     _toggleLED:	
  2424  0044                     	ds	1
  2425  0045                     _sample_delay:	
  2426  0045                     	ds	1
  2427  0046                     _packet_counter:	
  2428  0046                     	ds	1
  2429  0047                     _currentScannSensor:	
  2430  0047                     	ds	1
  2431  0048                     _sensor_globalFlags:	
  2432  0048                     	ds	1
  2433  0049                     MTOUCH_Random@seed:	
  2434  0049                     	ds	1
  2435  004A                     _mtouch_time_toScan:	
  2436  004A                     	ds	1
  2437  004B                     _mtouch_button:	
  2438  004B                     	ds	16
  2439                           
  2440                           	psect	dataBANK0
  2441  005B                     __pdataBANK0:	
  2442  005B                     _Button_StateMachine:	
  2443  005B                     	ds	6
  2444  0061                     _mtouch_sensor:	
  2445  0061                     	ds	9
  2446                           
  2447                           	psect	clrtext
  2448  019A                     clear_ram0:	
  2449                           ;	Called with FSR0 containing the base address, and
  2450                           ;	WREG with the size to clear
  2451                           
  2452  019A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2453  019B                     clrloop0:	
  2454  019B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2455  019C  3101               	addfsr 0,1
  2456  019D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2457  019E  299B               	goto	clrloop0	;have we reached the end yet?
  2458  019F  3400               	retlw	0	;all done for this memory range, return
  2459                           
  2460                           	psect	cstackCOMMON
  2461  0070                     __pcstackCOMMON:	
  2462  0070                     ?_PMD_Initialize:	
  2463  0070                     ??_PMD_Initialize:	
  2464                           ; 1 bytes @ 0x0
  2465                           
  2466  0070                     ?_PIN_MANAGER_Initialize:	
  2467                           ; 1 bytes @ 0x0
  2468                           
  2469  0070                     ??_PIN_MANAGER_Initialize:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0070                     ?_OSCILLATOR_Initialize:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0070                     ??_OSCILLATOR_Initialize:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?_WDT_Initialize:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ??_WDT_Initialize:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?_MTOUCH_Initialize:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_MTOUCH_Button_InitializeAll:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ?_MTOUCH_Button_ServiceAll:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?_MTOUCH_Tick:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ?_MTOUCH_Button_Tick:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_Button_DefaultCallback:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     ??_MTOUCH_Sensor_Calibrate:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0070                     ?_Button_Service:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     ??_MTOUCH_Sensor_isCalibrated:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0070                     ?_Button_Reading_Update:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     ?_Button_Deviation_Update:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0070                     ??_Button_Deviation_Update:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ?_Button_Baseline_Initialize:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0070                     ?_Button_Baseline_Update:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0070                     ??_Button_Baseline_Update:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     ?_Button_Tick_helper:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ??_Button_Tick_helper:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ?_Sensor_DefaultCallback:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ?_MTOUCH_CVD_ScanA_0:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ??_MTOUCH_CVD_ScanA_0:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ?_MTOUCH_CVD_ScanB_0:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ??_MTOUCH_CVD_ScanB_0:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_MTOUCH_Sensor_Enable:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_Sensor_Sampled_Reset:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ??_Sensor_Sampled_Reset:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_Sensor_Service:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_Sensor_Acquisition:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ?_Sensor_RawSample_Update:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ??_Sensor_RawSample_Update:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_Sensor_setSampled:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ??_Sensor_setSampled:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_Sensor_isEnabled:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ??_Sensor_isEnabled:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ?_Sensor_Acq_ExecutePacket:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_Sensor_setActive:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ??_Sensor_setActive:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_Sensor_setInactive:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ??_Sensor_setInactive:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_Sensor_setScanFunction:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ??_Sensor_setScanFunction:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?_Sensor_Acq_ExecuteScan:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_MTOUCH_Delay:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ??_MTOUCH_Delay:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_EUSART_Initialize:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ??_EUSART_Initialize:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_EUSART_Write:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ??_EUSART_Write:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_SYSTEM_Initialize:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ?_MTOUCH_Service_Mainloop:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ?_MTOUCH_Button_Initialize:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ??_MTOUCH_Button_Initialize:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_MTOUCH_Button_isPressed:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ??_MTOUCH_Button_isPressed:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_MTOUCH_Random:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ??_MTOUCH_Random:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_MTOUCH_Sensor_Initialize:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_main:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ?___bmul:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ?_abs:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?___lwdiv:	
  2686                           ; 2 bytes @ 0x0
  2687                           
  2688  0070                     EUSART_Write@txData:	
  2689                           ; 2 bytes @ 0x0
  2690                           
  2691  0070                     MTOUCH_Button_Initialize@name:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     MTOUCH_Button_isPressed@name:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     Button_DefaultCallback@button:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0070                     MTOUCH_Delay@i:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     Sensor_RawSample_Update@sensor:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     Sensor_DefaultCallback@sensor:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     Sensor_setScanFunction@sensor:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     Sensor_isEnabled@sensor:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     Sensor_setActive@sensor:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     Sensor_setInactive@sensor:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     MTOUCH_Sensor_isCalibrated@sensor:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     MTOUCH_Sensor_Calibrate@sensor:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     Sensor_Sampled_Reset@sensor:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     Sensor_setSampled@sensor:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     ___bmul@multiplicand:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0070                     abs@a:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0070                     ___lwdiv@divisor:	
  2740                           ; 2 bytes @ 0x0
  2741                           
  2742                           
  2743                           ; 2 bytes @ 0x0
  2744  0070                     	ds	1
  2745  0071                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2746  0071                     ??_Button_DefaultCallback:	
  2747                           ; 1 bytes @ 0x1
  2748                           
  2749  0071                     ??_Sensor_DefaultCallback:	
  2750                           ; 1 bytes @ 0x1
  2751                           
  2752  0071                     ??___bmul:	
  2753                           ; 1 bytes @ 0x1
  2754                           
  2755  0071                     MTOUCH_Button_Initialize@button:	
  2756                           ; 1 bytes @ 0x1
  2757                           
  2758  0071                     ___bmul@product:	
  2759                           ; 1 bytes @ 0x1
  2760                           
  2761                           
  2762                           ; 1 bytes @ 0x1
  2763  0071                     	ds	1
  2764  0072                     ??_MTOUCH_Button_InitializeAll:	
  2765  0072                     ??_abs:	
  2766                           ; 1 bytes @ 0x2
  2767                           
  2768  0072                     Button_Tick_helper@button:	
  2769                           ; 1 bytes @ 0x2
  2770                           
  2771  0072                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  2772                           ; 1 bytes @ 0x2
  2773                           
  2774  0072                     ___bmul@multiplier:	
  2775                           ; 1 bytes @ 0x2
  2776                           
  2777  0072                     ___lwdiv@dividend:	
  2778                           ; 1 bytes @ 0x2
  2779                           
  2780                           
  2781                           ; 2 bytes @ 0x2
  2782  0072                     	ds	1
  2783  0073                     ??_MTOUCH_Tick:	
  2784  0073                     ??_MTOUCH_Button_Tick:	
  2785                           ; 1 bytes @ 0x3
  2786                           
  2787  0073                     ??_MTOUCH_Sensor_wasSampled:	
  2788                           ; 1 bytes @ 0x3
  2789                           
  2790  0073                     ??_MTOUCH_Sensor_Enable:	
  2791                           ; 1 bytes @ 0x3
  2792                           
  2793  0073                     ??_Sensor_Acq_ExecuteScan:	
  2794                           ; 1 bytes @ 0x3
  2795                           
  2796  0073                     ?_MTOUCH_Sensor_RawSample_Get:	
  2797                           ; 1 bytes @ 0x3
  2798                           
  2799  0073                     MTOUCH_Button_InitializeAll@button:	
  2800                           ; 2 bytes @ 0x3
  2801                           
  2802  0073                     MTOUCH_Sensor_Enable@sensor:	
  2803                           ; 1 bytes @ 0x3
  2804                           
  2805  0073                     MTOUCH_Sensor_wasSampled@sensor:	
  2806                           ; 1 bytes @ 0x3
  2807                           
  2808                           
  2809                           ; 1 bytes @ 0x3
  2810  0073                     	ds	1
  2811  0074                     ??_MTOUCH_Sensor_Initialize:	
  2812  0074                     ??___lwdiv:	
  2813                           ; 1 bytes @ 0x4
  2814                           
  2815  0074                     MTOUCH_Sensor_Initialize@sensor:	
  2816                           ; 1 bytes @ 0x4
  2817                           
  2818  0074                     ___lwdiv@quotient:	
  2819                           ; 1 bytes @ 0x4
  2820                           
  2821                           
  2822                           ; 2 bytes @ 0x4
  2823  0074                     	ds	1
  2824  0075                     ??_MTOUCH_Sensor_InitializeAll:	
  2825  0075                     MTOUCH_Sensor_InitializeAll@sensor:	
  2826                           ; 1 bytes @ 0x5
  2827                           
  2828  0075                     Sensor_Acq_ExecuteScan@result:	
  2829                           ; 1 bytes @ 0x5
  2830                           
  2831                           
  2832                           ; 2 bytes @ 0x5
  2833  0075                     	ds	1
  2834  0076                     ??_MTOUCH_Initialize:	
  2835  0076                     ??_MTOUCH_Sensor_RawSample_Get:	
  2836                           ; 1 bytes @ 0x6
  2837                           
  2838  0076                     ??_SYSTEM_Initialize:	
  2839                           ; 1 bytes @ 0x6
  2840                           
  2841  0076                     Button_Baseline_Update@button:	
  2842                           ; 1 bytes @ 0x6
  2843                           
  2844  0076                     MTOUCH_Sensor_RawSample_Get@name:	
  2845                           ; 1 bytes @ 0x6
  2846                           
  2847  0076                     ___lwdiv@counter:	
  2848                           ; 1 bytes @ 0x6
  2849                           
  2850                           
  2851                           ; 1 bytes @ 0x6
  2852  0076                     	ds	1
  2853  0077                     ??_Button_Reading_Update:	
  2854  0077                     ??_Button_Baseline_Initialize:	
  2855                           ; 1 bytes @ 0x7
  2856                           
  2857  0077                     ??_Sensor_Acq_ExecutePacket:	
  2858                           ; 1 bytes @ 0x7
  2859                           
  2860  0077                     ?___lwmod:	
  2861                           ; 1 bytes @ 0x7
  2862                           
  2863  0077                     Sensor_Acq_ExecutePacket@ADCON0_temp:	
  2864                           ; 2 bytes @ 0x7
  2865                           
  2866  0077                     ___lwmod@divisor:	
  2867                           ; 1 bytes @ 0x7
  2868                           
  2869                           
  2870                           ; 2 bytes @ 0x7
  2871  0077                     	ds	1
  2872  0078                     Sensor_Acq_ExecutePacket@ADCON1_temp:	
  2873                           
  2874                           ; 1 bytes @ 0x8
  2875  0078                     	ds	1
  2876  0079                     Button_Reading_Update@button:	
  2877  0079                     Sensor_Acq_ExecutePacket@ADACT_temp:	
  2878                           ; 1 bytes @ 0x9
  2879                           
  2880  0079                     ___lwmod@dividend:	
  2881                           ; 1 bytes @ 0x9
  2882                           
  2883                           
  2884                           ; 2 bytes @ 0x9
  2885  0079                     	ds	1
  2886  007A                     Sensor_Acq_ExecutePacket@GIE_state:	
  2887                           
  2888                           ; 1 bytes @ 0xA
  2889  007A                     	ds	1
  2890  007B                     ??___lwmod:	
  2891  007B                     Button_Baseline_Initialize@button:	
  2892                           ; 1 bytes @ 0xB
  2893                           
  2894  007B                     Sensor_Acq_ExecutePacket@error:	
  2895                           ; 1 bytes @ 0xB
  2896                           
  2897  007B                     ___lwmod@counter:	
  2898                           ; 1 bytes @ 0xB
  2899                           
  2900                           
  2901                           ; 1 bytes @ 0xB
  2902  007B                     	ds	1
  2903  007C                     ?_Button_State_Initializing:	
  2904  007C                     ?_Button_State_NotPressed:	
  2905                           ; 1 bytes @ 0xC
  2906                           
  2907  007C                     ?_Button_State_Pressed:	
  2908                           ; 1 bytes @ 0xC
  2909                           
  2910  007C                     ?_DisplayVal:	
  2911                           ; 1 bytes @ 0xC
  2912                           
  2913  007C                     Button_State_Initializing@button:	
  2914                           ; 1 bytes @ 0xC
  2915                           
  2916  007C                     Button_State_NotPressed@button:	
  2917                           ; 1 bytes @ 0xC
  2918                           
  2919  007C                     Button_State_Pressed@button:	
  2920                           ; 1 bytes @ 0xC
  2921                           
  2922  007C                     Sensor_Acq_ExecutePacket@sensor:	
  2923                           ; 1 bytes @ 0xC
  2924                           
  2925  007C                     DisplayVal@val:	
  2926                           ; 1 bytes @ 0xC
  2927                           
  2928                           
  2929                           ; 2 bytes @ 0xC
  2930  007C                     	ds	1
  2931  007D                     ??_MTOUCH_Sensor_SampleAll:	
  2932  007D                     ??_MTOUCH_Button_ServiceAll:	
  2933                           ; 1 bytes @ 0xD
  2934                           
  2935  007D                     ??_Button_Service:	
  2936                           ; 1 bytes @ 0xD
  2937                           
  2938  007D                     ??_Sensor_Service:	
  2939                           ; 1 bytes @ 0xD
  2940                           
  2941  007D                     MTOUCH_Button_ServiceAll@button:	
  2942                           ; 1 bytes @ 0xD
  2943                           
  2944  007D                     MTOUCH_Sensor_SampleAll@sensor:	
  2945                           ; 1 bytes @ 0xD
  2946                           
  2947                           
  2948                           ; 1 bytes @ 0xD
  2949  007D                     	ds	1
  2950  007E                     ??_MTOUCH_Service_Mainloop:	
  2951  007E                     ??_DisplayVal:	
  2952                           ; 1 bytes @ 0xE
  2953                           
  2954                           
  2955                           	psect	cstackBANK0
  2956  0020                     __pcstackBANK0:	
  2957                           ; 1 bytes @ 0xE
  2958                           
  2959  0020                     ??_Button_State_Initializing:	
  2960  0020                     ??_Button_State_NotPressed:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0020                     ??_Button_State_Pressed:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0020                     ??_Sensor_Acquisition:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0020                     ?_sprintf:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0020                     sprintf@f:	
  2973                           ; 2 bytes @ 0x0
  2974                           
  2975  0020                     Button_Deviation_Update@deviation:	
  2976                           ; 2 bytes @ 0x0
  2977                           
  2978                           
  2979                           ; 4 bytes @ 0x0
  2980  0020                     	ds	4
  2981  0024                     ??_sprintf:	
  2982  0024                     Button_Deviation_Update@button:	
  2983                           ; 1 bytes @ 0x4
  2984                           
  2985  0024                     Sensor_Acquisition@retry:	
  2986                           ; 1 bytes @ 0x4
  2987                           
  2988                           
  2989                           ; 1 bytes @ 0x4
  2990  0024                     	ds	1
  2991  0025                     Button_Service@name:	
  2992  0025                     Sensor_Acquisition@sensor:	
  2993                           ; 1 bytes @ 0x5
  2994                           
  2995                           
  2996                           ; 1 bytes @ 0x5
  2997  0025                     	ds	1
  2998  0026                     Button_Service@button:	
  2999  0026                     Sensor_Service@name:	
  3000                           ; 1 bytes @ 0x6
  3001                           
  3002                           
  3003                           ; 1 bytes @ 0x6
  3004  0026                     	ds	1
  3005  0027                     Sensor_Service@error:	
  3006                           
  3007                           ; 1 bytes @ 0x7
  3008  0027                     	ds	1
  3009  0028                     Sensor_Service@sensor:	
  3010  0028                     sprintf@ap:	
  3011                           ; 1 bytes @ 0x8
  3012                           
  3013                           
  3014                           ; 1 bytes @ 0x8
  3015  0028                     	ds	1
  3016  0029                     sprintf@flag:	
  3017                           
  3018                           ; 1 bytes @ 0x9
  3019  0029                     	ds	1
  3020  002A                     sprintf@prec:	
  3021                           
  3022                           ; 1 bytes @ 0xA
  3023  002A                     	ds	1
  3024  002B                     sprintf@val:	
  3025                           
  3026                           ; 2 bytes @ 0xB
  3027  002B                     	ds	2
  3028  002D                     sprintf@sp:	
  3029                           
  3030                           ; 1 bytes @ 0xD
  3031  002D                     	ds	1
  3032  002E                     sprintf@c:	
  3033                           
  3034                           ; 1 bytes @ 0xE
  3035  002E                     	ds	1
  3036  002F                     DisplayVal@valStr:	
  3037                           
  3038                           ; 10 bytes @ 0xF
  3039  002F                     	ds	10
  3040  0039                     DisplayVal@str:	
  3041                           
  3042                           ; 1 bytes @ 0x19
  3043  0039                     	ds	1
  3044  003A                     ??_main:	
  3045                           
  3046                           ; 1 bytes @ 0x1A
  3047  003A                     	ds	1
  3048  003B                     main@data:	
  3049                           
  3050                           ; 2 bytes @ 0x1B
  3051  003B                     	ds	2
  3052  003D                     main@i:	
  3053                           
  3054                           ; 2 bytes @ 0x1D
  3055  003D                     	ds	2
  3056                           
  3057                           	psect	maintext
  3058  0686                     __pmaintext:	
  3059 ;;
  3060 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3061 ;;
  3062 ;; *************** function _main *****************
  3063 ;; Defined at:
  3064 ;;		line 70 in file "main.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  i               2   29[BANK0 ] int 
  3069 ;;  data            2   27[BANK0 ] unsigned int 
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : B1F/0
  3076 ;;		On exit  : 1F/3
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3079 ;;      Params:         0       0       0       0
  3080 ;;      Locals:         0       4       0       0
  3081 ;;      Temps:          0       1       0       0
  3082 ;;      Totals:         0       5       0       0
  3083 ;;Total ram usage:        5 bytes
  3084 ;; Hardware stack levels required when called:    7
  3085 ;; This function calls:
  3086 ;;		_DisplayVal
  3087 ;;		_MTOUCH_Button_isPressed
  3088 ;;		_MTOUCH_Sensor_RawSample_Get
  3089 ;;		_MTOUCH_Service_Mainloop
  3090 ;;		_SYSTEM_Initialize
  3091 ;; This function is called by:
  3092 ;;		Startup code after reset
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           
  3097                           ;psect for function _main
  3098  0686                     _main:	
  3099                           
  3100                           ;main.c: 73: SYSTEM_Initialize();
  3101                           
  3102                           ;incstack = 0
  3103                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3104  0686  2194               	fcall	_SYSTEM_Initialize
  3105  0687                     l582:	
  3106                           ;main.c: 75: mtouch_sensor_sample_t data;
  3107                           ;main.c: 77: while (1)
  3108                           
  3109                           
  3110                           ;main.c: 78: {
  3111                           ;main.c: 80: MTOUCH_Service_Mainloop();
  3112  0687  2210               	fcall	_MTOUCH_Service_Mainloop
  3113                           
  3114                           ;main.c: 81: data = MTOUCH_Sensor_RawSample_Get(Sensor_ANA2);
  3115  0688  3000               	movlw	0
  3116  0689  228A               	fcall	_MTOUCH_Sensor_RawSample_Get
  3117  068A  0874               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  3118  068B  0020               	movlb	0	; select bank0
  3119  068C  00BC               	movwf	main@data+1
  3120  068D  0873               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  3121  068E  00BB               	movwf	main@data
  3122                           
  3123                           ;main.c: 82: if(MTOUCH_Button_isPressed(Sensor_ANA2)){
  3124  068F  3000               	movlw	0
  3125  0690  222A               	fcall	_MTOUCH_Button_isPressed
  3126  0691  3A00               	xorlw	0
  3127  0692  1903               	skipnz
  3128  0693  2EA1               	goto	l2648
  3129                           
  3130                           ;main.c: 84: if(myStatus==0){
  3131  0694  0843               	movf	_myStatus,w
  3132  0695  1D03               	btfss	3,2
  3133  0696  2EA2               	goto	l2650
  3134                           
  3135                           ;main.c: 85: myStatus = 1;
  3136  0697  01C3               	clrf	_myStatus
  3137  0698  0AC3               	incf	_myStatus,f
  3138                           
  3139                           ;main.c: 87: if(toggleLED==0){
  3140  0699  0844               	movf	_toggleLED,w
  3141  069A  1D03               	btfss	3,2
  3142  069B  2E9F               	goto	l2646
  3143                           
  3144                           ;main.c: 88: toggleLED = 1;
  3145  069C  01C4               	clrf	_toggleLED
  3146  069D  0AC4               	incf	_toggleLED,f
  3147                           
  3148                           ;main.c: 89: }else{
  3149  069E  2EA2               	goto	l2650
  3150  069F                     l2646:	
  3151                           
  3152                           ;main.c: 90: toggleLED = 0;
  3153  069F  01C4               	clrf	_toggleLED
  3154  06A0  2EA2               	goto	l2650
  3155  06A1                     l2648:	
  3156                           
  3157                           ;main.c: 96: myStatus = 0;
  3158  06A1  01C3               	clrf	_myStatus
  3159  06A2                     l2650:	
  3160                           
  3161                           ;main.c: 97: }
  3162                           ;main.c: 99: if(toggleLED==1){
  3163  06A2  0B44               	decfsz	_toggleLED,w
  3164  06A3  2EB7               	goto	l2656
  3165                           
  3166                           ;main.c: 100: bright+=5;
  3167  06A4  3005               	movlw	5
  3168  06A5  07BF               	addwf	_bright,f
  3169  06A6  1803               	skipnc
  3170  06A7  0AC0               	incf	_bright+1,f
  3171                           
  3172                           ;main.c: 101: if(bright>255)bright=255;
  3173  06A8  0840               	movf	_bright+1,w
  3174  06A9  3A80               	xorlw	128
  3175  06AA  00BA               	movwf	??_main
  3176  06AB  3081               	movlw	129
  3177  06AC  023A               	subwf	??_main,w
  3178  06AD  1D03               	skipz
  3179  06AE  2EB1               	goto	u1725
  3180  06AF  3000               	movlw	0
  3181  06B0  023F               	subwf	_bright,w
  3182  06B1                     u1725:	
  3183  06B1  1C03               	skipc
  3184  06B2  2EBF               	goto	l590
  3185  06B3  30FF               	movlw	255
  3186  06B4  0020               	movlb	0	; select bank0
  3187  06B5  00BF               	movwf	_bright
  3188  06B6  2EBE               	goto	L1
  3189  06B7                     l2656:	
  3190                           
  3191                           ;main.c: 103: bright-=4;
  3192  06B7  30FC               	movlw	-4
  3193  06B8  07BF               	addwf	_bright,f
  3194  06B9  1C03               	skipc
  3195  06BA  03C0               	decf	_bright+1,f
  3196                           
  3197                           ;main.c: 104: if(bright<0)bright=0;
  3198  06BB  1FC0               	btfss	_bright+1,7
  3199  06BC  2EBF               	goto	l590
  3200  06BD  01BF               	clrf	_bright
  3201  06BE                     L1:	
  3202  06BE  01C0               	clrf	_bright+1
  3203  06BF                     l590:	
  3204                           
  3205                           ;main.c: 105: }
  3206                           ;main.c: 108: for(int i=0; i<255; i++){
  3207  06BF  0020               	movlb	0	; select bank0
  3208  06C0  01BD               	clrf	main@i
  3209  06C1  01BE               	clrf	main@i+1
  3210  06C2                     l2666:	
  3211                           
  3212                           ;main.c: 109: if(bright >i){
  3213  06C2  0020               	movlb	0	; select bank0
  3214  06C3  083E               	movf	main@i+1,w
  3215  06C4  3A80               	xorlw	128
  3216  06C5  00BA               	movwf	??_main
  3217  06C6  0840               	movf	_bright+1,w
  3218  06C7  3A80               	xorlw	128
  3219  06C8  023A               	subwf	??_main,w
  3220  06C9  1D03               	skipz
  3221  06CA  2ECD               	goto	u1745
  3222  06CB  083F               	movf	_bright,w
  3223  06CC  023D               	subwf	main@i,w
  3224  06CD                     u1745:	
  3225  06CD  1803               	skipnc
  3226  06CE  2ED2               	goto	l594
  3227                           
  3228                           ;main.c: 110: PORTAbits.RA5 = 1;
  3229  06CF  0020               	movlb	0	; select bank0
  3230  06D0  168C               	bsf	12,5	;volatile
  3231                           
  3232                           ;main.c: 111: }else{
  3233  06D1  2ED4               	goto	l2670
  3234  06D2                     l594:	
  3235                           
  3236                           ;main.c: 112: PORTAbits.RA5 = 0;
  3237  06D2  0020               	movlb	0	; select bank0
  3238  06D3  128C               	bcf	12,5	;volatile
  3239  06D4                     l2670:	
  3240  06D4  0ABD               	incf	main@i,f
  3241  06D5  1903               	skipnz
  3242  06D6  0ABE               	incf	main@i+1,f
  3243  06D7  083E               	movf	main@i+1,w
  3244  06D8  3A80               	xorlw	128
  3245  06D9  00BA               	movwf	??_main
  3246  06DA  3080               	movlw	128
  3247  06DB  023A               	subwf	??_main,w
  3248  06DC  1D03               	skipz
  3249  06DD  2EE0               	goto	u1755
  3250  06DE  30FF               	movlw	255
  3251  06DF  023D               	subwf	main@i,w
  3252  06E0                     u1755:	
  3253  06E0  1C03               	skipc
  3254  06E1  2EC2               	goto	l2666
  3255                           
  3256                           ;main.c: 113: }
  3257                           ;main.c: 114: }
  3258                           ;main.c: 116: DisplayVal(data);
  3259  06E2  0020               	movlb	0	; select bank0
  3260  06E3  083C               	movf	main@data+1,w
  3261  06E4  00FD               	movwf	DisplayVal@val+1
  3262  06E5  083B               	movf	main@data,w
  3263  06E6  00FC               	movwf	DisplayVal@val
  3264  06E7  22E4               	fcall	_DisplayVal
  3265  06E8  2E87               	goto	l582
  3266  06E9                     __end_of_main:	
  3267                           
  3268                           	psect	text1
  3269  0194                     __ptext1:	
  3270 ;; *************** function _SYSTEM_Initialize *****************
  3271 ;; Defined at:
  3272 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      void 
  3279 ;; Registers used:
  3280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : B1F/0
  3283 ;;		On exit  : 1F/1
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3286 ;;      Params:         0       0       0       0
  3287 ;;      Locals:         0       0       0       0
  3288 ;;      Temps:          0       0       0       0
  3289 ;;      Totals:         0       0       0       0
  3290 ;;Total ram usage:        0 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    5
  3293 ;; This function calls:
  3294 ;;		_EUSART_Initialize
  3295 ;;		_MTOUCH_Initialize
  3296 ;;		_OSCILLATOR_Initialize
  3297 ;;		_PIN_MANAGER_Initialize
  3298 ;;		_PMD_Initialize
  3299 ;;		_WDT_Initialize
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           
  3306                           ;psect for function _SYSTEM_Initialize
  3307  0194                     _SYSTEM_Initialize:	
  3308                           
  3309                           ;mcc.c: 53: PMD_Initialize();
  3310                           
  3311                           ;incstack = 0
  3312                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3313  0194  21BF               	fcall	_PMD_Initialize
  3314                           
  3315                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  3316  0195  2278               	fcall	_PIN_MANAGER_Initialize
  3317                           
  3318                           ;mcc.c: 55: OSCILLATOR_Initialize();
  3319  0196  21D0               	fcall	_OSCILLATOR_Initialize
  3320                           
  3321                           ;mcc.c: 56: WDT_Initialize();
  3322  0197  218A               	fcall	_WDT_Initialize
  3323                           
  3324                           ;mcc.c: 57: EUSART_Initialize();
  3325  0198  2204               	fcall	_EUSART_Initialize
  3326                           
  3327                           ;mcc.c: 58: MTOUCH_Initialize();
  3328  0199  2986               	ljmp	l2336
  3329  019A                     __end_of_SYSTEM_Initialize:	
  3330                           
  3331                           	psect	text2
  3332  018A                     __ptext2:	
  3333 ;; *************** function _WDT_Initialize *****************
  3334 ;; Defined at:
  3335 ;;		line 75 in file "mcc_generated_files/mcc.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg
  3344 ;; Tracked objects:
  3345 ;;		On entry : B1F/12
  3346 ;;		On exit  : B1F/1
  3347 ;;		Unchanged: B00/0
  3348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3349 ;;      Params:         0       0       0       0
  3350 ;;      Locals:         0       0       0       0
  3351 ;;      Temps:          0       0       0       0
  3352 ;;      Totals:         0       0       0       0
  3353 ;;Total ram usage:        0 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_SYSTEM_Initialize
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function _WDT_Initialize
  3364  018A                     _WDT_Initialize:	
  3365                           
  3366                           ;mcc.c: 78: WDTCON = 0x16;
  3367                           
  3368                           ;incstack = 0
  3369                           ; Regs used in _WDT_Initialize: [wreg]
  3370  018A  3016               	movlw	22
  3371  018B  0021               	movlb	1	; select bank1
  3372  018C  0097               	movwf	23	;volatile
  3373  018D  0008               	return
  3374  018E                     __end_of_WDT_Initialize:	
  3375                           
  3376                           	psect	text3
  3377  01BF                     __ptext3:	
  3378 ;; *************** function _PMD_Initialize *****************
  3379 ;; Defined at:
  3380 ;;		line 81 in file "mcc_generated_files/mcc.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		status,2
  3389 ;; Tracked objects:
  3390 ;;		On entry : B1F/0
  3391 ;;		On exit  : B1F/12
  3392 ;;		Unchanged: B00/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3394 ;;      Params:         0       0       0       0
  3395 ;;      Locals:         0       0       0       0
  3396 ;;      Temps:          0       0       0       0
  3397 ;;      Totals:         0       0       0       0
  3398 ;;Total ram usage:        0 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_SYSTEM_Initialize
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           
  3408                           ;psect for function _PMD_Initialize
  3409  01BF                     _PMD_Initialize:	
  3410                           
  3411                           ;mcc.c: 84: PMD0 = 0x00;
  3412                           
  3413                           ;incstack = 0
  3414                           ; Regs used in _PMD_Initialize: [status,2]
  3415  01BF  0032               	movlb	18	; select bank18
  3416  01C0  0191               	clrf	17	;volatile
  3417                           
  3418                           ;mcc.c: 86: PMD1 = 0x00;
  3419  01C1  0192               	clrf	18	;volatile
  3420                           
  3421                           ;mcc.c: 88: PMD2 = 0x00;
  3422  01C2  0193               	clrf	19	;volatile
  3423                           
  3424                           ;mcc.c: 90: PMD3 = 0x00;
  3425  01C3  0194               	clrf	20	;volatile
  3426                           
  3427                           ;mcc.c: 92: PMD4 = 0x00;
  3428  01C4  0195               	clrf	21	;volatile
  3429                           
  3430                           ;mcc.c: 94: PMD5 = 0x00;
  3431  01C5  0196               	clrf	22	;volatile
  3432  01C6  0008               	return
  3433  01C7                     __end_of_PMD_Initialize:	
  3434                           
  3435                           	psect	text4
  3436  0278                     __ptext4:	
  3437 ;; *************** function _PIN_MANAGER_Initialize *****************
  3438 ;; Defined at:
  3439 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : B1F/12
  3450 ;;		On exit  : B1F/1D
  3451 ;;		Unchanged: B00/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3453 ;;      Params:         0       0       0       0
  3454 ;;      Locals:         0       0       0       0
  3455 ;;      Temps:          0       0       0       0
  3456 ;;      Totals:         0       0       0       0
  3457 ;;Total ram usage:        0 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_SYSTEM_Initialize
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           
  3467                           ;psect for function _PIN_MANAGER_Initialize
  3468  0278                     _PIN_MANAGER_Initialize:	
  3469                           
  3470                           ;pin_manager.c: 62: LATA = 0x00;
  3471                           
  3472                           ;incstack = 0
  3473                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  3474  0278  0022               	movlb	2	; select bank2
  3475  0279  018C               	clrf	12	;volatile
  3476                           
  3477                           ;pin_manager.c: 67: TRISA = 0x05;
  3478  027A  3005               	movlw	5
  3479  027B  0021               	movlb	1	; select bank1
  3480  027C  008C               	movwf	12	;volatile
  3481                           
  3482                           ;pin_manager.c: 72: ANSELA = 0x37;
  3483  027D  3037               	movlw	55
  3484  027E  0023               	movlb	3	; select bank3
  3485  027F  008C               	movwf	12	;volatile
  3486                           
  3487                           ;pin_manager.c: 77: WPUA = 0x00;
  3488  0280  0024               	movlb	4	; select bank4
  3489  0281  018C               	clrf	12	;volatile
  3490                           
  3491                           ;pin_manager.c: 82: ODCONA = 0x00;
  3492  0282  0025               	movlb	5	; select bank5
  3493  0283  018C               	clrf	12	;volatile
  3494                           
  3495                           ;pin_manager.c: 91: RA4PPSbits.RA4PPS = 0x14;
  3496  0284  003D               	movlb	29	; select bank29
  3497  0285  0814               	movf	20,w	;volatile
  3498  0286  39E0               	andlw	-32
  3499  0287  3814               	iorlw	20
  3500  0288  0094               	movwf	20	;volatile
  3501  0289  0008               	return
  3502  028A                     __end_of_PIN_MANAGER_Initialize:	
  3503                           
  3504                           	psect	text5
  3505  01D0                     __ptext5:	
  3506 ;; *************** function _OSCILLATOR_Initialize *****************
  3507 ;; Defined at:
  3508 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2
  3517 ;; Tracked objects:
  3518 ;;		On entry : B1F/1D
  3519 ;;		On exit  : B1F/12
  3520 ;;		Unchanged: B00/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3522 ;;      Params:         0       0       0       0
  3523 ;;      Locals:         0       0       0       0
  3524 ;;      Temps:          0       0       0       0
  3525 ;;      Totals:         0       0       0       0
  3526 ;;Total ram usage:        0 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_SYSTEM_Initialize
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           
  3536                           ;psect for function _OSCILLATOR_Initialize
  3537  01D0                     _OSCILLATOR_Initialize:	
  3538                           
  3539                           ;mcc.c: 64: OSCCON1 = 0x60;
  3540                           
  3541                           ;incstack = 0
  3542                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3543  01D0  3060               	movlw	96
  3544  01D1  0032               	movlb	18	; select bank18
  3545  01D2  0099               	movwf	25	;volatile
  3546                           
  3547                           ;mcc.c: 66: OSCCON3 = 0x00;
  3548  01D3  019B               	clrf	27	;volatile
  3549                           
  3550                           ;mcc.c: 68: OSCEN = 0x00;
  3551  01D4  019D               	clrf	29	;volatile
  3552                           
  3553                           ;mcc.c: 70: OSCFRQ = 0x06;
  3554  01D5  3006               	movlw	6
  3555  01D6  009F               	movwf	31	;volatile
  3556                           
  3557                           ;mcc.c: 72: OSCTUNE = 0x00;
  3558  01D7  019E               	clrf	30	;volatile
  3559  01D8  0008               	return
  3560  01D9                     __end_of_OSCILLATOR_Initialize:	
  3561                           
  3562                           	psect	text6
  3563  0186                     __ptext6:	
  3564 ;; *************** function _MTOUCH_Initialize *****************
  3565 ;; Defined at:
  3566 ;;		line 67 in file "mcc_generated_files/mtouch/mtouch.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;		None
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;		None
  3571 ;; Return value:  Size  Location     Type
  3572 ;;                  1    wreg      void 
  3573 ;; Registers used:
  3574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3575 ;; Tracked objects:
  3576 ;;		On entry : B1F/3
  3577 ;;		On exit  : 1F/1
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3580 ;;      Params:         0       0       0       0
  3581 ;;      Locals:         0       0       0       0
  3582 ;;      Temps:          0       0       0       0
  3583 ;;      Totals:         0       0       0       0
  3584 ;;Total ram usage:        0 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    4
  3587 ;; This function calls:
  3588 ;;		_MTOUCH_Button_InitializeAll
  3589 ;;		_MTOUCH_Sensor_InitializeAll
  3590 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3591 ;;		_MTOUCH_Sensor_Scan_Initialize
  3592 ;; This function is called by:
  3593 ;;		_SYSTEM_Initialize
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           
  3598                           ;psect for function _MTOUCH_Initialize
  3599  0186                     _MTOUCH_Initialize:	
  3600  0186                     l2336:	
  3601                           ;incstack = 0
  3602                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3603                           
  3604                           
  3605                           ;mtouch.c: 69: MTOUCH_Sensor_InitializeAll();
  3606  0186  21B7               	fcall	_MTOUCH_Sensor_InitializeAll
  3607                           
  3608                           ;mtouch.c: 70: MTOUCH_Button_InitializeAll();
  3609  0187  22B0               	fcall	_MTOUCH_Button_InitializeAll
  3610                           
  3611                           ;mtouch.c: 71: MTOUCH_Sensor_Sampled_ResetAll();
  3612  0188  2266               	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  3613                           
  3614                           ;mtouch.c: 72: MTOUCH_Sensor_Scan_Initialize();
  3615  0189  298E               	ljmp	l1878
  3616  018A                     __end_of_MTOUCH_Initialize:	
  3617                           
  3618                           	psect	text7
  3619  01B7                     __ptext7:	
  3620 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  3621 ;; Defined at:
  3622 ;;		line 166 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  sensor          1    5[COMMON] enum E5394
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : B1F/3
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3636 ;;      Params:         0       0       0       0
  3637 ;;      Locals:         1       0       0       0
  3638 ;;      Temps:          0       0       0       0
  3639 ;;      Totals:         1       0       0       0
  3640 ;;Total ram usage:        1 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    3
  3643 ;; This function calls:
  3644 ;;		_MTOUCH_Sensor_Initialize
  3645 ;; This function is called by:
  3646 ;;		_MTOUCH_Initialize
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           
  3651                           ;psect for function _MTOUCH_Sensor_InitializeAll
  3652  01B7                     _MTOUCH_Sensor_InitializeAll:	
  3653                           
  3654                           ;mtouch_sensor.c: 168: enum mtouch_sensor_names sensor;
  3655                           ;mtouch_sensor.c: 169: for (sensor = 0; sensor < 1; sensor++)
  3656                           
  3657                           ;incstack = 0
  3658                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3659  01B7  01F5               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  3660  01B8                     l2204:	
  3661                           
  3662                           ;mtouch_sensor.c: 170: {
  3663                           ;mtouch_sensor.c: 171: MTOUCH_Sensor_Initialize(sensor);
  3664  01B8  0875               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  3665  01B9  22C8               	fcall	_MTOUCH_Sensor_Initialize
  3666  01BA  0AF5               	incf	MTOUCH_Sensor_InitializeAll@sensor,f
  3667  01BB  0875               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  3668  01BC  1D03               	btfss	3,2
  3669  01BD  0008               	return
  3670  01BE  29B8               	goto	l2204
  3671  01BF                     __end_of_MTOUCH_Sensor_InitializeAll:	
  3672                           
  3673                           	psect	text8
  3674  02C8                     __ptext8:	
  3675 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  3676 ;; Defined at:
  3677 ;;		line 142 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  sensor          1    wreg     enum E5394
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  sensor          1    4[COMMON] enum E5394
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      enum E5396
  3684 ;; Registers used:
  3685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/3
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3691 ;;      Params:         0       0       0       0
  3692 ;;      Locals:         1       0       0       0
  3693 ;;      Temps:          0       0       0       0
  3694 ;;      Totals:         1       0       0       0
  3695 ;;Total ram usage:        1 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    2
  3698 ;; This function calls:
  3699 ;;		_MTOUCH_Sensor_Enable
  3700 ;;		_Sensor_Sampled_Reset
  3701 ;;		___bmul
  3702 ;; This function is called by:
  3703 ;;		_MTOUCH_Sensor_InitializeAll
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           
  3708                           ;psect for function _MTOUCH_Sensor_Initialize
  3709  02C8                     _MTOUCH_Sensor_Initialize:	
  3710                           
  3711                           ;incstack = 0
  3712                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3713                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  3714  02C8  00F4               	movwf	MTOUCH_Sensor_Initialize@sensor
  3715                           
  3716                           ;mtouch_sensor.c: 144: switch(sensor)
  3717  02C9  2AD1               	goto	l2152
  3718  02CA                     l388:	
  3719                           ;mtouch_sensor.c: 145: {
  3720                           ;mtouch_sensor.c: 146: case 0:
  3721                           
  3722                           
  3723                           ;mtouch_sensor.c: 147: WPUAbits.WPUA2 = 0;
  3724  02CA  0024               	movlb	4	; select bank4
  3725  02CB  110C               	bcf	12,2	;volatile
  3726                           
  3727                           ;mtouch_sensor.c: 148: ANSELAbits.ANSA2 = 0;
  3728  02CC  0023               	movlb	3	; select bank3
  3729  02CD  110C               	bcf	12,2	;volatile
  3730                           
  3731                           ;mtouch_sensor.c: 149: TRISAbits.TRISA2 = 0;
  3732  02CE  0021               	movlb	1	; select bank1
  3733  02CF  110C               	bcf	12,2	;volatile
  3734                           
  3735                           ;mtouch_sensor.c: 150: break;
  3736  02D0  2AD6               	goto	l2154
  3737  02D1                     l2152:	
  3738  02D1  0874               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3739                           
  3740                           ; Switch size 1, requested type "space"
  3741                           ; Number of cases is 1, Range of values is 0 to 0
  3742                           ; switch strategies available:
  3743                           ; Name         Instructions Cycles
  3744                           ; simple_byte            4     3 (average)
  3745                           ; direct_byte            8     6 (fixed)
  3746                           ; jumptable            260     6 (fixed)
  3747                           ;	Chosen strategy is simple_byte
  3748  02D2  3A00               	xorlw	0	; case 0
  3749  02D3  1903               	skipnz
  3750  02D4  2ACA               	goto	l388
  3751  02D5  2AE3               	goto	l391
  3752  02D6                     l2154:	
  3753                           
  3754                           ;mtouch_sensor.c: 154: MTOUCH_Sensor_Enable(sensor);
  3755  02D6  0874               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3756  02D7  221D               	fcall	_MTOUCH_Sensor_Enable
  3757                           
  3758                           ;mtouch_sensor.c: 155: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
  3759  02D8  3009               	movlw	9
  3760  02D9  00F0               	movwf	___bmul@multiplicand
  3761  02DA  0874               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3762  02DB  21F8               	fcall	___bmul
  3763  02DC  3E61               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  3764  02DD                     i1L__ptext17:	
  3765                           
  3766                           ;psect for function _Sensor_Sampled_Reset
  3767  02DD                     i1L_Sensor_Sampled_Reset:	
  3768                           
  3769                           ;incstack = 0
  3770                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  3771                           ;Sensor_Sampled_Reset@sensor stored from wreg
  3772  02DD  00F0               	movwf	Sensor_Sampled_Reset@sensor
  3773  02DE                     i1Ll1994:	
  3774                           
  3775                           ;mtouch_sensor.c: 539: sensor->sampled = 0;
  3776  02DE  0870               	movf	Sensor_Sampled_Reset@sensor,w
  3777  02DF  3E08               	addlw	8
  3778  02E0  0086               	movwf	6
  3779  02E1  0187               	clrf	7
  3780  02E2  1081               	bcf	1,1
  3781  02E3                     i1Ll522:	
  3782  02E3                     l391:	
  3783  02E3  0008               	return
  3784  02E4                     __end_of_MTOUCH_Sensor_Initialize:	
  3785                           
  3786                           	psect	text9
  3787  021D                     __ptext9:	
  3788 ;; *************** function _MTOUCH_Sensor_Enable *****************
  3789 ;; Defined at:
  3790 ;;		line 454 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  sensor          1    wreg     enum E5394
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  sensor          1    3[COMMON] enum E5394
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 1F/1
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3804 ;;      Params:         0       0       0       0
  3805 ;;      Locals:         1       0       0       0
  3806 ;;      Temps:          0       0       0       0
  3807 ;;      Totals:         1       0       0       0
  3808 ;;Total ram usage:        1 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    1
  3811 ;; This function calls:
  3812 ;;		___bmul
  3813 ;; This function is called by:
  3814 ;;		_MTOUCH_Sensor_Initialize
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function _MTOUCH_Sensor_Enable
  3820  021D                     _MTOUCH_Sensor_Enable:	
  3821                           
  3822                           ;incstack = 0
  3823                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3824                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  3825  021D  00F3               	movwf	MTOUCH_Sensor_Enable@sensor
  3826                           
  3827                           ;mtouch_sensor.c: 456: if(sensor < 1)
  3828  021E  0873               	movf	MTOUCH_Sensor_Enable@sensor,w
  3829  021F  1D03               	btfss	3,2
  3830  0220  0008               	return
  3831                           
  3832                           ;mtouch_sensor.c: 457: mtouch_sensor[sensor].enabled = 1;
  3833  0221  3009               	movlw	9
  3834  0222  00F0               	movwf	___bmul@multiplicand
  3835  0223  0873               	movf	MTOUCH_Sensor_Enable@sensor,w
  3836  0224  21F8               	fcall	___bmul
  3837  0225  3E69               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  3838  0226  0086               	movwf	6
  3839  0227  0187               	clrf	7
  3840  0228  1401               	bsf	1,0
  3841  0229  0008               	return
  3842  022A                     __end_of_MTOUCH_Sensor_Enable:	
  3843                           
  3844                           	psect	text10
  3845  02B0                     __ptext10:	
  3846 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  3847 ;; Defined at:
  3848 ;;		line 142 in file "mcc_generated_files/mtouch/mtouch_button.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;		None
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  button          1    3[COMMON] enum E5405
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      void 
  3855 ;; Registers used:
  3856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/3
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3862 ;;      Params:         0       0       0       0
  3863 ;;      Locals:         1       0       0       0
  3864 ;;      Temps:          1       0       0       0
  3865 ;;      Totals:         2       0       0       0
  3866 ;;Total ram usage:        2 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:    2
  3869 ;; This function calls:
  3870 ;;		_MTOUCH_Button_Initialize
  3871 ;; This function is called by:
  3872 ;;		_MTOUCH_Initialize
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           
  3877                           ;psect for function _MTOUCH_Button_InitializeAll
  3878  02B0                     _MTOUCH_Button_InitializeAll:	
  3879                           
  3880                           ;mtouch_button.c: 144: enum mtouch_button_names button;
  3881                           ;mtouch_button.c: 146: __builtin_memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_b
      +                          utton_init));
  3882                           
  3883                           ;incstack = 0
  3884                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3885  02B0  304B               	movlw	low (_mtouch_button| 0)
  3886  02B1  0086               	movwf	6
  3887  02B2  309D               	movlw	low (_mtouch_button_init| (0+32768))
  3888  02B3  0187               	clrf	7
  3889  02B4  0084               	movwf	4
  3890  02B5  3082               	movlw	high (_mtouch_button_init| (0+32768))
  3891  02B6  0085               	movwf	5
  3892  02B7  3010               	movlw	16
  3893  02B8  00F2               	movwf	??_MTOUCH_Button_InitializeAll
  3894  02B9  0872               	movf	??_MTOUCH_Button_InitializeAll,w
  3895  02BA  1903               	skipnz
  3896  02BB  2AC0               	goto	l2212
  3897  02BC                     u124m0:	
  3898  02BC  0012               	moviw fsr0++
  3899  02BD  001E               	movwi fsr1++
  3900  02BE  0BF2               	decfsz	??_MTOUCH_Button_InitializeAll,f
  3901  02BF  2ABC               	goto	u124m0
  3902  02C0                     l2212:	
  3903                           
  3904                           ;mtouch_button.c: 148: for (button = 0; button < 1; button++)
  3905  02C0  01F3               	clrf	MTOUCH_Button_InitializeAll@button
  3906  02C1                     l2218:	
  3907                           
  3908                           ;mtouch_button.c: 149: {
  3909                           ;mtouch_button.c: 150: MTOUCH_Button_Initialize(button);
  3910  02C1  0873               	movf	MTOUCH_Button_InitializeAll@button,w
  3911  02C2  2303               	fcall	_MTOUCH_Button_Initialize
  3912  02C3  0AF3               	incf	MTOUCH_Button_InitializeAll@button,f
  3913  02C4  0873               	movf	MTOUCH_Button_InitializeAll@button,w
  3914  02C5  1D03               	btfss	3,2
  3915  02C6  0008               	return
  3916  02C7  2AC1               	goto	l2218
  3917  02C8                     __end_of_MTOUCH_Button_InitializeAll:	
  3918                           
  3919                           	psect	text11
  3920  0204                     __ptext11:	
  3921 ;; *************** function _EUSART_Initialize *****************
  3922 ;; Defined at:
  3923 ;;		line 55 in file "mcc_generated_files/eusart.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;		None
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;		None
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg
  3932 ;; Tracked objects:
  3933 ;;		On entry : B1F/1
  3934 ;;		On exit  : B1F/3
  3935 ;;		Unchanged: B00/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3937 ;;      Params:         0       0       0       0
  3938 ;;      Locals:         0       0       0       0
  3939 ;;      Temps:          0       0       0       0
  3940 ;;      Totals:         0       0       0       0
  3941 ;;Total ram usage:        0 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_SYSTEM_Initialize
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _EUSART_Initialize
  3952  0204                     _EUSART_Initialize:	
  3953                           
  3954                           ;eusart.c: 60: BAUD1CON = 0x08;
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _EUSART_Initialize: [wreg]
  3958  0204  3008               	movlw	8
  3959  0205  0023               	movlb	3	; select bank3
  3960  0206  009F               	movwf	31	;volatile
  3961                           
  3962                           ;eusart.c: 63: RC1STA = 0x80;
  3963  0207  3080               	movlw	128
  3964  0208  009D               	movwf	29	;volatile
  3965                           
  3966                           ;eusart.c: 66: TX1STA = 0x24;
  3967  0209  3024               	movlw	36
  3968  020A  009E               	movwf	30	;volatile
  3969                           
  3970                           ;eusart.c: 69: SP1BRGL = 0xA0;
  3971  020B  30A0               	movlw	160
  3972  020C  009B               	movwf	27	;volatile
  3973                           
  3974                           ;eusart.c: 72: SP1BRGH = 0x01;
  3975  020D  3001               	movlw	1
  3976  020E  009C               	movwf	28	;volatile
  3977  020F  0008               	return
  3978  0210                     __end_of_EUSART_Initialize:	
  3979                           
  3980                           	psect	text12
  3981  0210                     __ptext12:	
  3982 ;; *************** function _MTOUCH_Service_Mainloop *****************
  3983 ;; Defined at:
  3984 ;;		line 81 in file "mcc_generated_files/mtouch/mtouch.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      unsigned char 
  3991 ;; Registers used:
  3992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 1C/1
  3995 ;;		On exit  : 1F/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3998 ;;      Params:         0       0       0       0
  3999 ;;      Locals:         0       0       0       0
  4000 ;;      Temps:          0       0       0       0
  4001 ;;      Totals:         0       0       0       0
  4002 ;;Total ram usage:        0 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    6
  4005 ;; This function calls:
  4006 ;;		_MTOUCH_Button_ServiceAll
  4007 ;;		_MTOUCH_Sensor_SampleAll
  4008 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4009 ;;		_MTOUCH_Tick
  4010 ;; This function is called by:
  4011 ;;		_main
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _MTOUCH_Service_Mainloop
  4017  0210                     _MTOUCH_Service_Mainloop:	
  4018                           
  4019                           ;mtouch.c: 85: mtouch_time_toScan = 1;
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4023  0210  0020               	movlb	0	; select bank0
  4024  0211  01CA               	clrf	_mtouch_time_toScan
  4025  0212  0ACA               	incf	_mtouch_time_toScan,f
  4026                           
  4027                           ;mtouch.c: 88: {
  4028                           ;mtouch.c: 89: if(MTOUCH_Sensor_SampleAll() == 0)
  4029                           
  4030                           ;mtouch.c: 87: if(mtouch_time_toScan)
  4031  0213  21C7               	fcall	_MTOUCH_Sensor_SampleAll
  4032  0214  3A00               	xorlw	0
  4033  0215  1903               	btfsc	3,2
  4034  0216  0008               	return
  4035                           
  4036                           ;mtouch.c: 91: MTOUCH_Button_ServiceAll();
  4037  0217  21AF               	fcall	_MTOUCH_Button_ServiceAll
  4038                           
  4039                           ;mtouch.c: 92: MTOUCH_Sensor_Sampled_ResetAll();
  4040  0218  2266               	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4041                           
  4042                           ;mtouch.c: 93: MTOUCH_Tick();
  4043  0219  2183               	fcall	_MTOUCH_Tick
  4044                           
  4045                           ;mtouch.c: 94: mtouch_time_toScan = 0;
  4046  021A  0020               	movlb	0	; select bank0
  4047  021B  01CA               	clrf	_mtouch_time_toScan
  4048  021C  0008               	return
  4049  021D                     __end_of_MTOUCH_Service_Mainloop:	
  4050                           
  4051                           	psect	text13
  4052  0183                     __ptext13:	
  4053 ;; *************** function _MTOUCH_Tick *****************
  4054 ;; Defined at:
  4055 ;;		line 108 in file "mcc_generated_files/mtouch/mtouch.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;		None
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;		None
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4069 ;;      Params:         0       0       0       0
  4070 ;;      Locals:         0       0       0       0
  4071 ;;      Temps:          0       0       0       0
  4072 ;;      Totals:         0       0       0       0
  4073 ;;Total ram usage:        0 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; Hardware stack levels required when called:    2
  4076 ;; This function calls:
  4077 ;;		_MTOUCH_Button_Tick
  4078 ;; This function is called by:
  4079 ;;		_MTOUCH_Service_Mainloop
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           
  4084                           ;psect for function _MTOUCH_Tick
  4085  0183                     _MTOUCH_Tick:	
  4086                           
  4087                           ;mtouch.c: 110: MTOUCH_Button_Tick();
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4091  0183  2984               	ljmp	l2234
  4092  0184                     __end_of_MTOUCH_Tick:	
  4093                           
  4094                           	psect	text14
  4095  0184                     __ptext14:	
  4096 ;; *************** function _MTOUCH_Button_Tick *****************
  4097 ;; Defined at:
  4098 ;;		line 264 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4112 ;;      Params:         0       0       0       0
  4113 ;;      Locals:         0       0       0       0
  4114 ;;      Temps:          0       0       0       0
  4115 ;;      Totals:         0       0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    1
  4119 ;; This function calls:
  4120 ;;		_Button_Tick_helper
  4121 ;; This function is called by:
  4122 ;;		_MTOUCH_Tick
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _MTOUCH_Button_Tick
  4128  0184                     _MTOUCH_Button_Tick:	
  4129  0184                     l2234:	
  4130                           ;incstack = 0
  4131                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4132                           
  4133                           
  4134                           ;mtouch_button.c: 266: Button_Tick_helper(&mtouch_button[0]);
  4135  0184  304B               	movlw	(low (_mtouch_button| 0))& (0+255)
  4136  0185  2B42               	ljmp	_Button_Tick_helper
  4137  0186                     __end_of_MTOUCH_Button_Tick:	
  4138                           
  4139                           	psect	text15
  4140  0342                     __ptext15:	
  4141 ;; *************** function _Button_Tick_helper *****************
  4142 ;; Defined at:
  4143 ;;		line 268 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  button          1    wreg     PTR struct .
  4146 ;;		 -> mtouch_button(16), 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  button          1    2[COMMON] PTR struct .
  4149 ;;		 -> mtouch_button(16), 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  1    wreg      void 
  4152 ;; Registers used:
  4153 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4159 ;;      Params:         0       0       0       0
  4160 ;;      Locals:         1       0       0       0
  4161 ;;      Temps:          2       0       0       0
  4162 ;;      Totals:         3       0       0       0
  4163 ;;Total ram usage:        3 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		_MTOUCH_Button_Tick
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           
  4173                           ;psect for function _Button_Tick_helper
  4174  0342                     _Button_Tick_helper:	
  4175                           
  4176                           ;incstack = 0
  4177                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  4178                           ;Button_Tick_helper@button stored from wreg
  4179  0342  00F2               	movwf	Button_Tick_helper@button
  4180                           
  4181                           ;mtouch_button.c: 271: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  4182  0343  3E02               	addlw	2
  4183  0344  0086               	movwf	6
  4184  0345  3002               	movlw	2
  4185  0346  0187               	clrf	7
  4186  0347  0601               	xorwf	1,w
  4187  0348  1D03               	btfss	3,2
  4188  0349  0008               	return
  4189                           
  4190                           ;mtouch_button.c: 272: {
  4191                           ;mtouch_button.c: 273: (button->counter)++;
  4192  034A  0872               	movf	Button_Tick_helper@button,w
  4193  034B  235E               	fcall	PL54	;call to abstracted procedure
  4194  034C  1803               	skipnc
  4195  034D  0A81               	incf	1,f
  4196                           
  4197                           ;mtouch_button.c: 274: if (button->counter == (mtouch_button_statecounter_t)0)
  4198  034E  0872               	movf	Button_Tick_helper@button,w
  4199  034F  3E0A               	addlw	10
  4200  0350  0086               	movwf	6
  4201  0351  0187               	clrf	7
  4202  0352  0016               	moviw fsr1++
  4203  0353  0401               	iorwf	1,w
  4204  0354  1D03               	btfss	3,2
  4205  0355  0008               	return
  4206                           
  4207                           ;mtouch_button.c: 275: {
  4208                           ;mtouch_button.c: 276: button->counter = (mtouch_button_statecounter_t)0xFFFF;
  4209  0356  0872               	movf	Button_Tick_helper@button,w
  4210  0357  3E0A               	addlw	10
  4211  0358  0086               	movwf	6
  4212  0359  30FF               	movlw	255
  4213  035A  0187               	clrf	7
  4214  035B  3FC0               	movwi [0]fsr1
  4215  035C  3FC1               	movwi [1]fsr1
  4216  035D  0008               	return
  4217  035E                     __end_of_Button_Tick_helper:	
  4218  035E                     PL54:	
  4219  035E  3E0A               	addlw	10
  4220  035F  0086               	movwf	6
  4221  0360  3001               	movlw	1
  4222  0361  0781               	addwf	1,f
  4223  0362  3141               	addfsr 1,1
  4224  0363  0008               	return
  4225  0364                     __end_ofPL54:	
  4226                           
  4227                           	psect	text16
  4228  0266                     __ptext16:	
  4229 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  4230 ;; Defined at:
  4231 ;;		line 520 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  sensor          1    2[COMMON] PTR struct .
  4236 ;;		 -> mtouch_sensor(9), 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/3
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4246 ;;      Params:         0       0       0       0
  4247 ;;      Locals:         1       0       0       0
  4248 ;;      Temps:          1       0       0       0
  4249 ;;      Totals:         2       0       0       0
  4250 ;;Total ram usage:        2 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    1
  4253 ;; This function calls:
  4254 ;;		_Sensor_Sampled_Reset
  4255 ;; This function is called by:
  4256 ;;		_MTOUCH_Initialize
  4257 ;;		_MTOUCH_Service_Mainloop
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  4263  0266                     _MTOUCH_Sensor_Sampled_ResetAll:	
  4264                           
  4265                           ;mtouch_sensor.c: 522: mtouch_sensor_t* sensor;
  4266                           ;mtouch_sensor.c: 523: for(sensor = &mtouch_sensor[0];sensor<= &mtouch_sensor[1-1];senso
      +                          r++)
  4267                           
  4268                           ;incstack = 0
  4269                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  4270  0266  3061               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  4271  0267  00F2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  4272  0268                     L2:	
  4273  0268  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4274  0269  0872               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4275  026A  0271               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4276  026B  1C03               	btfss	3,0
  4277  026C  0008               	return
  4278                           
  4279                           ;mtouch_sensor.c: 524: {
  4280                           ;mtouch_sensor.c: 525: Sensor_Sampled_Reset(sensor);
  4281  026D  0872               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4282  026E                     i2L__ptext17:	
  4283                           
  4284                           ;psect for function _Sensor_Sampled_Reset
  4285  026E                     i2L_Sensor_Sampled_Reset:	
  4286                           
  4287                           ;incstack = 0
  4288                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4289                           ;Sensor_Sampled_Reset@sensor stored from wreg
  4290  026E  00F0               	movwf	Sensor_Sampled_Reset@sensor
  4291  026F                     i2Ll1994:	
  4292                           
  4293                           ;mtouch_sensor.c: 539: sensor->sampled = 0;
  4294  026F  0870               	movf	Sensor_Sampled_Reset@sensor,w
  4295  0270  3E08               	addlw	8
  4296  0271  0086               	movwf	6
  4297  0272  0187               	clrf	7
  4298  0273  1081               	bcf	1,1
  4299  0274                     i2Ll522:	
  4300  0274  3009               	movlw	9
  4301  0275  07F2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  4302  0276  3061               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  4303  0277  2A68               	goto	L2
  4304  0278                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  4305                           
  4306                           	psect	text17
  4307  0000                     __ptext17:	
  4308 ;; *************** function _Sensor_Sampled_Reset *****************
  4309 ;; Defined at:
  4310 ;;		line 537 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  sensor          1    wreg     PTR struct .
  4313 ;;		 -> mtouch_sensor(9), 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  sensor          1    0[COMMON] PTR struct .
  4316 ;;		 -> mtouch_sensor(9), 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/1
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4326 ;;      Params:         0       0       0       0
  4327 ;;      Locals:         1       0       0       0
  4328 ;;      Temps:          0       0       0       0
  4329 ;;      Totals:         1       0       0       0
  4330 ;;Total ram usage:        1 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_MTOUCH_Sensor_Initialize
  4336 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340  0000                     _Sensor_Sampled_Reset:	
  4341                           ;psect for function _Sensor_Sampled_Reset
  4342                           
  4343  0000                     __end_of_Sensor_Sampled_Reset:	
  4344                           ;mtouch_sensor.c: 539: sensor->sampled = 0;
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4348                           ;Sensor_Sampled_Reset@sensor stored from wreg
  4349                           
  4350                           
  4351                           	psect	text18
  4352  01C7                     __ptext18:	
  4353 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  4354 ;; Defined at:
  4355 ;;		line 197 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;  sensor          1   13[COMMON] enum E5394
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  1    wreg      unsigned char 
  4362 ;; Registers used:
  4363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 1F/0
  4366 ;;		On exit  : 1F/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4369 ;;      Params:         0       0       0       0
  4370 ;;      Locals:         1       0       0       0
  4371 ;;      Temps:          0       0       0       0
  4372 ;;      Totals:         1       0       0       0
  4373 ;;Total ram usage:        1 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    5
  4376 ;; This function calls:
  4377 ;;		_Sensor_Service
  4378 ;; This function is called by:
  4379 ;;		_MTOUCH_Service_Mainloop
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _MTOUCH_Sensor_SampleAll
  4385  01C7                     _MTOUCH_Sensor_SampleAll:	
  4386                           
  4387                           ;mtouch_sensor.c: 199: enum mtouch_sensor_names sensor;
  4388                           ;mtouch_sensor.c: 200: for (sensor = 0; sensor < 1; sensor++)
  4389                           
  4390                           ;incstack = 0
  4391                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4392  01C7  01FD               	clrf	MTOUCH_Sensor_SampleAll@sensor
  4393  01C8                     l2348:	
  4394                           
  4395                           ;mtouch_sensor.c: 201: {
  4396                           ;mtouch_sensor.c: 202: if(Sensor_Service(sensor)!= MTOUCH_SENSOR_ERROR_none)
  4397  01C8  087D               	movf	MTOUCH_Sensor_SampleAll@sensor,w
  4398  01C9  23FA               	fcall	_Sensor_Service
  4399  01CA  3A00               	xorlw	0
  4400  01CB  1D03               	btfss	3,2
  4401                           
  4402                           ;mtouch_sensor.c: 203: return 0;
  4403  01CC  3400               	retlw	0
  4404  01CD  0FFD               	incfsz	MTOUCH_Sensor_SampleAll@sensor,f
  4405                           
  4406                           ;mtouch_sensor.c: 204: }
  4407                           ;mtouch_sensor.c: 205: return 1;
  4408  01CE  3401               	retlw	1
  4409  01CF  29C8               	goto	l2348
  4410  01D0                     __end_of_MTOUCH_Sensor_SampleAll:	
  4411                           
  4412                           	psect	text19
  4413  03FA                     __ptext19:	
  4414 ;; *************** function _Sensor_Service *****************
  4415 ;; Defined at:
  4416 ;;		line 214 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;  name            1    wreg     enum E5394
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  name            1    6[BANK0 ] enum E5394
  4421 ;;  sensor          1    8[BANK0 ] PTR struct .
  4422 ;;		 -> mtouch_sensor(9), 
  4423 ;;  error           1    7[BANK0 ] enum E5396
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      enum E5396
  4426 ;; Registers used:
  4427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : 1F/0
  4430 ;;		On exit  : 1F/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4433 ;;      Params:         0       0       0       0
  4434 ;;      Locals:         0       3       0       0
  4435 ;;      Temps:          0       0       0       0
  4436 ;;      Totals:         0       3       0       0
  4437 ;;Total ram usage:        3 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    4
  4440 ;; This function calls:
  4441 ;;		_Sensor_Acquisition
  4442 ;;		_Sensor_DefaultCallback
  4443 ;;		_Sensor_RawSample_Update
  4444 ;;		_Sensor_setSampled
  4445 ;;		___bmul
  4446 ;; This function is called by:
  4447 ;;		_MTOUCH_Sensor_SampleAll
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           
  4452                           ;psect for function _Sensor_Service
  4453  03FA                     _Sensor_Service:	
  4454                           
  4455                           ;incstack = 0
  4456                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4457                           ;Sensor_Service@name stored from wreg
  4458  03FA  00A6               	movwf	Sensor_Service@name
  4459                           
  4460                           ;mtouch_sensor.c: 216: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  4461  03FB  3009               	movlw	9
  4462  03FC  00F0               	movwf	___bmul@multiplicand
  4463  03FD  0826               	movf	Sensor_Service@name,w
  4464  03FE  21F8               	fcall	___bmul
  4465  03FF  3E61               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  4466  0400  0020               	movlb	0	; select bank0
  4467  0401  00A8               	movwf	Sensor_Service@sensor
  4468                           
  4469                           ;mtouch_sensor.c: 217: enum mtouch_sensor_error error = Sensor_Acquisition(sensor);
  4470  0402  2506               	fcall	_Sensor_Acquisition
  4471  0403  00A7               	movwf	Sensor_Service@error
  4472                           
  4473                           ;mtouch_sensor.c: 220: switch(error)
  4474  0404  2C12               	goto	l2258
  4475  0405                     l2252:	
  4476                           
  4477                           ;mtouch_sensor.c: 223: {
  4478                           ;mtouch_sensor.c: 224: Sensor_RawSample_Update(sensor);
  4479  0405  0828               	movf	Sensor_Service@sensor,w
  4480  0406  2254               	fcall	_Sensor_RawSample_Update
  4481                           
  4482                           ;mtouch_sensor.c: 225: Sensor_setSampled(sensor);
  4483  0407  0828               	movf	Sensor_Service@sensor,w
  4484  0408                     i3L__ptext20:	
  4485                           
  4486                           ;psect for function _Sensor_setSampled
  4487  0408                     i3L_Sensor_setSampled:	
  4488                           
  4489                           ;incstack = 0
  4490                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  4491                           ;Sensor_setSampled@sensor stored from wreg
  4492  0408  00F0               	movwf	Sensor_setSampled@sensor
  4493  0409                     i3Ll2196:	
  4494                           
  4495                           ;mtouch_sensor.c: 544: sensor->sampled = 1;
  4496  0409  0870               	movf	Sensor_setSampled@sensor,w
  4497  040A  3E08               	addlw	8
  4498  040B  0086               	movwf	6
  4499  040C  0187               	clrf	7
  4500  040D  1481               	bsf	1,1
  4501  040E                     i3Ll525:	
  4502                           
  4503                           ;mtouch_sensor.c: 226: callback_sampled(name);
  4504  040E  0826               	movf	Sensor_Service@name,w
  4505  040F  00F0               	movwf	Sensor_DefaultCallback@sensor
  4506  0410  2182               	fcall	_Sensor_DefaultCallback
  4507                           
  4508                           ;mtouch_sensor.c: 227: }
  4509                           ;mtouch_sensor.c: 228: break;
  4510  0411  2C20               	goto	l2260
  4511  0412                     l2258:	
  4512  0412  0827               	movf	Sensor_Service@error,w
  4513                           
  4514                           ; Switch size 1, requested type "space"
  4515                           ; Number of cases is 4, Range of values is 0 to 255
  4516                           ; switch strategies available:
  4517                           ; Name         Instructions Cycles
  4518                           ; simple_byte           13     7 (average)
  4519                           ; jumptable            260     6 (fixed)
  4520                           ;	Chosen strategy is simple_byte
  4521  0413  3A00               	xorlw	0	; case 0
  4522  0414  1903               	skipnz
  4523  0415  2C05               	goto	l2252
  4524  0416  3AFD               	xorlw	253	; case 253
  4525  0417  1903               	skipnz
  4526  0418  2C20               	goto	l2260
  4527  0419  3A03               	xorlw	3	; case 254
  4528  041A  1903               	skipnz
  4529  041B  2C20               	goto	l2260
  4530  041C  3A01               	xorlw	1	; case 255
  4531  041D  1903               	skipnz
  4532  041E  2C20               	goto	l2260
  4533  041F  2C20               	goto	l2260
  4534  0420                     l2260:	
  4535                           
  4536                           ;mtouch_sensor.c: 237: return error;
  4537  0420  0827               	movf	Sensor_Service@error,w
  4538  0421  0008               	return
  4539  0422                     __end_of_Sensor_Service:	
  4540                           
  4541                           	psect	text20
  4542  0000                     __ptext20:	
  4543 ;; *************** function _Sensor_setSampled *****************
  4544 ;; Defined at:
  4545 ;;		line 542 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;  sensor          1    wreg     PTR struct .
  4548 ;;		 -> mtouch_sensor(9), 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;  sensor          1    0[COMMON] PTR struct .
  4551 ;;		 -> mtouch_sensor(9), 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4556 ;; Tracked objects:
  4557 ;;		On entry : 1F/0
  4558 ;;		On exit  : 1F/0
  4559 ;;		Unchanged: 1F/0
  4560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4561 ;;      Params:         0       0       0       0
  4562 ;;      Locals:         1       0       0       0
  4563 ;;      Temps:          0       0       0       0
  4564 ;;      Totals:         1       0       0       0
  4565 ;;Total ram usage:        1 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; This function calls:
  4568 ;;		Nothing
  4569 ;; This function is called by:
  4570 ;;		_Sensor_Service
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574  0000                     _Sensor_setSampled:	
  4575                           ;psect for function _Sensor_setSampled
  4576                           
  4577  0000                     __end_of_Sensor_setSampled:	
  4578                           ;mtouch_sensor.c: 544: sensor->sampled = 1;
  4579                           
  4580                           ;incstack = 0
  4581                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  4582                           ;Sensor_setSampled@sensor stored from wreg
  4583                           
  4584                           
  4585                           	psect	text21
  4586  0254                     __ptext21:	
  4587 ;; *************** function _Sensor_RawSample_Update *****************
  4588 ;; Defined at:
  4589 ;;		line 403 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;  sensor          1    wreg     PTR struct .
  4592 ;;		 -> mtouch_sensor(9), 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  sensor          1    0[COMMON] PTR struct .
  4595 ;;		 -> mtouch_sensor(9), 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      void 
  4598 ;; Registers used:
  4599 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4600 ;; Tracked objects:
  4601 ;;		On entry : 1F/0
  4602 ;;		On exit  : 1F/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4605 ;;      Params:         0       0       0       0
  4606 ;;      Locals:         1       0       0       0
  4607 ;;      Temps:          0       0       0       0
  4608 ;;      Totals:         1       0       0       0
  4609 ;;Total ram usage:        1 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		_Sensor_Service
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           
  4619                           ;psect for function _Sensor_RawSample_Update
  4620  0254                     _Sensor_RawSample_Update:	
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _Sensor_RawSample_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  4624                           ;Sensor_RawSample_Update@sensor stored from wreg
  4625  0254  00F0               	movwf	Sensor_RawSample_Update@sensor
  4626                           
  4627                           ;mtouch_sensor.c: 405: if (INTCONbits.GIE == (uint8_t)1)
  4628  0255  1F8B               	btfss	11,7	;volatile
  4629  0256  2A5B               	goto	l2194
  4630                           
  4631                           ;mtouch_sensor.c: 406: {
  4632                           ;mtouch_sensor.c: 407: INTCONbits.GIE = (uint8_t)0;
  4633  0257  138B               	bcf	11,7	;volatile
  4634                           
  4635                           ;mtouch_sensor.c: 408: sensor->rawSample = packet_sample;
  4636  0258  225E               	fcall	PL44	;call to abstracted procedure
  4637                           
  4638                           ;mtouch_sensor.c: 409: INTCONbits.GIE = (uint8_t)1;
  4639  0259  178B               	bsf	11,7	;volatile
  4640                           
  4641                           ;mtouch_sensor.c: 410: }
  4642  025A  0008               	return
  4643  025B                     l2194:	
  4644                           
  4645                           ;mtouch_sensor.c: 411: else
  4646                           ;mtouch_sensor.c: 412: {
  4647                           ;mtouch_sensor.c: 413: sensor->rawSample = packet_sample;
  4648  025B  0870               	movf	Sensor_RawSample_Update@sensor,w
  4649  025C  225E               	fcall	PL44	;call to abstracted procedure
  4650  025D  0008               	return
  4651  025E                     __end_of_Sensor_RawSample_Update:	
  4652  025E                     PL44:	
  4653  025E  3E06               	addlw	6
  4654  025F  0086               	movwf	6
  4655  0260  0187               	clrf	7
  4656  0261  0841               	movf	_packet_sample,w
  4657  0262  3FC0               	movwi [0]fsr1
  4658  0263  0842               	movf	_packet_sample+1,w
  4659  0264  3FC1               	movwi [1]fsr1
  4660  0265  0008               	return
  4661  0266                     __end_ofPL44:	
  4662                           
  4663                           	psect	text22
  4664  0182                     __ptext22:	
  4665 ;; *************** function _Sensor_DefaultCallback *****************
  4666 ;; Defined at:
  4667 ;;		line 423 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;  sensor          1    0[COMMON] enum E5394
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;		None
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  1    wreg      void 
  4674 ;; Registers used:
  4675 ;;		None
  4676 ;; Tracked objects:
  4677 ;;		On entry : 1F/0
  4678 ;;		On exit  : 1F/0
  4679 ;;		Unchanged: 1F/0
  4680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4681 ;;      Params:         1       0       0       0
  4682 ;;      Locals:         0       0       0       0
  4683 ;;      Temps:          0       0       0       0
  4684 ;;      Totals:         1       0       0       0
  4685 ;;Total ram usage:        1 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; This function calls:
  4688 ;;		Nothing
  4689 ;; This function is called by:
  4690 ;;		_Sensor_Service
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           
  4695                           ;psect for function _Sensor_DefaultCallback
  4696  0182                     _Sensor_DefaultCallback:	
  4697                           
  4698                           ;incstack = 0
  4699                           ; Regs used in _Sensor_DefaultCallback: []
  4700  0182  0008               	return
  4701  0183                     __end_of_Sensor_DefaultCallback:	
  4702                           
  4703                           	psect	text23
  4704  0506                     __ptext23:	
  4705 ;; *************** function _Sensor_Acquisition *****************
  4706 ;; Defined at:
  4707 ;;		line 251 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  sensor          1    wreg     PTR struct .
  4710 ;;		 -> mtouch_sensor(9), 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  sensor          1    5[BANK0 ] PTR struct .
  4713 ;;		 -> mtouch_sensor(9), 
  4714 ;;  retry           1    4[BANK0 ] unsigned char 
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      enum E5396
  4717 ;; Registers used:
  4718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 1F/0
  4721 ;;		On exit  : 1F/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4724 ;;      Params:         0       0       0       0
  4725 ;;      Locals:         0       2       0       0
  4726 ;;      Temps:          0       4       0       0
  4727 ;;      Totals:         0       6       0       0
  4728 ;;Total ram usage:        6 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    3
  4731 ;; This function calls:
  4732 ;;		_Sensor_Acq_ExecutePacket
  4733 ;;		_Sensor_isEnabled
  4734 ;;		_Sensor_setActive
  4735 ;;		_Sensor_setInactive
  4736 ;;		_abs
  4737 ;; This function is called by:
  4738 ;;		_Sensor_Service
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _Sensor_Acquisition
  4744  0506                     _Sensor_Acquisition:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4748                           ;Sensor_Acquisition@sensor stored from wreg
  4749  0506  00A5               	movwf	Sensor_Acquisition@sensor
  4750                           
  4751                           ;mtouch_sensor.c: 254: uint8_t retry = (uint8_t)5;
  4752  0507  3005               	movlw	5
  4753  0508  00A4               	movwf	Sensor_Acquisition@retry
  4754                           
  4755                           ;mtouch_sensor.c: 256: if(!Sensor_isEnabled(sensor))
  4756  0509  0825               	movf	Sensor_Acquisition@sensor,w
  4757  050A  21ED               	fcall	_Sensor_isEnabled
  4758  050B  3A00               	xorlw	0
  4759  050C  1903               	btfsc	3,2
  4760                           
  4761                           ;mtouch_sensor.c: 257: return MTOUCH_SENSOR_ERROR_none;
  4762  050D  3400               	retlw	0
  4763  050E  2D12               	goto	l2174
  4764  050F                     l2166:	
  4765                           
  4766                           ;mtouch_sensor.c: 260: {
  4767                           ;mtouch_sensor.c: 261: retry--;
  4768  050F  0BA4               	decfsz	Sensor_Acquisition@retry,f
  4769                           
  4770                           ;mtouch_sensor.c: 262: if(retry == 0)
  4771  0510  2D12               	goto	l2174
  4772                           
  4773                           ;mtouch_sensor.c: 263: {
  4774                           ;mtouch_sensor.c: 264: return MTOUCH_SENSOR_ERROR_tooManyRetries;
  4775  0511  34FC               	retlw	252
  4776  0512                     l2174:	
  4777  0512  0825               	movf	Sensor_Acquisition@sensor,w
  4778  0513  24C8               	fcall	_Sensor_Acq_ExecutePacket
  4779  0514  3A00               	xorlw	0
  4780  0515  1D03               	skipz
  4781  0516  2D0F               	goto	l2166
  4782                           
  4783                           ;mtouch_sensor.c: 265: }
  4784                           ;mtouch_sensor.c: 266: }
  4785                           ;mtouch_sensor.c: 268: if((mtouch_sensor_packetsample_t)abs(packet_sample - sensor->rawS
      +                          ample) > (mtouch_sensor_packetsample_t)(sensor->oversampling)<<2)
  4786  0517  0842               	movf	_packet_sample+1,w
  4787  0518  00F1               	movwf	abs@a+1
  4788  0519  0841               	movf	_packet_sample,w
  4789  051A  00F0               	movwf	abs@a
  4790  051B  0825               	movf	Sensor_Acquisition@sensor,w
  4791  051C  3E06               	addlw	6
  4792  051D  0086               	movwf	6
  4793  051E  0187               	clrf	7
  4794  051F  3F40               	moviw [0]fsr1
  4795  0520  00A0               	movwf	??_Sensor_Acquisition
  4796  0521  3F41               	moviw [1]fsr1
  4797  0522  00A1               	movwf	??_Sensor_Acquisition+1
  4798  0523  0820               	movf	??_Sensor_Acquisition,w
  4799  0524  02F0               	subwf	abs@a,f
  4800  0525  0821               	movf	??_Sensor_Acquisition+1,w
  4801  0526  3BF1               	subwfb	abs@a+1,f
  4802  0527  2246               	fcall	_abs
  4803  0528  0825               	movf	Sensor_Acquisition@sensor,w
  4804  0529  3E05               	addlw	5
  4805  052A  0086               	movwf	6
  4806  052B  0187               	clrf	7
  4807  052C  0801               	movf	1,w
  4808  052D  00A2               	movwf	??_Sensor_Acquisition+2
  4809  052E  01A3               	clrf	??_Sensor_Acquisition+3
  4810  052F  35A2               	lslf	??_Sensor_Acquisition+2,f
  4811  0530  0DA3               	rlf	??_Sensor_Acquisition+3,f
  4812  0531  35A2               	lslf	??_Sensor_Acquisition+2,f
  4813  0532  0DA3               	rlf	??_Sensor_Acquisition+3,f
  4814  0533  0871               	movf	?_abs+1,w
  4815  0534  0223               	subwf	??_Sensor_Acquisition+3,w
  4816  0535  1D03               	skipz
  4817  0536  2D39               	goto	u1215
  4818  0537  0870               	movf	?_abs,w
  4819  0538  0222               	subwf	??_Sensor_Acquisition+2,w
  4820  0539                     u1215:	
  4821                           
  4822                           ;mtouch_sensor.c: 269: {
  4823                           ;mtouch_sensor.c: 270: Sensor_setActive(sensor);
  4824  0539  0825               	movf	Sensor_Acquisition@sensor,w
  4825                           
  4826                           ;psect for function _Sensor_setActive
  4827  053A  1803               	skipnc
  4828  053B  2D43               	goto	i5L_Sensor_setInactive
  4829                           
  4830                           ;incstack = 0
  4831                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  4832                           ;Sensor_setActive@sensor stored from wreg
  4833  053C  00F0               	movwf	Sensor_setActive@sensor
  4834  053D                     i4Ll2054:	
  4835                           
  4836                           ;mtouch_sensor.c: 485: sensor->acitve = 1;
  4837  053D  0870               	movf	Sensor_setActive@sensor,w
  4838  053E  3E08               	addlw	8
  4839  053F  0086               	movwf	6
  4840  0540  0187               	clrf	7
  4841  0541  1501               	bsf	1,2
  4842  0542                     i4Ll496:	
  4843                           
  4844                           ;mtouch_sensor.c: 271: }
  4845  0542  3400               	retlw	0
  4846  0543                     i5L__ptext25:	
  4847                           ;mtouch_sensor.c: 272: else
  4848                           ;mtouch_sensor.c: 273: {
  4849                           ;mtouch_sensor.c: 274: Sensor_setInactive(sensor);
  4850                           
  4851                           
  4852                           ;psect for function _Sensor_setInactive
  4853  0543                     i5L_Sensor_setInactive:	
  4854                           
  4855                           ;incstack = 0
  4856                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  4857                           ;Sensor_setInactive@sensor stored from wreg
  4858  0543  00F0               	movwf	Sensor_setInactive@sensor
  4859  0544                     i5Ll2056:	
  4860                           
  4861                           ;mtouch_sensor.c: 490: sensor->acitve = 0;
  4862  0544  0870               	movf	Sensor_setInactive@sensor,w
  4863  0545  3E08               	addlw	8
  4864  0546  0086               	movwf	6
  4865  0547  0187               	clrf	7
  4866  0548  1101               	bcf	1,2
  4867  0549                     i5Ll499:	
  4868  0549  3400               	retlw	0
  4869  054A                     __end_of_Sensor_Acquisition:	
  4870                           
  4871                           	psect	text24
  4872  0246                     __ptext24:	
  4873 ;; *************** function _abs *****************
  4874 ;; Defined at:
  4875 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/abs.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  a               2    0[COMMON] int 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2    0[COMMON] int 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 1F/0
  4886 ;;		On exit  : 1F/0
  4887 ;;		Unchanged: 1F/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4889 ;;      Params:         2       0       0       0
  4890 ;;      Locals:         0       0       0       0
  4891 ;;      Temps:          2       0       0       0
  4892 ;;      Totals:         4       0       0       0
  4893 ;;Total ram usage:        4 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_Sensor_Acquisition
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _abs
  4904  0246                     _abs:	
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _abs: [wreg+status,2+status,0]
  4908  0246  1FF1               	btfss	abs@a+1,7
  4909  0247  0008               	return
  4910  0248  0970               	comf	abs@a,w
  4911  0249  00F2               	movwf	??_abs
  4912  024A  0971               	comf	abs@a+1,w
  4913  024B  00F3               	movwf	??_abs+1
  4914  024C  0AF2               	incf	??_abs,f
  4915  024D  1903               	skipnz
  4916  024E  0AF3               	incf	??_abs+1,f
  4917  024F  0872               	movf	??_abs,w
  4918  0250  00F0               	movwf	?_abs
  4919  0251  0873               	movf	??_abs+1,w
  4920  0252  00F1               	movwf	?_abs+1
  4921  0253  0008               	return
  4922  0254                     __end_of_abs:	
  4923                           
  4924                           	psect	text25
  4925  0000                     __ptext25:	
  4926 ;; *************** function _Sensor_setInactive *****************
  4927 ;; Defined at:
  4928 ;;		line 488 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;  sensor          1    wreg     PTR struct .
  4931 ;;		 -> mtouch_sensor(9), 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  sensor          1    0[COMMON] PTR struct .
  4934 ;;		 -> mtouch_sensor(9), 
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  1    wreg      void 
  4937 ;; Registers used:
  4938 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4939 ;; Tracked objects:
  4940 ;;		On entry : 1F/0
  4941 ;;		On exit  : 1F/0
  4942 ;;		Unchanged: 1F/0
  4943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4944 ;;      Params:         0       0       0       0
  4945 ;;      Locals:         1       0       0       0
  4946 ;;      Temps:          0       0       0       0
  4947 ;;      Totals:         1       0       0       0
  4948 ;;Total ram usage:        1 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		_Sensor_Acquisition
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957  0000                     _Sensor_setInactive:	
  4958                           ;psect for function _Sensor_setInactive
  4959                           
  4960  0000                     __end_of_Sensor_setInactive:	
  4961                           ;mtouch_sensor.c: 490: sensor->acitve = 0;
  4962                           
  4963                           ;incstack = 0
  4964                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  4965                           ;Sensor_setInactive@sensor stored from wreg
  4966                           
  4967                           
  4968                           	psect	text26
  4969  0000                     __ptext26:	
  4970 ;; *************** function _Sensor_setActive *****************
  4971 ;; Defined at:
  4972 ;;		line 483 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  sensor          1    wreg     PTR struct .
  4975 ;;		 -> mtouch_sensor(9), 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  sensor          1    0[COMMON] PTR struct .
  4978 ;;		 -> mtouch_sensor(9), 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4983 ;; Tracked objects:
  4984 ;;		On entry : 1F/0
  4985 ;;		On exit  : 1F/0
  4986 ;;		Unchanged: 1F/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4988 ;;      Params:         0       0       0       0
  4989 ;;      Locals:         1       0       0       0
  4990 ;;      Temps:          0       0       0       0
  4991 ;;      Totals:         1       0       0       0
  4992 ;;Total ram usage:        1 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_Sensor_Acquisition
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001  0000                     _Sensor_setActive:	
  5002                           ;psect for function _Sensor_setActive
  5003                           
  5004  0000                     __end_of_Sensor_setActive:	
  5005                           ;mtouch_sensor.c: 485: sensor->acitve = 1;
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5009                           ;Sensor_setActive@sensor stored from wreg
  5010                           
  5011                           
  5012                           	psect	text27
  5013  01ED                     __ptext27:	
  5014 ;; *************** function _Sensor_isEnabled *****************
  5015 ;; Defined at:
  5016 ;;		line 468 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  sensor          1    wreg     PTR struct .
  5019 ;;		 -> mtouch_sensor(9), 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  sensor          1    0[COMMON] PTR struct .
  5022 ;;		 -> mtouch_sensor(9), 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      unsigned char 
  5025 ;; Registers used:
  5026 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5027 ;; Tracked objects:
  5028 ;;		On entry : 1F/0
  5029 ;;		On exit  : 1F/0
  5030 ;;		Unchanged: 1F/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5032 ;;      Params:         0       0       0       0
  5033 ;;      Locals:         1       0       0       0
  5034 ;;      Temps:          0       0       0       0
  5035 ;;      Totals:         1       0       0       0
  5036 ;;Total ram usage:        1 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; This function calls:
  5039 ;;		Nothing
  5040 ;; This function is called by:
  5041 ;;		_Sensor_Acquisition
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           
  5046                           ;psect for function _Sensor_isEnabled
  5047  01ED                     _Sensor_isEnabled:	
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5051                           ;Sensor_isEnabled@sensor stored from wreg
  5052  01ED  00F0               	movwf	Sensor_isEnabled@sensor
  5053                           
  5054                           ;mtouch_sensor.c: 470: if(sensor!=(0))
  5055  01EE  0870               	movf	Sensor_isEnabled@sensor,w
  5056  01EF  1903               	btfsc	3,2
  5057  01F0  3400               	retlw	0
  5058                           
  5059                           ;mtouch_sensor.c: 471: return (bool)sensor->enabled;
  5060  01F1  0870               	movf	Sensor_isEnabled@sensor,w
  5061  01F2  3E08               	addlw	8
  5062  01F3  0086               	movwf	6
  5063  01F4  0187               	clrf	7
  5064  01F5  0801               	movf	1,w
  5065  01F6  3901               	andlw	1
  5066  01F7  0008               	return
  5067  01F8                     __end_of_Sensor_isEnabled:	
  5068                           ;mtouch_sensor.c: 472: else
  5069                           ;mtouch_sensor.c: 473: return 0;
  5070                           
  5071                           
  5072                           	psect	text28
  5073  04C8                     __ptext28:	
  5074 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  5075 ;; Defined at:
  5076 ;;		line 286 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;  sensor          1    wreg     PTR struct .
  5079 ;;		 -> mtouch_sensor(9), 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  sensor          1   12[COMMON] PTR struct .
  5082 ;;		 -> mtouch_sensor(9), 
  5083 ;;  error           1   11[COMMON] enum E5396
  5084 ;;  GIE_state       1   10[COMMON] unsigned char 
  5085 ;;  ADACT_temp      1    9[COMMON] unsigned char 
  5086 ;;  ADCON1_temp     1    8[COMMON] unsigned char 
  5087 ;;  ADCON0_temp     1    7[COMMON] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      enum E5396
  5090 ;; Registers used:
  5091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 1F/0
  5094 ;;		On exit  : 1F/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5097 ;;      Params:         0       0       0       0
  5098 ;;      Locals:         6       0       0       0
  5099 ;;      Temps:          0       0       0       0
  5100 ;;      Totals:         6       0       0       0
  5101 ;;Total ram usage:        6 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    2
  5104 ;; This function calls:
  5105 ;;		_MTOUCH_Delay
  5106 ;;		_MTOUCH_Random
  5107 ;;		_MTOUCH_Sensor_Scan_Initialize
  5108 ;;		_Sensor_Acq_ExecuteScan
  5109 ;;		_Sensor_setScanFunction
  5110 ;; This function is called by:
  5111 ;;		_Sensor_Acquisition
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           
  5116                           ;psect for function _Sensor_Acq_ExecutePacket
  5117  04C8                     _Sensor_Acq_ExecutePacket:	
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5121                           ;Sensor_Acq_ExecutePacket@sensor stored from wreg
  5122  04C8  00FC               	movwf	Sensor_Acq_ExecutePacket@sensor
  5123                           
  5124                           ;mtouch_sensor.c: 289: enum mtouch_sensor_error error = MTOUCH_SENSOR_ERROR_none;
  5125  04C9  01FB               	clrf	Sensor_Acq_ExecutePacket@error
  5126                           
  5127                           ;mtouch_sensor.c: 290: uint8_t ADCON0_temp;
  5128                           ;mtouch_sensor.c: 291: uint8_t ADCON1_temp;
  5129                           ;mtouch_sensor.c: 292: uint8_t ADACT_temp;
  5130                           ;mtouch_sensor.c: 294: uint8_t GIE_state;
  5131                           ;mtouch_sensor.c: 296: ADCON0_temp = ADCON0;
  5132  04CA  0021               	movlb	1	; select bank1
  5133  04CB  081D               	movf	29,w	;volatile
  5134  04CC  00F7               	movwf	Sensor_Acq_ExecutePacket@ADCON0_temp
  5135                           
  5136                           ;mtouch_sensor.c: 297: ADCON1_temp = ADCON1;
  5137  04CD  081E               	movf	30,w	;volatile
  5138  04CE  00F8               	movwf	Sensor_Acq_ExecutePacket@ADCON1_temp
  5139                           
  5140                           ;mtouch_sensor.c: 298: ADACT_temp = ADACT;
  5141  04CF  081F               	movf	31,w	;volatile
  5142  04D0  00F9               	movwf	Sensor_Acq_ExecutePacket@ADACT_temp
  5143                           
  5144                           ;mtouch_sensor.c: 299: MTOUCH_Sensor_Scan_Initialize();
  5145  04D1  218E               	fcall	_MTOUCH_Sensor_Scan_Initialize
  5146                           
  5147                           ;mtouch_sensor.c: 301: GIE_state = INTCONbits.GIE;
  5148  04D2  3000               	movlw	0
  5149  04D3  1B8B               	btfsc	11,7	;volatile
  5150  04D4  3001               	movlw	1
  5151  04D5  00FA               	movwf	Sensor_Acq_ExecutePacket@GIE_state
  5152                           
  5153                           ;mtouch_sensor.c: 303: Sensor_setScanFunction(sensor);
  5154  04D6  087C               	movf	Sensor_Acq_ExecutePacket@sensor,w
  5155  04D7  2181               	fcall	_Sensor_setScanFunction
  5156                           
  5157                           ;mtouch_sensor.c: 305: currentScannSensor = sensor->sensor_name;
  5158  04D8  087C               	movf	Sensor_Acq_ExecutePacket@sensor,w
  5159  04D9  0086               	movwf	6
  5160  04DA  0187               	clrf	7
  5161  04DB  0801               	movf	1,w
  5162  04DC  0020               	movlb	0	; select bank0
  5163  04DD  00C7               	movwf	_currentScannSensor
  5164                           
  5165                           ;mtouch_sensor.c: 306: packet_counter = sensor->oversampling;
  5166  04DE  087C               	movf	Sensor_Acq_ExecutePacket@sensor,w
  5167  04DF  0086               	movwf	6
  5168  04E0  3F45               	moviw [5]fsr1
  5169  04E1  00C6               	movwf	_packet_counter
  5170                           
  5171                           ;mtouch_sensor.c: 307: packet_sample = 0;
  5172  04E2  01C1               	clrf	_packet_sample
  5173  04E3  01C2               	clrf	_packet_sample+1
  5174                           
  5175                           ;mtouch_sensor.c: 308: sensor_globalFlags.packet_done = 0;
  5176  04E4  1048               	bcf	_sensor_globalFlags,0	;volatile
  5177                           
  5178                           ;mtouch_sensor.c: 309: sample_delay = MTOUCH_Random();
  5179  04E5  21D9               	fcall	_MTOUCH_Random
  5180  04E6  00C5               	movwf	_sample_delay
  5181                           
  5182                           ;mtouch_sensor.c: 310: packet_sample = 0;
  5183  04E7  01C1               	clrf	_packet_sample
  5184  04E8  01C2               	clrf	_packet_sample+1
  5185                           
  5186                           ;mtouch_sensor.c: 312: sensor_globalFlags.interrupted = 0;
  5187  04E9  10C8               	bcf	_sensor_globalFlags,1	;volatile
  5188  04EA                     l2032:	
  5189                           
  5190                           ;mtouch_sensor.c: 316: {
  5191                           ;mtouch_sensor.c: 317: INTCONbits.GIE = (uint8_t)0;
  5192  04EA  138B               	bcf	11,7	;volatile
  5193                           
  5194                           ;mtouch_sensor.c: 318: Sensor_Acq_ExecuteScan();
  5195  04EB  25DF               	fcall	_Sensor_Acq_ExecuteScan
  5196                           
  5197                           ;mtouch_sensor.c: 319: INTCONbits.GIE = GIE_state;
  5198  04EC  0C7A               	rrf	Sensor_Acq_ExecutePacket@GIE_state,w
  5199  04ED  1C03               	skipc
  5200  04EE  138B               	bcf	11,7	;volatile
  5201  04EF  1803               	skipnc
  5202  04F0  178B               	bsf	11,7	;volatile
  5203                           
  5204                           ;mtouch_sensor.c: 320: MTOUCH_Delay();
  5205  04F1  21A0               	fcall	_MTOUCH_Delay
  5206  04F2                     l433:	
  5207                           ;mtouch_sensor.c: 321: while(ADCON0bits.ADGO == 1);
  5208                           
  5209  04F2  0021               	movlb	1	; select bank1
  5210  04F3  189D               	btfsc	29,1	;volatile
  5211  04F4  2CF2               	goto	l433
  5212                           
  5213                           ;mtouch_sensor.c: 322: } while(sensor_globalFlags.packet_done == 0);
  5214  04F5  0020               	movlb	0	; select bank0
  5215  04F6  1C48               	btfss	_sensor_globalFlags,0	;volatile
  5216  04F7  2CEA               	goto	l2032
  5217                           
  5218                           ;mtouch_sensor.c: 325: ADCON0 = ADCON0_temp;
  5219  04F8  0877               	movf	Sensor_Acq_ExecutePacket@ADCON0_temp,w
  5220  04F9  0021               	movlb	1	; select bank1
  5221  04FA  009D               	movwf	29	;volatile
  5222                           
  5223                           ;mtouch_sensor.c: 326: ADCON1 = ADCON1_temp;
  5224  04FB  0878               	movf	Sensor_Acq_ExecutePacket@ADCON1_temp,w
  5225  04FC  009E               	movwf	30	;volatile
  5226                           
  5227                           ;mtouch_sensor.c: 327: ADACT = ADACT_temp;
  5228  04FD  0879               	movf	Sensor_Acq_ExecutePacket@ADACT_temp,w
  5229  04FE  009F               	movwf	31	;volatile
  5230                           
  5231                           ;mtouch_sensor.c: 329: if(sensor_globalFlags.interrupted)
  5232  04FF  0020               	movlb	0	; select bank0
  5233  0500  1CC8               	btfss	_sensor_globalFlags,1	;volatile
  5234  0501  2D04               	goto	l437
  5235                           
  5236                           ;mtouch_sensor.c: 330: {
  5237                           ;mtouch_sensor.c: 331: error = MTOUCH_SENSOR_ERROR_interruptedScan;
  5238  0502  30FA               	movlw	250
  5239  0503  00FB               	movwf	Sensor_Acq_ExecutePacket@error
  5240  0504                     l437:	
  5241                           
  5242                           ;mtouch_sensor.c: 332: }
  5243                           ;mtouch_sensor.c: 334: return error;
  5244  0504  087B               	movf	Sensor_Acq_ExecutePacket@error,w
  5245  0505  0008               	return
  5246  0506                     __end_of_Sensor_Acq_ExecutePacket:	
  5247                           
  5248                           	psect	text29
  5249  0181                     __ptext29:	
  5250 ;; *************** function _Sensor_setScanFunction *****************
  5251 ;; Defined at:
  5252 ;;		line 435 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  sensor          1    wreg     PTR struct .
  5255 ;;		 -> mtouch_sensor(9), 
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  sensor          1    0[COMMON] PTR struct .
  5258 ;;		 -> mtouch_sensor(9), 
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg
  5263 ;; Tracked objects:
  5264 ;;		On entry : 1F/1
  5265 ;;		On exit  : 1F/1
  5266 ;;		Unchanged: 1F/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5268 ;;      Params:         0       0       0       0
  5269 ;;      Locals:         1       0       0       0
  5270 ;;      Temps:          0       0       0       0
  5271 ;;      Totals:         1       0       0       0
  5272 ;;Total ram usage:        1 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; This function calls:
  5275 ;;		Nothing
  5276 ;; This function is called by:
  5277 ;;		_Sensor_Acq_ExecutePacket
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           
  5282                           ;psect for function _Sensor_setScanFunction
  5283  0181                     _Sensor_setScanFunction:	
  5284                           
  5285                           ;incstack = 0
  5286                           ; Regs used in _Sensor_setScanFunction: [wreg]
  5287  0181  0008               	return
  5288  0182                     __end_of_Sensor_setScanFunction:	
  5289                           
  5290                           	psect	text30
  5291  05DF                     __ptext30:	
  5292 ;; *************** function _Sensor_Acq_ExecuteScan *****************
  5293 ;; Defined at:
  5294 ;;		line 353 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;		None
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;  result          2    5[COMMON] unsigned int 
  5299 ;; Return value:  Size  Location     Type
  5300 ;;                  1    wreg      void 
  5301 ;; Registers used:
  5302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5303 ;; Tracked objects:
  5304 ;;		On entry : 1F/0
  5305 ;;		On exit  : 1F/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5308 ;;      Params:         0       0       0       0
  5309 ;;      Locals:         2       0       0       0
  5310 ;;      Temps:          2       0       0       0
  5311 ;;      Totals:         4       0       0       0
  5312 ;;Total ram usage:        4 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    1
  5315 ;; This function calls:
  5316 ;;		_MTOUCH_CVD_ScanA_0
  5317 ;;		_MTOUCH_CVD_ScanB_0
  5318 ;;		___bmul
  5319 ;; This function is called by:
  5320 ;;		_Sensor_Acq_ExecutePacket
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           
  5325                           ;psect for function _Sensor_Acq_ExecuteScan
  5326  05DF                     _Sensor_Acq_ExecuteScan:	
  5327                           
  5328                           ;mtouch_sensor.c: 355: mtouch_sensor_adcsample_t result = ADRES;
  5329                           
  5330                           ;incstack = 0
  5331                           ; Regs used in _Sensor_Acq_ExecuteScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5332  05DF  0021               	movlb	1	; select bank1
  5333  05E0  081C               	movf	28,w	;volatile
  5334  05E1  00F6               	movwf	Sensor_Acq_ExecuteScan@result+1
  5335  05E2  081B               	movf	27,w	;volatile
  5336  05E3  00F5               	movwf	Sensor_Acq_ExecuteScan@result
  5337                           
  5338                           ;mtouch_sensor.c: 357: if(sensor_globalFlags.packet_done)
  5339  05E4  0020               	movlb	0	; select bank0
  5340  05E5  1848               	btfsc	_sensor_globalFlags,0	;volatile
  5341  05E6  0008               	return
  5342                           
  5343                           ;mtouch_sensor.c: 360: if (packet_counter != (uint8_t)0)
  5344  05E7  0846               	movf	_packet_counter,w
  5345  05E8  1D03               	btfss	3,2
  5346  05E9  2DEF               	goto	l1922
  5347  05EA  2E25               	goto	l1932
  5348  05EB                     l1916:	
  5349  05EB  2389               	fcall	_MTOUCH_CVD_ScanA_0
  5350  05EC  2E07               	goto	l1924
  5351  05ED                     l1918:	
  5352  05ED  23AE               	fcall	_MTOUCH_CVD_ScanB_0
  5353  05EE  2E07               	goto	l1924
  5354  05EF                     l1922:	
  5355  05EF  0846               	movf	_packet_counter,w
  5356  05F0  3901               	andlw	1
  5357  05F1  00F3               	movwf	??_Sensor_Acq_ExecuteScan
  5358  05F2  01F4               	clrf	??_Sensor_Acq_ExecuteScan+1
  5359                           
  5360                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5361                           ; Switch size 1, requested type "time"
  5362                           ; Number of cases is 1, Range of values is 0 to 0
  5363                           ; switch strategies available:
  5364                           ; Name         Instructions Cycles
  5365                           ; direct_byte            8     6 (fixed)
  5366                           ; simple_byte            4     3 (average)
  5367                           ; jumptable            260     6 (fixed)
  5368                           ;	Chosen strategy is direct_byte
  5369  05F3  0874               	movf	??_Sensor_Acq_ExecuteScan+1,w
  5370  05F4  0084               	movwf	4
  5371  05F5  3001               	movlw	1
  5372  05F6  0204               	subwf	4,w
  5373  05F7  1803               	skipnc
  5374  05F8  2E07               	goto	l1924
  5375  05F9  3180               	movlp	high S2738
  5376  05FA  3004               	movlw	low S2738
  5377  05FB  0704               	addwf	4,w
  5378  05FC  0082               	movwf	2
  5379  05FD                     l2736:	
  5380                           
  5381                           ; Switch size 1, requested type "time"
  5382                           ; Number of cases is 2, Range of values is 0 to 1
  5383                           ; switch strategies available:
  5384                           ; Name         Instructions Cycles
  5385                           ; direct_byte           10     6 (fixed)
  5386                           ; simple_byte            7     4 (average)
  5387                           ; jumptable            260     6 (fixed)
  5388                           ;	Chosen strategy is direct_byte
  5389  05FD  0873               	movf	??_Sensor_Acq_ExecuteScan,w
  5390  05FE  0084               	movwf	4
  5391  05FF  3002               	movlw	2
  5392  0600  0204               	subwf	4,w
  5393  0601  1803               	skipnc
  5394  0602  2E07               	goto	l1924
  5395  0603  3180               	movlp	high S2740
  5396  0604  3002               	movlw	low S2740
  5397  0605  0704               	addwf	4,w
  5398  0606  0082               	movwf	2
  5399  0607                     l1924:	
  5400                           
  5401                           ;mtouch_sensor.c: 370: if(packet_counter!=mtouch_sensor[currentScannSensor].oversampling
      +                          )
  5402  0607  3009               	movlw	9
  5403  0608  00F0               	movwf	___bmul@multiplicand
  5404  0609  0020               	movlb	0	; select bank0
  5405  060A  0847               	movf	_currentScannSensor,w
  5406  060B  21F8               	fcall	___bmul
  5407  060C  3E66               	addlw	(low ((_mtouch_sensor| 0+5)))& (0+255)
  5408  060D  0086               	movwf	6
  5409  060E  0187               	clrf	7
  5410  060F  0801               	movf	1,w
  5411  0610  0020               	movlb	0	; select bank0
  5412  0611  0646               	xorwf	_packet_counter,w
  5413  0612  1903               	skipnz
  5414  0613  2E23               	goto	l454
  5415                           
  5416                           ;mtouch_sensor.c: 371: {
  5417                           ;mtouch_sensor.c: 372: if(packet_counter & 0x01)
  5418  0614  1C46               	btfss	_packet_counter,0
  5419  0615  2E1F               	goto	l1930
  5420                           
  5421                           ;mtouch_sensor.c: 373: {
  5422                           ;mtouch_sensor.c: 374: result = ((mtouch_sensor_adcsample_t)1024) - result;
  5423  0616  3004               	movlw	4
  5424  0617  01F3               	clrf	??_Sensor_Acq_ExecuteScan
  5425  0618  00F4               	movwf	??_Sensor_Acq_ExecuteScan+1
  5426  0619  0875               	movf	Sensor_Acq_ExecuteScan@result,w
  5427  061A  0273               	subwf	??_Sensor_Acq_ExecuteScan,w
  5428  061B  00F5               	movwf	Sensor_Acq_ExecuteScan@result
  5429  061C  0876               	movf	Sensor_Acq_ExecuteScan@result+1,w
  5430  061D  3B74               	subwfb	??_Sensor_Acq_ExecuteScan+1,w
  5431  061E  00F6               	movwf	Sensor_Acq_ExecuteScan@result+1
  5432  061F                     l1930:	
  5433                           
  5434                           ;mtouch_sensor.c: 375: }
  5435                           ;mtouch_sensor.c: 376: packet_sample += result;
  5436  061F  0875               	movf	Sensor_Acq_ExecuteScan@result,w
  5437  0620  07C1               	addwf	_packet_sample,f
  5438  0621  0876               	movf	Sensor_Acq_ExecuteScan@result+1,w
  5439  0622  3DC2               	addwfc	_packet_sample+1,f
  5440  0623                     l454:	
  5441                           
  5442                           ;mtouch_sensor.c: 377: }
  5443                           ;mtouch_sensor.c: 378: packet_counter--;
  5444  0623  03C6               	decf	_packet_counter,f
  5445                           
  5446                           ;mtouch_sensor.c: 379: }
  5447  0624  0008               	return
  5448  0625                     l1932:	
  5449                           
  5450                           ;mtouch_sensor.c: 380: else
  5451                           ;mtouch_sensor.c: 381: {
  5452                           ;mtouch_sensor.c: 382: packet_sample += result;
  5453  0625  0875               	movf	Sensor_Acq_ExecuteScan@result,w
  5454  0626  07C1               	addwf	_packet_sample,f
  5455  0627  0876               	movf	Sensor_Acq_ExecuteScan@result+1,w
  5456  0628  3DC2               	addwfc	_packet_sample+1,f
  5457                           
  5458                           ;mtouch_sensor.c: 383: sensor_globalFlags.packet_done = (uint8_t)1;
  5459  0629  1448               	bsf	_sensor_globalFlags,0	;volatile
  5460  062A  0008               	return
  5461  062B                     __end_of_Sensor_Acq_ExecuteScan:	
  5462                           
  5463                           	psect	swtext1
  5464  0004                     __pswtext1:	
  5465  0004                     S2738:	
  5466  0004  2DFD               	ljmp	l2736
  5467                           
  5468                           	psect	swtext2
  5469  0002                     __pswtext2:	
  5470  0002                     S2740:	
  5471  0002  2DEB               	ljmp	l1916
  5472  0003  2DED               	ljmp	l1918
  5473                           
  5474                           	psect	text31
  5475  03AE                     __ptext31:	
  5476 ;; *************** function _MTOUCH_CVD_ScanB_0 *****************
  5477 ;; Defined at:
  5478 ;;		line 131 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg
  5487 ;; Tracked objects:
  5488 ;;		On entry : 1F/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5492 ;;      Params:         0       0       0       0
  5493 ;;      Locals:         0       0       0       0
  5494 ;;      Temps:          0       0       0       0
  5495 ;;      Totals:         0       0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_Sensor_Acq_ExecuteScan
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           
  5506                           ;psect for function _MTOUCH_CVD_ScanB_0
  5507  03AE                     _MTOUCH_CVD_ScanB_0:	
  5508                           
  5509                           ;incstack = 0
  5510                           ; Regs used in _MTOUCH_CVD_ScanB_0: [wreg]
  5511  03AE  0022               	banksel	268	;# 
  5512  03AF  110C               	bcf	12,2	;# 
  5513  03B0  0021               	banksel	157	;# 
  5514  03B1  3009               	movlw	9	;# 
  5515  03B2  009D               	movwf	29	;# 
  5516                           
  5517                           ;mtouch_sensor_scan.c: 143: _delay(10);
  5518  03B3  3003               	movlw	3
  5519  03B4                     u1767:	
  5520  03B4  0B89               	decfsz	9,f
  5521  03B5  2BB4               	goto	u1767
  5522  03B6  0000               	nop
  5523  03B7  3071               	movlw	113	;# 
  5524  03B8  009D               	movwf	29	;# 
  5525  03B9  0022               	banksel	268	;# 
  5526  03BA  150C               	bsf	12,2	;# 
  5527  03BB  0021               	banksel	157	;# 
  5528  03BC  308C               	movlw	140	;# 
  5529  03BD  0084               	movwf	4	;# 
  5530  03BE  3000               	movlw	0	;# 
  5531  03BF  0085               	movwf	5	;# 
  5532  03C0  300C               	movlw	12	;# 
  5533  03C1  0086               	movwf	6	;# 
  5534  03C2  3001               	movlw	1	;# 
  5535  03C3  0087               	movwf	7	;# 
  5536  03C4  3009               	movlw	9	;# 
  5537  03C5  1500               	bsf	0,2	;# 
  5538                           
  5539                           ;mtouch_sensor_scan.c: 167: _delay(0);
  5540  03C6  009D               	movwf	29	;# 
  5541  03C7  1081               	bcf	1,1	;# 
  5542                           
  5543                           ;mtouch_sensor_scan.c: 174: _delay(5);
  5544  03C8  3200               	nop2	;2 cycle nop
  5545  03C9  3200               	nop2	;2 cycle nop
  5546  03CA  0000               	nop
  5547  03CB  0021               	banksel	157	;# 
  5548  03CC  149D               	bsf	29,1	;# 
  5549                           
  5550                           ;mtouch_sensor_scan.c: 181: _delay(3);
  5551  03CD  3200               	nop2	;2 cycle nop
  5552  03CE  0000               	nop
  5553  03CF  0022               	banksel	268	;# 
  5554  03D0  110C               	bcf	12,2	;# 
  5555  03D1  1100               	bcf	0,2	;# 
  5556  03D2  0008               	return
  5557  03D3                     __end_of_MTOUCH_CVD_ScanB_0:	
  5558                           
  5559                           	psect	text32
  5560  0389                     __ptext32:	
  5561 ;; *************** function _MTOUCH_CVD_ScanA_0 *****************
  5562 ;; Defined at:
  5563 ;;		line 62 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;		None
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;		None
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  1    wreg      void 
  5570 ;; Registers used:
  5571 ;;		wreg
  5572 ;; Tracked objects:
  5573 ;;		On entry : 1F/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5577 ;;      Params:         0       0       0       0
  5578 ;;      Locals:         0       0       0       0
  5579 ;;      Temps:          0       0       0       0
  5580 ;;      Totals:         0       0       0       0
  5581 ;;Total ram usage:        0 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; This function calls:
  5584 ;;		Nothing
  5585 ;; This function is called by:
  5586 ;;		_Sensor_Acq_ExecuteScan
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           
  5591                           ;psect for function _MTOUCH_CVD_ScanA_0
  5592  0389                     _MTOUCH_CVD_ScanA_0:	
  5593                           
  5594                           ;incstack = 0
  5595                           ; Regs used in _MTOUCH_CVD_ScanA_0: [wreg]
  5596  0389  0022               	banksel	268	;# 
  5597  038A  150C               	bsf	12,2	;# 
  5598  038B  0021               	banksel	157	;# 
  5599  038C  3009               	movlw	9	;# 
  5600  038D  009D               	movwf	29	;# 
  5601                           
  5602                           ;mtouch_sensor_scan.c: 74: _delay(10);
  5603  038E  3003               	movlw	3
  5604  038F                     u1777:	
  5605  038F  0B89               	decfsz	9,f
  5606  0390  2B8F               	goto	u1777
  5607  0391  0000               	nop
  5608  0392  3071               	movlw	113	;# 
  5609  0393  009D               	movwf	29	;# 
  5610  0394  0022               	banksel	268	;# 
  5611  0395  110C               	bcf	12,2	;# 
  5612  0396  0021               	banksel	157	;# 
  5613  0397  308C               	movlw	140	;# 
  5614  0398  0084               	movwf	4	;# 
  5615  0399  3000               	movlw	0	;# 
  5616  039A  0085               	movwf	5	;# 
  5617  039B  300C               	movlw	12	;# 
  5618  039C  0086               	movwf	6	;# 
  5619  039D  3001               	movlw	1	;# 
  5620  039E  0087               	movwf	7	;# 
  5621  039F  3009               	movlw	9	;# 
  5622  03A0  1500               	bsf	0,2	;# 
  5623                           
  5624                           ;mtouch_sensor_scan.c: 98: _delay(0);
  5625  03A1  009D               	movwf	29	;# 
  5626  03A2  1481               	bsf	1,1	;# 
  5627                           
  5628                           ;mtouch_sensor_scan.c: 104: _delay(5);
  5629  03A3  3200               	nop2	;2 cycle nop
  5630  03A4  3200               	nop2	;2 cycle nop
  5631  03A5  0000               	nop
  5632  03A6  0021               	banksel	157	;# 
  5633  03A7  149D               	bsf	29,1	;# 
  5634                           
  5635                           ;mtouch_sensor_scan.c: 111: _delay(3);
  5636  03A8  3200               	nop2	;2 cycle nop
  5637  03A9  0000               	nop
  5638  03AA  0022               	banksel	268	;# 
  5639  03AB  150C               	bsf	12,2	;# 
  5640  03AC  1100               	bcf	0,2	;# 
  5641  03AD  0008               	return
  5642  03AE                     __end_of_MTOUCH_CVD_ScanA_0:	
  5643                           
  5644                           	psect	text33
  5645  018E                     __ptext33:	
  5646 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  5647 ;; Defined at:
  5648 ;;		line 181 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;		None
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;		None
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  1    wreg      void 
  5655 ;; Registers used:
  5656 ;;		wreg, status,2
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/3
  5659 ;;		On exit  : 1F/1
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5662 ;;      Params:         0       0       0       0
  5663 ;;      Locals:         0       0       0       0
  5664 ;;      Temps:          0       0       0       0
  5665 ;;      Totals:         0       0       0       0
  5666 ;;Total ram usage:        0 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; This function calls:
  5669 ;;		Nothing
  5670 ;; This function is called by:
  5671 ;;		_MTOUCH_Initialize
  5672 ;;		_Sensor_Acq_ExecutePacket
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           
  5677                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  5678  018E                     _MTOUCH_Sensor_Scan_Initialize:	
  5679  018E                     l1878:	
  5680                           ;incstack = 0
  5681                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2]
  5682                           
  5683                           
  5684                           ;mtouch_sensor.c: 184: ADCON0 = (uint8_t)0;
  5685  018E  0021               	movlb	1	; select bank1
  5686  018F  019D               	clrf	29	;volatile
  5687                           
  5688                           ;mtouch_sensor.c: 185: ADCON1 = (uint8_t)( 0x1<<7 | 0x5<<4 | 0x0 );
  5689  0190  30D0               	movlw	208
  5690  0191  009E               	movwf	30	;volatile
  5691                           
  5692                           ;mtouch_sensor.c: 186: ADACT = (uint8_t)0;
  5693  0192  019F               	clrf	31	;volatile
  5694  0193  0008               	return
  5695  0194                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  5696                           
  5697                           	psect	text34
  5698  01D9                     __ptext34:	
  5699 ;; *************** function _MTOUCH_Random *****************
  5700 ;; Defined at:
  5701 ;;		line 66 in file "mcc_generated_files/mtouch/mtouch_random.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;		None
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      unsigned char 
  5708 ;; Registers used:
  5709 ;;		wreg, status,2, status,0
  5710 ;; Tracked objects:
  5711 ;;		On entry : 1F/0
  5712 ;;		On exit  : 1F/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5715 ;;      Params:         0       0       0       0
  5716 ;;      Locals:         0       0       0       0
  5717 ;;      Temps:          0       0       0       0
  5718 ;;      Totals:         0       0       0       0
  5719 ;;Total ram usage:        0 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_Sensor_Acq_ExecutePacket
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           
  5729                           ;psect for function _MTOUCH_Random
  5730  01D9                     _MTOUCH_Random:	
  5731                           
  5732                           ;mtouch_random.c: 68: static MTOUCH_RANDOM_t seed = (MTOUCH_RANDOM_t)0;
  5733                           ;mtouch_random.c: 70: if ((seed & (MTOUCH_RANDOM_t)1) != (MTOUCH_RANDOM_t)0)
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in _MTOUCH_Random: [wreg+status,2+status,0]
  5737  01D9  1C49               	btfss	MTOUCH_Random@seed,0
  5738  01DA  29DD               	goto	l310
  5739                           
  5740                           ;mtouch_random.c: 71: {
  5741                           ;mtouch_random.c: 73: seed = seed >> (uint8_t)1;
  5742  01DB  36C9               	lsrf	MTOUCH_Random@seed,f
  5743                           
  5744                           ;mtouch_random.c: 74: }
  5745  01DC  29E0               	goto	l1902
  5746  01DD                     l310:	
  5747  01DD  30B4               	movlw	180
  5748                           
  5749                           ;mtouch_random.c: 75: else
  5750                           ;mtouch_random.c: 76: {
  5751                           ;mtouch_random.c: 81: seed = seed >> (uint8_t)1;
  5752  01DE  36C9               	lsrf	MTOUCH_Random@seed,f
  5753                           
  5754                           ;mtouch_random.c: 82: seed = seed ^ (MTOUCH_RANDOM_t)0xB4;
  5755  01DF  06C9               	xorwf	MTOUCH_Random@seed,f
  5756  01E0                     l1902:	
  5757                           
  5758                           ;mtouch_random.c: 83: }
  5759                           ;mtouch_random.c: 85: return (uint8_t)seed & 0x0F;
  5760  01E0  0849               	movf	MTOUCH_Random@seed,w
  5761  01E1  390F               	andlw	15
  5762  01E2  0008               	return
  5763  01E3                     __end_of_MTOUCH_Random:	
  5764                           
  5765                           	psect	text35
  5766  01A0                     __ptext35:	
  5767 ;; *************** function _MTOUCH_Delay *****************
  5768 ;; Defined at:
  5769 ;;		line 337 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  i               1    0[COMMON] unsigned char 
  5774 ;; Return value:  Size  Location     Type
  5775 ;;                  1    wreg      void 
  5776 ;; Registers used:
  5777 ;;		wreg, status,2, status,0
  5778 ;; Tracked objects:
  5779 ;;		On entry : 1F/0
  5780 ;;		On exit  : 1F/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5783 ;;      Params:         0       0       0       0
  5784 ;;      Locals:         1       0       0       0
  5785 ;;      Temps:          0       0       0       0
  5786 ;;      Totals:         1       0       0       0
  5787 ;;Total ram usage:        1 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; This function calls:
  5790 ;;		Nothing
  5791 ;; This function is called by:
  5792 ;;		_Sensor_Acq_ExecutePacket
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           
  5797                           ;psect for function _MTOUCH_Delay
  5798  01A0                     _MTOUCH_Delay:	
  5799                           
  5800                           ;mtouch_sensor.c: 339: for(uint8_t i = sample_delay;i>0;i--)
  5801                           
  5802                           ;incstack = 0
  5803                           ; Regs used in _MTOUCH_Delay: [wreg+status,2+status,0]
  5804  01A0  0845               	movf	_sample_delay,w
  5805  01A1  00F0               	movwf	MTOUCH_Delay@i
  5806  01A2                     l1956:	
  5807  01A2  0870               	movf	MTOUCH_Delay@i,w
  5808  01A3  1903               	btfsc	3,2
  5809  01A4  0008               	return
  5810                           
  5811                           ;mtouch_sensor.c: 340: { }
  5812  01A5  03F0               	decf	MTOUCH_Delay@i,f
  5813  01A6  29A2               	goto	l1956
  5814  01A7                     __end_of_MTOUCH_Delay:	
  5815                           
  5816                           	psect	text36
  5817  01AF                     __ptext36:	
  5818 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  5819 ;; Defined at:
  5820 ;;		line 160 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;		None
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  button          1   13[COMMON] enum E5405
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5829 ;; Tracked objects:
  5830 ;;		On entry : 1F/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5834 ;;      Params:         0       0       0       0
  5835 ;;      Locals:         1       0       0       0
  5836 ;;      Temps:          0       0       0       0
  5837 ;;      Totals:         1       0       0       0
  5838 ;;Total ram usage:        1 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    5
  5841 ;; This function calls:
  5842 ;;		_Button_Service
  5843 ;; This function is called by:
  5844 ;;		_MTOUCH_Service_Mainloop
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           
  5849                           ;psect for function _MTOUCH_Button_ServiceAll
  5850  01AF                     _MTOUCH_Button_ServiceAll:	
  5851                           
  5852                           ;mtouch_button.c: 162: enum mtouch_button_names button;
  5853                           ;mtouch_button.c: 163: for (button = 0; button < 1; button++)
  5854                           
  5855                           ;incstack = 0
  5856                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5857  01AF  01FD               	clrf	MTOUCH_Button_ServiceAll@button
  5858  01B0                     l2610:	
  5859                           
  5860                           ;mtouch_button.c: 164: {
  5861                           ;mtouch_button.c: 165: Button_Service(button);
  5862  01B0  087D               	movf	MTOUCH_Button_ServiceAll@button,w
  5863  01B1  2457               	fcall	_Button_Service
  5864  01B2  0AFD               	incf	MTOUCH_Button_ServiceAll@button,f
  5865  01B3  087D               	movf	MTOUCH_Button_ServiceAll@button,w
  5866  01B4  1D03               	btfss	3,2
  5867  01B5  0008               	return
  5868  01B6  29B0               	goto	l2610
  5869  01B7                     __end_of_MTOUCH_Button_ServiceAll:	
  5870                           
  5871                           	psect	text37
  5872  0457                     __ptext37:	
  5873 ;; *************** function _Button_Service *****************
  5874 ;; Defined at:
  5875 ;;		line 169 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  name            1    wreg     enum E5405
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  name            1    5[BANK0 ] enum E5405
  5880 ;;  button          1    6[BANK0 ] PTR struct .
  5881 ;;		 -> mtouch_button(16), 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  1    wreg      void 
  5884 ;; Registers used:
  5885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5891 ;;      Params:         0       0       0       0
  5892 ;;      Locals:         0       2       0       0
  5893 ;;      Temps:          0       0       0       0
  5894 ;;      Totals:         0       2       0       0
  5895 ;;Total ram usage:        2 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    4
  5898 ;; This function calls:
  5899 ;;		_Button_Deviation_Update
  5900 ;;		_Button_Reading_Update
  5901 ;;		_Button_State_Initializing
  5902 ;;		_Button_State_NotPressed
  5903 ;;		_Button_State_Pressed
  5904 ;;		_MTOUCH_Button_Initialize
  5905 ;;		_MTOUCH_Sensor_isCalibrated
  5906 ;;		_MTOUCH_Sensor_wasSampled
  5907 ;; This function is called by:
  5908 ;;		_MTOUCH_Button_ServiceAll
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           
  5913                           ;psect for function _Button_Service
  5914  0457                     _Button_Service:	
  5915                           
  5916                           ;incstack = 0
  5917                           ; Regs used in _Button_Service: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5918                           ;Button_Service@name stored from wreg
  5919  0457  0020               	movlb	0	; select bank0
  5920  0458  00A5               	movwf	Button_Service@name
  5921                           
  5922                           ;mtouch_button.c: 171: mtouch_button_t* button = &mtouch_button[name];
  5923  0459  0E25               	swapf	Button_Service@name,w
  5924  045A  39F0               	andlw	240
  5925  045B  3E4B               	addlw	(low (_mtouch_button| 0))& (0+255)
  5926  045C  00A6               	movwf	Button_Service@button
  5927                           
  5928                           ;mtouch_button.c: 173: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
  5929  045D  2489               	fcall	PL62	;call to abstracted procedure
  5930  045E  2238               	fcall	_MTOUCH_Sensor_wasSampled
  5931  045F  3A00               	xorlw	0
  5932  0460  1903               	skipnz
  5933  0461  0008               	return
  5934  0462  0020               	movlb	0	; select bank0
  5935  0463  2489               	fcall	PL62	;call to abstracted procedure
  5936  0464  2180               	fcall	_MTOUCH_Sensor_isCalibrated
  5937  0465  3A00               	xorlw	0
  5938  0466  1903               	skipnz
  5939  0467  0008               	return
  5940                           
  5941                           ;mtouch_button.c: 174: {
  5942                           ;mtouch_button.c: 175: Button_Reading_Update(button);
  5943  0468  0826               	movf	Button_Service@button,w
  5944  0469  248E               	fcall	_Button_Reading_Update
  5945                           
  5946                           ;mtouch_button.c: 176: Button_Deviation_Update(button);
  5947  046A  0020               	movlb	0	; select bank0
  5948  046B  0826               	movf	Button_Service@button,w
  5949  046C  26E9               	fcall	_Button_Deviation_Update
  5950                           
  5951                           ;mtouch_button.c: 178: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
  5952  046D  0826               	movf	Button_Service@button,w
  5953  046E  3E02               	addlw	2
  5954  046F  0086               	movwf	6
  5955  0470  3003               	movlw	3
  5956  0471  0187               	clrf	7
  5957  0472  0201               	subwf	1,w
  5958  0473  1C03               	skipc
  5959  0474  2C79               	goto	l189
  5960                           
  5961                           ;mtouch_button.c: 179: {
  5962                           ;mtouch_button.c: 180: MTOUCH_Button_Initialize(button->name);
  5963  0475  0826               	movf	Button_Service@button,w
  5964  0476  0086               	movwf	6
  5965  0477  0801               	movf	1,w
  5966  0478  2303               	fcall	_MTOUCH_Button_Initialize
  5967  0479                     l189:	
  5968                           
  5969                           ;mtouch_button.c: 181: }
  5970                           ;mtouch_button.c: 182: Button_StateMachine[button->state](button);
  5971  0479  0020               	movlb	0	; select bank0
  5972  047A  0826               	movf	Button_Service@button,w
  5973  047B  00FC               	movwf	Button_State_Pressed@button
  5974  047C  0826               	movf	Button_Service@button,w
  5975  047D  3E02               	addlw	2
  5976  047E  0086               	movwf	6
  5977  047F  0187               	clrf	7
  5978  0480  3501               	lslf	1,w
  5979  0481  3E5B               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  5980  0482  0086               	movwf	6
  5981  0483  3F41               	moviw [1]fsr1
  5982  0484  008A               	movwf	10
  5983  0485  3F40               	moviw [0]fsr1
  5984  0486  000A               	callw
  5985  0487  3184               	pagesel	$
  5986  0488  0008               	return
  5987  0489                     __end_of_Button_Service:	
  5988  0489                     PL62:	
  5989  0489  0A26               	incf	Button_Service@button,w
  5990  048A  0086               	movwf	6
  5991  048B  0187               	clrf	7
  5992  048C  0801               	movf	1,w
  5993  048D  0008               	return
  5994  048E                     __end_ofPL62:	
  5995                           
  5996                           	psect	text38
  5997  0238                     __ptext38:	
  5998 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  5999 ;; Defined at:
  6000 ;;		line 529 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;  sensor          1    wreg     enum E5394
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  sensor          1    3[COMMON] enum E5394
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  1    wreg      unsigned char 
  6007 ;; Registers used:
  6008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6009 ;; Tracked objects:
  6010 ;;		On entry : 1F/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6014 ;;      Params:         0       0       0       0
  6015 ;;      Locals:         1       0       0       0
  6016 ;;      Temps:          0       0       0       0
  6017 ;;      Totals:         1       0       0       0
  6018 ;;Total ram usage:        1 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:    1
  6021 ;; This function calls:
  6022 ;;		___bmul
  6023 ;; This function is called by:
  6024 ;;		_Button_Service
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           
  6029                           ;psect for function _MTOUCH_Sensor_wasSampled
  6030  0238                     _MTOUCH_Sensor_wasSampled:	
  6031                           
  6032                           ;incstack = 0
  6033                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6034                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  6035  0238  00F3               	movwf	MTOUCH_Sensor_wasSampled@sensor
  6036                           
  6037                           ;mtouch_sensor.c: 531: if(sensor < 1)
  6038  0239  0873               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  6039  023A  1D03               	btfss	3,2
  6040  023B  3400               	retlw	0
  6041                           
  6042                           ;mtouch_sensor.c: 532: return (bool)mtouch_sensor[sensor].sampled;
  6043  023C  3009               	movlw	9
  6044  023D  00F0               	movwf	___bmul@multiplicand
  6045  023E  0873               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  6046  023F  21F8               	fcall	___bmul
  6047  0240  3E69               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  6048  0241  0086               	movwf	6
  6049  0242  0187               	clrf	7
  6050  0243  0C01               	rrf	1,w
  6051  0244  3901               	andlw	1
  6052  0245  0008               	return
  6053  0246                     __end_of_MTOUCH_Sensor_wasSampled:	
  6054                           ;mtouch_sensor.c: 533: else
  6055                           ;mtouch_sensor.c: 534: return 0;
  6056                           
  6057                           
  6058                           	psect	text39
  6059  0180                     __ptext39:	
  6060 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  6061 ;; Defined at:
  6062 ;;		line 502 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  sensor          1    wreg     enum E5394
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  sensor          1    0[COMMON] enum E5394
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      unsigned char 
  6069 ;; Registers used:
  6070 ;;		wreg
  6071 ;; Tracked objects:
  6072 ;;		On entry : 1F/0
  6073 ;;		On exit  : 1F/0
  6074 ;;		Unchanged: 1F/0
  6075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6076 ;;      Params:         0       0       0       0
  6077 ;;      Locals:         0       0       0       0
  6078 ;;      Temps:          0       0       0       0
  6079 ;;      Totals:         0       0       0       0
  6080 ;;Total ram usage:        0 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; This function calls:
  6083 ;;		Nothing
  6084 ;; This function is called by:
  6085 ;;		_Button_Service
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           
  6090                           ;psect for function _MTOUCH_Sensor_isCalibrated
  6091  0180                     _MTOUCH_Sensor_isCalibrated:	
  6092                           
  6093                           ;mtouch_sensor.c: 505: return 1;
  6094                           
  6095                           ;incstack = 0
  6096                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg]
  6097  0180  3401               	retlw	1
  6098  0181                     __end_of_MTOUCH_Sensor_isCalibrated:	
  6099                           
  6100                           	psect	text40
  6101  062B                     __ptext40:	
  6102 ;; *************** function _Button_State_NotPressed *****************
  6103 ;; Defined at:
  6104 ;;		line 205 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  button          1   12[COMMON] PTR struct .
  6107 ;;		 -> mtouch_button(16), 
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      void 
  6112 ;; Registers used:
  6113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 1F/0
  6116 ;;		On exit  : 1F/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6119 ;;      Params:         1       0       0       0
  6120 ;;      Locals:         0       0       0       0
  6121 ;;      Temps:          0       2       0       0
  6122 ;;      Totals:         1       2       0       0
  6123 ;;Total ram usage:        3 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    2
  6126 ;; This function calls:
  6127 ;;		_Button_Baseline_Update
  6128 ;;		_Button_DefaultCallback
  6129 ;;		_MTOUCH_Button_Initialize
  6130 ;; This function is called by:
  6131 ;;		_Button_Service
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           
  6136                           ;psect for function _Button_State_NotPressed
  6137  062B                     _Button_State_NotPressed:	
  6138                           
  6139                           ;mtouch_button.c: 208: if ((button->deviation) < (mtouch_button_deviation_t)(mtouch_butt
      +                          on_deviation_t)-10)
  6140                           
  6141                           ;incstack = 0
  6142                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6143  062B  087C               	movf	Button_State_NotPressed@button,w
  6144  062C  2451               	fcall	PL60	;call to abstracted procedure
  6145  062D  3E8A               	addlw	138
  6146                           
  6147                           ;mtouch_button.c: 209: {
  6148                           ;mtouch_button.c: 210: (button->counter)++;
  6149  062E  087C               	movf	Button_State_NotPressed@button,w
  6150  062F  1803               	skipnc
  6151  0630  2E45               	goto	L3
  6152  0631  235E               	fcall	PL54	;call to abstracted procedure
  6153  0632  1803               	skipnc
  6154  0633  0A81               	incf	1,f
  6155                           
  6156                           ;mtouch_button.c: 211: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)32))
  6157  0634  087C               	movf	Button_State_NotPressed@button,w
  6158  0635  3E0A               	addlw	10
  6159  0636  0086               	movwf	6
  6160  0637  0187               	clrf	7
  6161  0638  3F40               	moviw [0]fsr1
  6162  0639  2680               	fcall	PL46	;call to abstracted procedure
  6163  063A  1903               	skipnz
  6164  063B  0220               	subwf	??_Button_State_NotPressed,w
  6165                           
  6166                           ;mtouch_button.c: 212: {
  6167                           ;mtouch_button.c: 213: button->counter = (mtouch_button_statecounter_t)0;
  6168  063C  087C               	movf	Button_State_NotPressed@button,w
  6169  063D  1C03               	skipc
  6170  063E  2E67               	goto	L4
  6171  063F  267A               	fcall	PL42	;call to abstracted procedure
  6172                           
  6173                           ;mtouch_button.c: 214: MTOUCH_Button_Initialize(button->name);
  6174  0640  087C               	movf	Button_State_NotPressed@button,w
  6175  0641  0086               	movwf	6
  6176  0642  0801               	movf	1,w
  6177  0643  2303               	fcall	_MTOUCH_Button_Initialize
  6178  0644  2E66               	goto	l201
  6179  0645                     L3:	
  6180                           ;mtouch_button.c: 218: else if ((button->deviation) > (button->threshold))
  6181                           
  6182  0645  3E0E               	addlw	14
  6183  0646  0086               	movwf	6
  6184  0647  0187               	clrf	7
  6185  0648  0801               	movf	1,w
  6186  0649  3A80               	xorlw	128
  6187  064A  00A0               	movwf	??_Button_State_NotPressed
  6188  064B  087C               	movf	Button_State_NotPressed@button,w
  6189  064C  3E09               	addlw	9
  6190  064D  0086               	movwf	6
  6191  064E  0801               	movf	1,w
  6192  064F  3A80               	xorlw	128
  6193  0650  02A0               	subwf	??_Button_State_NotPressed,f
  6194                           
  6195                           ;mtouch_button.c: 219: {
  6196                           ;mtouch_button.c: 221: button->state = MTOUCH_BUTTON_STATE_pressed;
  6197  0651  087C               	movf	Button_State_NotPressed@button,w
  6198  0652  1803               	skipnc
  6199  0653  2E60               	goto	L5
  6200  0654  3E02               	addlw	2
  6201  0655  0086               	movwf	6
  6202  0656  3002               	movlw	2
  6203  0657  0081               	movwf	1
  6204                           
  6205                           ;mtouch_button.c: 222: button->counter = (mtouch_button_statecounter_t)0;
  6206  0658  087C               	movf	Button_State_NotPressed@button,w
  6207  0659  267A               	fcall	PL42	;call to abstracted procedure
  6208                           
  6209                           ;mtouch_button.c: 223: callback_pressed(button->name);
  6210  065A  087C               	movf	Button_State_NotPressed@button,w
  6211  065B  0086               	movwf	6
  6212  065C  0801               	movf	1,w
  6213  065D  00F0               	movwf	Button_DefaultCallback@button
  6214  065E  217E               	fcall	_Button_DefaultCallback
  6215                           
  6216                           ;mtouch_button.c: 224: }
  6217  065F  2E66               	goto	l201
  6218  0660                     L5:	
  6219                           ;mtouch_button.c: 225: else
  6220                           ;mtouch_button.c: 226: {
  6221                           ;mtouch_button.c: 228: button->counter = (mtouch_button_statecounter_t)0;
  6222                           
  6223  0660  3E0A               	addlw	10
  6224  0661  0086               	movwf	6
  6225  0662  3000               	movlw	0
  6226  0663  0187               	clrf	7
  6227  0664  3FC0               	movwi [0]fsr1
  6228  0665  3FC1               	movwi [1]fsr1
  6229  0666                     l201:	
  6230                           
  6231                           ;mtouch_button.c: 229: }
  6232                           ;mtouch_button.c: 232: (button->baseline_count)++;
  6233  0666  087C               	movf	Button_State_NotPressed@button,w
  6234  0667                     L4:	
  6235  0667  3E0C               	addlw	12
  6236  0668  25D3               	fcall	PL56	;call to abstracted procedure
  6237  0669  1803               	skipnc
  6238  066A  0A81               	incf	1,f
  6239                           
  6240                           ;mtouch_button.c: 233: if ((button->baseline_count) > ((mtouch_button_baselinecounter_t)
      +                          32))
  6241  066B  087C               	movf	Button_State_NotPressed@button,w
  6242  066C  3E0C               	addlw	12
  6243  066D  0086               	movwf	6
  6244  066E  0187               	clrf	7
  6245  066F  3F40               	moviw [0]fsr1
  6246  0670  0020               	movlb	0	; select bank0
  6247  0671  2680               	fcall	PL46	;call to abstracted procedure
  6248  0672  1903               	skipnz
  6249  0673  0220               	subwf	??_Button_State_NotPressed,w
  6250  0674  1C03               	skipc
  6251  0675  0008               	return
  6252                           
  6253                           ;mtouch_button.c: 234: {
  6254                           ;mtouch_button.c: 235: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  6255  0676  087C               	movf	Button_State_NotPressed@button,w
  6256  0677  231C               	fcall	PL50	;call to abstracted procedure
  6257                           
  6258                           ;mtouch_button.c: 236: Button_Baseline_Update(button);
  6259  0678  087C               	movf	Button_State_NotPressed@button,w
  6260  0679  2D4A               	ljmp	_Button_Baseline_Update
  6261  067A                     __end_of_Button_State_NotPressed:	
  6262  067A                     PL42:	
  6263  067A  3E0A               	addlw	10
  6264  067B  0086               	movwf	6
  6265  067C  3000               	movlw	0
  6266  067D  3FC0               	movwi [0]fsr1
  6267  067E  3FC1               	movwi [1]fsr1
  6268  067F  0008               	return
  6269  0680                     __end_ofPL42:	
  6270  0680                     PL46:	
  6271  0680  00A0               	movwf	??_Button_State_NotPressed
  6272  0681  3F41               	moviw [1]fsr1
  6273  0682  00A1               	movwf	??_Button_State_NotPressed+1
  6274  0683  3000               	movlw	0
  6275  0684  0221               	subwf	??_Button_State_NotPressed+1,w
  6276  0685  3421               	retlw	33
  6277  0686                     __end_ofPL46:	
  6278                           
  6279                           	psect	text41
  6280  0593                     __ptext41:	
  6281 ;; *************** function _Button_State_Initializing *****************
  6282 ;; Defined at:
  6283 ;;		line 186 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;  button          1   12[COMMON] PTR struct .
  6286 ;;		 -> mtouch_button(16), 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;		None
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  1    wreg      void 
  6291 ;; Registers used:
  6292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6293 ;; Tracked objects:
  6294 ;;		On entry : 1F/0
  6295 ;;		On exit  : 1F/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6298 ;;      Params:         1       0       0       0
  6299 ;;      Locals:         0       0       0       0
  6300 ;;      Temps:          0       4       0       0
  6301 ;;      Totals:         1       4       0       0
  6302 ;;Total ram usage:        5 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    3
  6305 ;; This function calls:
  6306 ;;		_Button_Baseline_Initialize
  6307 ;;		_Button_Baseline_Update
  6308 ;; This function is called by:
  6309 ;;		_Button_Service
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _Button_State_Initializing
  6315  0593                     _Button_State_Initializing:	
  6316                           
  6317                           ;mtouch_button.c: 189: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_statecounter_t)16)/2)
  6318                           
  6319                           ;incstack = 0
  6320                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6321  0593  25D9               	fcall	PL58	;call to abstracted procedure
  6322  0594  25CD               	fcall	PL52	;call to abstracted procedure
  6323  0595  3009               	movlw	9
  6324  0596  1903               	skipnz
  6325  0597  0220               	subwf	??_Button_State_Initializing,w
  6326                           
  6327                           ;mtouch_button.c: 190: {
  6328                           ;mtouch_button.c: 191: Button_Baseline_Initialize(button);
  6329  0598  087C               	movf	Button_State_Initializing@button,w
  6330  0599  1803               	skipnc
  6331  059A  2D9D               	goto	L6
  6332  059B  23D3               	fcall	_Button_Baseline_Initialize
  6333                           
  6334                           ;mtouch_button.c: 192: } else {
  6335  059C  2D9E               	goto	l2106
  6336  059D                     L6:	
  6337                           ;mtouch_button.c: 193: Button_Baseline_Update(button);
  6338                           
  6339  059D  254A               	fcall	_Button_Baseline_Update
  6340  059E                     l2106:	
  6341                           
  6342                           ;mtouch_button.c: 194: }
  6343                           ;mtouch_button.c: 197: (button->counter)++;
  6344  059E  087C               	movf	Button_State_Initializing@button,w
  6345  059F  3E0A               	addlw	10
  6346  05A0  25D3               	fcall	PL56	;call to abstracted procedure
  6347  05A1  1803               	skipnc
  6348  05A2  0A81               	incf	1,f
  6349                           
  6350                           ;mtouch_button.c: 198: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_statecounter_t)16))
  6351  05A3  25D9               	fcall	PL58	;call to abstracted procedure
  6352  05A4  0020               	movlb	0	; select bank0
  6353  05A5  25CD               	fcall	PL52	;call to abstracted procedure
  6354  05A6  3010               	movlw	16
  6355  05A7  1903               	skipnz
  6356  05A8  0220               	subwf	??_Button_State_Initializing,w
  6357  05A9  1C03               	skipc
  6358  05AA  0008               	return
  6359                           
  6360                           ;mtouch_button.c: 199: {
  6361                           ;mtouch_button.c: 200: button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4));
  6362  05AB  087C               	movf	Button_State_Initializing@button,w
  6363  05AC  3E05               	addlw	5
  6364  05AD  0086               	movwf	6
  6365  05AE  3F40               	moviw [0]fsr1
  6366  05AF  00A0               	movwf	??_Button_State_Initializing
  6367  05B0  3F41               	moviw [1]fsr1
  6368  05B1  00A1               	movwf	??_Button_State_Initializing+1
  6369  05B2  3F42               	moviw [2]fsr1
  6370  05B3  00A2               	movwf	??_Button_State_Initializing+2
  6371  05B4  3F43               	moviw [3]fsr1
  6372  05B5  00A3               	movwf	??_Button_State_Initializing+3
  6373  05B6  3004               	movlw	4
  6374  05B7                     u1095:	
  6375  05B7  36A3               	lsrf	??_Button_State_Initializing+3,f
  6376  05B8  0CA2               	rrf	??_Button_State_Initializing+2,f
  6377  05B9  0CA1               	rrf	??_Button_State_Initializing+1,f
  6378  05BA  0CA0               	rrf	??_Button_State_Initializing,f
  6379  05BB  0B89               	decfsz	9,f
  6380  05BC  2DB7               	goto	u1095
  6381  05BD  087C               	movf	Button_State_Initializing@button,w
  6382  05BE  3E03               	addlw	3
  6383  05BF  0086               	movwf	6
  6384  05C0  0187               	clrf	7
  6385  05C1  0820               	movf	??_Button_State_Initializing,w
  6386  05C2  3FC0               	movwi [0]fsr1
  6387  05C3  0821               	movf	??_Button_State_Initializing+1,w
  6388  05C4  3FC1               	movwi [1]fsr1
  6389                           
  6390                           ;mtouch_button.c: 201: button->state = MTOUCH_BUTTON_STATE_notPressed;
  6391  05C5  087C               	movf	Button_State_Initializing@button,w
  6392  05C6  3E02               	addlw	2
  6393  05C7  0086               	movwf	6
  6394  05C8  0181               	clrf	1
  6395  05C9  0A81               	incf	1,f
  6396                           
  6397                           ;mtouch_button.c: 202: button->counter = (mtouch_button_statecounter_t)0;
  6398  05CA  087C               	movf	Button_State_Initializing@button,w
  6399  05CB  267A               	fcall	PL42	;call to abstracted procedure
  6400  05CC  0008               	return
  6401  05CD                     __end_of_Button_State_Initializing:	
  6402  05CD                     PL52:	
  6403  05CD  00A0               	movwf	??_Button_State_Initializing
  6404  05CE  3F41               	moviw [1]fsr1
  6405  05CF  00A1               	movwf	??_Button_State_Initializing+1
  6406  05D0  3000               	movlw	0
  6407  05D1  0221               	subwf	??_Button_State_Initializing+1,w
  6408  05D2  0008               	return
  6409  05D3                     __end_ofPL52:	
  6410  05D3                     PL56:	
  6411  05D3  0086               	movwf	6
  6412  05D4  3001               	movlw	1
  6413  05D5  0187               	clrf	7
  6414  05D6  0781               	addwf	1,f
  6415  05D7  3141               	addfsr 1,1
  6416  05D8  0008               	return
  6417  05D9                     __end_ofPL56:	
  6418  05D9                     PL58:	
  6419  05D9  087C               	movf	Button_State_Initializing@button,w
  6420  05DA  3E0A               	addlw	10
  6421  05DB  0086               	movwf	6
  6422  05DC  0187               	clrf	7
  6423  05DD  3F40               	moviw [0]fsr1
  6424  05DE  0008               	return
  6425  05DF                     __end_ofPL58:	
  6426                           
  6427                           	psect	text42
  6428  0422                     __ptext42:	
  6429 ;; *************** function _Button_State_Pressed *****************
  6430 ;; Defined at:
  6431 ;;		line 240 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  button          1   12[COMMON] PTR struct .
  6434 ;;		 -> mtouch_button(16), 
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  1    wreg      void 
  6439 ;; Registers used:
  6440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6441 ;; Tracked objects:
  6442 ;;		On entry : 1F/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6446 ;;      Params:         1       0       0       0
  6447 ;;      Locals:         0       0       0       0
  6448 ;;      Temps:          0       2       0       0
  6449 ;;      Totals:         1       2       0       0
  6450 ;;Total ram usage:        3 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:    2
  6453 ;; This function calls:
  6454 ;;		_Button_DefaultCallback
  6455 ;;		_MTOUCH_Button_Initialize
  6456 ;; This function is called by:
  6457 ;;		_Button_Service
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function _Button_State_Pressed
  6463  0422                     _Button_State_Pressed:	
  6464                           
  6465                           ;mtouch_button.c: 243: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _Button_State_Pressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6469  0422  087C               	movf	Button_State_Pressed@button,w
  6470  0423  3E0A               	addlw	10
  6471  0424  0086               	movwf	6
  6472  0425  0187               	clrf	7
  6473  0426  3F40               	moviw [0]fsr1
  6474  0427  00A0               	movwf	??_Button_State_Pressed
  6475  0428  3F41               	moviw [1]fsr1
  6476  0429  00A1               	movwf	??_Button_State_Pressed+1
  6477  042A  3003               	movlw	3
  6478  042B  0221               	subwf	??_Button_State_Pressed+1,w
  6479  042C  30E8               	movlw	232
  6480  042D  1903               	skipnz
  6481  042E  0220               	subwf	??_Button_State_Pressed,w
  6482                           
  6483                           ;mtouch_button.c: 244: {
  6484                           ;mtouch_button.c: 245: MTOUCH_Button_Initialize(button->name);
  6485  042F  087C               	movf	Button_State_Pressed@button,w
  6486  0430  1C03               	skipc
  6487  0431  2C3B               	goto	L7
  6488  0432  0086               	movwf	6
  6489  0433  0801               	movf	1,w
  6490  0434  2303               	fcall	_MTOUCH_Button_Initialize
  6491                           
  6492                           ;mtouch_button.c: 246: callback_notPressed(button->name);
  6493  0435  087C               	movf	Button_State_Pressed@button,w
  6494  0436  0086               	movwf	6
  6495  0437  0187               	clrf	7
  6496  0438  0801               	movf	1,w
  6497  0439  00F0               	movwf	Button_DefaultCallback@button
  6498  043A  297E               	ljmp	l299
  6499  043B                     L7:	
  6500                           ;mtouch_button.c: 250: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold) >> 1))
  6501                           
  6502                           ;mtouch_button.c: 247: }
  6503                           
  6504  043B  2451               	fcall	PL60	;call to abstracted procedure
  6505  043C  00A0               	movwf	??_Button_State_Pressed
  6506  043D  087C               	movf	Button_State_Pressed@button,w
  6507  043E  3E0E               	addlw	14
  6508  043F  0086               	movwf	6
  6509  0440  3701               	asrf	1,w
  6510  0441  3A80               	xorlw	128
  6511  0442  02A0               	subwf	??_Button_State_Pressed,f
  6512  0443  1803               	skipnc
  6513  0444  0008               	return
  6514                           
  6515                           ;mtouch_button.c: 251: {
  6516                           ;mtouch_button.c: 252: button->state = MTOUCH_BUTTON_STATE_notPressed;
  6517  0445  087C               	movf	Button_State_Pressed@button,w
  6518  0446  3E02               	addlw	2
  6519  0447  0086               	movwf	6
  6520  0448  0181               	clrf	1
  6521  0449  0A81               	incf	1,f
  6522                           
  6523                           ;mtouch_button.c: 253: button->counter = (mtouch_button_statecounter_t)0;
  6524  044A  087C               	movf	Button_State_Pressed@button,w
  6525  044B  267A               	fcall	PL42	;call to abstracted procedure
  6526                           
  6527                           ;mtouch_button.c: 254: callback_notPressed(button->name);
  6528  044C  087C               	movf	Button_State_Pressed@button,w
  6529  044D  0086               	movwf	6
  6530  044E  0801               	movf	1,w
  6531  044F  00F0               	movwf	Button_DefaultCallback@button
  6532  0450  297E               	ljmp	l299
  6533  0451                     __end_of_Button_State_Pressed:	
  6534  0451                     PL60:	
  6535  0451  3E09               	addlw	9
  6536  0452  0086               	movwf	6
  6537  0453  0187               	clrf	7
  6538  0454  0801               	movf	1,w
  6539  0455  3A80               	xorlw	128
  6540  0456  0008               	return
  6541  0457                     __end_ofPL60:	
  6542                           
  6543                           	psect	text43
  6544  0303                     __ptext43:	
  6545 ;; *************** function _MTOUCH_Button_Initialize *****************
  6546 ;; Defined at:
  6547 ;;		line 130 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  name            1    wreg     enum E5405
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  name            1    0[COMMON] enum E5405
  6552 ;;  button          1    1[COMMON] PTR struct .
  6553 ;;		 -> mtouch_button(16), 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/3
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6563 ;;      Params:         0       0       0       0
  6564 ;;      Locals:         2       0       0       0
  6565 ;;      Temps:          0       0       0       0
  6566 ;;      Totals:         2       0       0       0
  6567 ;;Total ram usage:        2 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    1
  6570 ;; This function calls:
  6571 ;;		_MTOUCH_Sensor_Calibrate
  6572 ;; This function is called by:
  6573 ;;		_MTOUCH_Button_InitializeAll
  6574 ;;		_Button_Service
  6575 ;;		_Button_State_NotPressed
  6576 ;;		_Button_State_Pressed
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _MTOUCH_Button_Initialize
  6582  0303                     _MTOUCH_Button_Initialize:	
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6586                           ;MTOUCH_Button_Initialize@name stored from wreg
  6587  0303  00F0               	movwf	MTOUCH_Button_Initialize@name
  6588                           
  6589                           ;mtouch_button.c: 132: mtouch_button_t* button = &mtouch_button[name];
  6590  0304  0E70               	swapf	MTOUCH_Button_Initialize@name,w
  6591  0305  39F0               	andlw	240
  6592  0306  3E4B               	addlw	(low (_mtouch_button| 0))& (0+255)
  6593  0307  00F1               	movwf	MTOUCH_Button_Initialize@button
  6594                           
  6595                           ;mtouch_button.c: 134: button->state = MTOUCH_BUTTON_STATE_initializing;
  6596  0308  3E02               	addlw	2
  6597  0309  0086               	movwf	6
  6598  030A  0187               	clrf	7
  6599  030B  0181               	clrf	1
  6600                           
  6601                           ;mtouch_button.c: 135: button->baseline = (mtouch_button_baseline_t)0;
  6602  030C  0871               	movf	MTOUCH_Button_Initialize@button,w
  6603  030D  3E05               	addlw	5
  6604  030E  0086               	movwf	6
  6605  030F  3000               	movlw	0
  6606  0310  3FC0               	movwi [0]fsr1
  6607  0311  3FC1               	movwi [1]fsr1
  6608  0312  3FC2               	movwi [2]fsr1
  6609  0313  3FC3               	movwi [3]fsr1
  6610                           
  6611                           ;mtouch_button.c: 136: button->counter = (mtouch_button_statecounter_t)0;
  6612  0314  0871               	movf	MTOUCH_Button_Initialize@button,w
  6613  0315  267A               	fcall	PL42	;call to abstracted procedure
  6614                           
  6615                           ;mtouch_button.c: 137: button->baseline_count = (mtouch_button_baselinecounter_t)0;
  6616  0316  0871               	movf	MTOUCH_Button_Initialize@button,w
  6617  0317  231C               	fcall	PL50	;call to abstracted procedure
  6618                           
  6619                           ;mtouch_button.c: 139: MTOUCH_Sensor_Calibrate(button->sensor);
  6620  0318  0A71               	incf	MTOUCH_Button_Initialize@button,w
  6621  0319  0086               	movwf	6
  6622  031A  0801               	movf	1,w
  6623  031B  297F               	ljmp	l509
  6624  031C                     __end_of_MTOUCH_Button_Initialize:	
  6625  031C                     PL50:	
  6626  031C  3E0C               	addlw	12
  6627  031D  0086               	movwf	6
  6628  031E  3000               	movlw	0
  6629  031F  3FC0               	movwi [0]fsr1
  6630  0320  3FC1               	movwi [1]fsr1
  6631  0321  0008               	return
  6632  0322                     __end_ofPL50:	
  6633                           
  6634                           	psect	text44
  6635  017F                     __ptext44:	
  6636 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  6637 ;; Defined at:
  6638 ;;		line 508 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  sensor          1    wreg     enum E5394
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  sensor          1    0[COMMON] enum E5394
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/3
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6652 ;;      Params:         0       0       0       0
  6653 ;;      Locals:         0       0       0       0
  6654 ;;      Temps:          0       0       0       0
  6655 ;;      Totals:         0       0       0       0
  6656 ;;Total ram usage:        0 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_MTOUCH_Button_Initialize
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _MTOUCH_Sensor_Calibrate
  6667  017F                     _MTOUCH_Sensor_Calibrate:	
  6668  017F                     l509:	
  6669                           ;incstack = 0
  6670                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
  6671                           
  6672  017F  0008               	return
  6673  0180                     __end_of_MTOUCH_Sensor_Calibrate:	
  6674                           
  6675                           	psect	text45
  6676  017E                     __ptext45:	
  6677 ;; *************** function _Button_DefaultCallback *****************
  6678 ;; Defined at:
  6679 ;;		line 458 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;  button          1    0[COMMON] enum E5405
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;		None
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      void 
  6686 ;; Registers used:
  6687 ;;		None
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6693 ;;      Params:         1       0       0       0
  6694 ;;      Locals:         0       0       0       0
  6695 ;;      Temps:          0       0       0       0
  6696 ;;      Totals:         1       0       0       0
  6697 ;;Total ram usage:        1 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_Button_State_NotPressed
  6703 ;;		_Button_State_Pressed
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _Button_DefaultCallback
  6709  017E                     _Button_DefaultCallback:	
  6710  017E                     l299:	
  6711                           ;incstack = 0
  6712                           ; Regs used in _Button_DefaultCallback: []
  6713                           
  6714  017E  0008               	return
  6715  017F                     __end_of_Button_DefaultCallback:	
  6716                           
  6717                           	psect	text46
  6718  054A                     __ptext46:	
  6719 ;; *************** function _Button_Baseline_Update *****************
  6720 ;; Defined at:
  6721 ;;		line 416 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  button          1    wreg     PTR struct .
  6724 ;;		 -> mtouch_button(16), 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  button          1    6[COMMON] PTR struct .
  6727 ;;		 -> mtouch_button(16), 
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6732 ;; Tracked objects:
  6733 ;;		On entry : 1F/0
  6734 ;;		On exit  : 1F/0
  6735 ;;		Unchanged: 1F/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6737 ;;      Params:         0       0       0       0
  6738 ;;      Locals:         1       0       0       0
  6739 ;;      Temps:          6       0       0       0
  6740 ;;      Totals:         7       0       0       0
  6741 ;;Total ram usage:        7 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_Button_State_Initializing
  6747 ;;		_Button_State_NotPressed
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _Button_Baseline_Update
  6753  054A                     _Button_Baseline_Update:	
  6754                           
  6755                           ;incstack = 0
  6756                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  6757                           ;Button_Baseline_Update@button stored from wreg
  6758  054A  00F6               	movwf	Button_Baseline_Update@button
  6759                           
  6760                           ;mtouch_button.c: 418: if (GIE == (uint8_t)1)
  6761  054B  1F8B               	btfss	11,7	;volatile
  6762  054C  2D51               	goto	l1988
  6763                           
  6764                           ;mtouch_button.c: 419: {
  6765                           ;mtouch_button.c: 420: GIE = (uint8_t)0;
  6766  054D  138B               	bcf	11,7	;volatile
  6767                           
  6768                           ;mtouch_button.c: 421: button->baseline -= (button->baseline) >> ((uint8_t)4);
  6769                           
  6770                           ;mtouch_button.c: 422: button->baseline += button->reading;
  6771  054E  2554               	fcall	PL32	;call to abstracted procedure
  6772                           
  6773                           ;mtouch_button.c: 423: GIE = (uint8_t)1;
  6774  054F  178B               	bsf	11,7	;volatile
  6775                           
  6776                           ;mtouch_button.c: 424: }
  6777  0550  0008               	return
  6778  0551                     l1988:	
  6779                           
  6780                           ;mtouch_button.c: 425: else
  6781                           ;mtouch_button.c: 426: {
  6782                           ;mtouch_button.c: 427: button->baseline -= (button->baseline) >> ((uint8_t)4);
  6783  0551  0876               	movf	Button_Baseline_Update@button,w
  6784                           
  6785                           ;mtouch_button.c: 428: button->baseline += button->reading;
  6786  0552  2554               	fcall	PL32	;call to abstracted procedure
  6787  0553  0008               	return
  6788  0554                     __end_of_Button_Baseline_Update:	
  6789  0554                     PL32:	
  6790  0554  3E05               	addlw	5
  6791  0555  0086               	movwf	6
  6792  0556  0187               	clrf	7
  6793  0557  3F40               	moviw [0]fsr1
  6794  0558  00F0               	movwf	??_Button_Baseline_Update
  6795  0559  3F41               	moviw [1]fsr1
  6796  055A  00F1               	movwf	??_Button_Baseline_Update+1
  6797  055B  3F42               	moviw [2]fsr1
  6798  055C  00F2               	movwf	??_Button_Baseline_Update+2
  6799  055D  3F43               	moviw [3]fsr1
  6800  055E  00F3               	movwf	??_Button_Baseline_Update+3
  6801  055F  3004               	movlw	4
  6802  0560                     u935:	
  6803  0560  36F3               	lsrf	??_Button_Baseline_Update+3,f
  6804  0561  0CF2               	rrf	??_Button_Baseline_Update+2,f
  6805  0562  0CF1               	rrf	??_Button_Baseline_Update+1,f
  6806  0563  0CF0               	rrf	??_Button_Baseline_Update,f
  6807  0564  0B89               	decfsz	9,f
  6808  0565  2D60               	goto	u935
  6809  0566  0876               	movf	Button_Baseline_Update@button,w
  6810  0567  3E05               	addlw	5
  6811  0568  0086               	movwf	6
  6812  0569  0187               	clrf	7
  6813  056A  0870               	movf	??_Button_Baseline_Update,w
  6814  056B  0281               	subwf	1,f
  6815  056C  3141               	addfsr 1,1
  6816  056D  0871               	movf	??_Button_Baseline_Update+1,w
  6817  056E  3B81               	subwfb	1,f
  6818  056F  3141               	addfsr 1,1
  6819  0570  0872               	movf	??_Button_Baseline_Update+2,w
  6820  0571  3B81               	subwfb	1,f
  6821  0572  3141               	addfsr 1,1
  6822  0573  0873               	movf	??_Button_Baseline_Update+3,w
  6823  0574  3B81               	subwfb	1,f
  6824  0575  317D               	addfsr 1,-3
  6825  0576  0876               	movf	Button_Baseline_Update@button,w
  6826  0577  3E03               	addlw	3
  6827  0578  0086               	movwf	6
  6828  0579  0187               	clrf	7
  6829  057A  3F40               	moviw [0]fsr1
  6830  057B  00F0               	movwf	??_Button_Baseline_Update
  6831  057C  3F41               	moviw [1]fsr1
  6832  057D  00F1               	movwf	??_Button_Baseline_Update+1
  6833  057E  0870               	movf	??_Button_Baseline_Update,w
  6834  057F  00F2               	movwf	??_Button_Baseline_Update+2
  6835  0580  0871               	movf	??_Button_Baseline_Update+1,w
  6836  0581  00F3               	movwf	??_Button_Baseline_Update+3
  6837  0582  01F4               	clrf	??_Button_Baseline_Update+4
  6838  0583  01F5               	clrf	??_Button_Baseline_Update+5
  6839  0584  0876               	movf	Button_Baseline_Update@button,w
  6840  0585  3E05               	addlw	5
  6841  0586  0086               	movwf	6
  6842  0587  0872               	movf	??_Button_Baseline_Update+2,w
  6843  0588  0781               	addwf	1,f
  6844  0589  3141               	addfsr 1,1
  6845  058A  0873               	movf	??_Button_Baseline_Update+3,w
  6846  058B  3D81               	addwfc	1,f
  6847  058C  3141               	addfsr 1,1
  6848  058D  0874               	movf	??_Button_Baseline_Update+4,w
  6849  058E  3D81               	addwfc	1,f
  6850  058F  3141               	addfsr 1,1
  6851  0590  0875               	movf	??_Button_Baseline_Update+5,w
  6852  0591  3D81               	addwfc	1,f
  6853  0592  0008               	return
  6854  0593                     __end_ofPL32:	
  6855                           
  6856                           	psect	text47
  6857  03D3                     __ptext47:	
  6858 ;; *************** function _Button_Baseline_Initialize *****************
  6859 ;; Defined at:
  6860 ;;		line 410 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;  button          1    wreg     PTR struct .
  6863 ;;		 -> mtouch_button(16), 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  button          1   11[COMMON] PTR struct .
  6866 ;;		 -> mtouch_button(16), 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 1F/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6876 ;;      Params:         0       0       0       0
  6877 ;;      Locals:         1       0       0       0
  6878 ;;      Temps:          4       0       0       0
  6879 ;;      Totals:         5       0       0       0
  6880 ;;Total ram usage:        5 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    2
  6883 ;; This function calls:
  6884 ;;		_MTOUCH_Sensor_RawSample_Get
  6885 ;; This function is called by:
  6886 ;;		_Button_State_Initializing
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _Button_Baseline_Initialize
  6892  03D3                     _Button_Baseline_Initialize:	
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6896                           ;Button_Baseline_Initialize@button stored from wreg
  6897  03D3  00FB               	movwf	Button_Baseline_Initialize@button
  6898                           
  6899                           ;mtouch_button.c: 412: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
  6900  03D4  0A7B               	incf	Button_Baseline_Initialize@button,w
  6901  03D5  0086               	movwf	6
  6902  03D6  0187               	clrf	7
  6903  03D7  0801               	movf	1,w
  6904  03D8  228A               	fcall	_MTOUCH_Sensor_RawSample_Get
  6905  03D9  0873               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  6906  03DA  00F7               	movwf	??_Button_Baseline_Initialize
  6907  03DB  0874               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  6908  03DC  00F8               	movwf	??_Button_Baseline_Initialize+1
  6909  03DD  01F9               	clrf	??_Button_Baseline_Initialize+2
  6910  03DE  01FA               	clrf	??_Button_Baseline_Initialize+3
  6911  03DF  087B               	movf	Button_Baseline_Initialize@button,w
  6912  03E0  3E05               	addlw	5
  6913  03E1  0086               	movwf	6
  6914  03E2  0187               	clrf	7
  6915  03E3  0877               	movf	??_Button_Baseline_Initialize,w
  6916  03E4  3FC0               	movwi [0]fsr1
  6917  03E5  0878               	movf	??_Button_Baseline_Initialize+1,w
  6918  03E6  3FC1               	movwi [1]fsr1
  6919  03E7  0879               	movf	??_Button_Baseline_Initialize+2,w
  6920  03E8  3FC2               	movwi [2]fsr1
  6921  03E9  087A               	movf	??_Button_Baseline_Initialize+3,w
  6922  03EA  3FC3               	movwi [3]fsr1
  6923                           
  6924                           ;mtouch_button.c: 413: button->baseline <<= ((uint8_t)4);
  6925  03EB  087B               	movf	Button_Baseline_Initialize@button,w
  6926  03EC  3E05               	addlw	5
  6927  03ED  0086               	movwf	6
  6928  03EE  3004               	movlw	4
  6929  03EF                     u915:	
  6930  03EF  3581               	lslf	1,f
  6931  03F0  3141               	addfsr 1,1
  6932  03F1  0D81               	rlf	1,f
  6933  03F2  3141               	addfsr 1,1
  6934  03F3  0D81               	rlf	1,f
  6935  03F4  3141               	addfsr 1,1
  6936  03F5  0D81               	rlf	1,f
  6937  03F6  317D               	addfsr 1,-3
  6938  03F7  0B89               	decfsz	9,f
  6939  03F8  2BEF               	goto	u915
  6940  03F9  0008               	return
  6941  03FA                     __end_of_Button_Baseline_Initialize:	
  6942                           
  6943                           	psect	text48
  6944  048E                     __ptext48:	
  6945 ;; *************** function _Button_Reading_Update *****************
  6946 ;; Defined at:
  6947 ;;		line 394 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6948 ;; Parameters:    Size  Location     Type
  6949 ;;  button          1    wreg     PTR struct .
  6950 ;;		 -> mtouch_button(16), 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  button          1    9[COMMON] PTR struct .
  6953 ;;		 -> mtouch_button(16), 
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  1    wreg      void 
  6956 ;; Registers used:
  6957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6958 ;; Tracked objects:
  6959 ;;		On entry : 1F/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6963 ;;      Params:         0       0       0       0
  6964 ;;      Locals:         1       0       0       0
  6965 ;;      Temps:          2       0       0       0
  6966 ;;      Totals:         3       0       0       0
  6967 ;;Total ram usage:        3 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; Hardware stack levels required when called:    2
  6970 ;; This function calls:
  6971 ;;		_MTOUCH_Sensor_RawSample_Get
  6972 ;; This function is called by:
  6973 ;;		_Button_Service
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           
  6978                           ;psect for function _Button_Reading_Update
  6979  048E                     _Button_Reading_Update:	
  6980                           
  6981                           ;incstack = 0
  6982                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6983                           ;Button_Reading_Update@button stored from wreg
  6984  048E  00F9               	movwf	Button_Reading_Update@button
  6985                           
  6986                           ;mtouch_button.c: 396: if (GIE == (uint8_t)1)
  6987  048F  1F8B               	btfss	11,7	;volatile
  6988  0490  2C97               	goto	l2084
  6989                           
  6990                           ;mtouch_button.c: 397: {
  6991                           ;mtouch_button.c: 398: GIE = (uint8_t)0;
  6992  0491  138B               	bcf	11,7	;volatile
  6993                           
  6994                           ;mtouch_button.c: 399: button->reading -= button->reading>>(uint8_t)2;
  6995                           
  6996                           ;mtouch_button.c: 400: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor)>>(
      +                          uint8_t)2;
  6997  0492  249C               	fcall	PL34	;call to abstracted procedure
  6998  0493  228A               	fcall	_MTOUCH_Sensor_RawSample_Get
  6999  0494  24B5               	fcall	PL36	;call to abstracted procedure
  7000                           
  7001                           ;mtouch_button.c: 401: GIE = (uint8_t)1;
  7002  0495  178B               	bsf	11,7	;volatile
  7003                           
  7004                           ;mtouch_button.c: 402: }
  7005  0496  0008               	return
  7006  0497                     l2084:	
  7007                           
  7008                           ;mtouch_button.c: 403: else
  7009                           ;mtouch_button.c: 404: {
  7010                           ;mtouch_button.c: 405: button->reading -= button->reading>>(uint8_t)2;
  7011  0497  0879               	movf	Button_Reading_Update@button,w
  7012                           
  7013                           ;mtouch_button.c: 406: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor)>>(
      +                          uint8_t)2;
  7014  0498  249C               	fcall	PL34	;call to abstracted procedure
  7015  0499  228A               	fcall	_MTOUCH_Sensor_RawSample_Get
  7016  049A  24B5               	fcall	PL36	;call to abstracted procedure
  7017  049B  0008               	return
  7018  049C                     __end_of_Button_Reading_Update:	
  7019  049C                     PL34:	
  7020  049C  3E03               	addlw	3
  7021  049D  0086               	movwf	6
  7022  049E  0187               	clrf	7
  7023  049F  3F40               	moviw [0]fsr1
  7024  04A0  00F7               	movwf	??_Button_Reading_Update
  7025  04A1  3F41               	moviw [1]fsr1
  7026  04A2  00F8               	movwf	??_Button_Reading_Update+1
  7027  04A3  36F8               	lsrf	??_Button_Reading_Update+1,f
  7028  04A4  0CF7               	rrf	??_Button_Reading_Update,f
  7029  04A5  36F8               	lsrf	??_Button_Reading_Update+1,f
  7030  04A6  0CF7               	rrf	??_Button_Reading_Update,f
  7031  04A7  0879               	movf	Button_Reading_Update@button,w
  7032  04A8  3E03               	addlw	3
  7033  04A9  0086               	movwf	6
  7034  04AA  0877               	movf	??_Button_Reading_Update,w
  7035  04AB  0281               	subwf	1,f
  7036  04AC  3141               	addfsr 1,1
  7037  04AD  0878               	movf	??_Button_Reading_Update+1,w
  7038  04AE  3B81               	subwfb	1,f
  7039  04AF  317F               	addfsr 1,-1
  7040  04B0  0A79               	incf	Button_Reading_Update@button,w
  7041  04B1  0086               	movwf	6
  7042  04B2  0187               	clrf	7
  7043  04B3  0801               	movf	1,w
  7044  04B4  0008               	return
  7045  04B5                     __end_ofPL34:	
  7046  04B5                     PL36:	
  7047  04B5  0873               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  7048  04B6  00F7               	movwf	??_Button_Reading_Update
  7049  04B7  0874               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  7050  04B8  00F8               	movwf	??_Button_Reading_Update+1
  7051  04B9  36F8               	lsrf	??_Button_Reading_Update+1,f
  7052  04BA  0CF7               	rrf	??_Button_Reading_Update,f
  7053  04BB  36F8               	lsrf	??_Button_Reading_Update+1,f
  7054  04BC  0CF7               	rrf	??_Button_Reading_Update,f
  7055  04BD  0879               	movf	Button_Reading_Update@button,w
  7056  04BE  3E03               	addlw	3
  7057  04BF  0086               	movwf	6
  7058  04C0  0187               	clrf	7
  7059  04C1  0877               	movf	??_Button_Reading_Update,w
  7060  04C2  0781               	addwf	1,f
  7061  04C3  3141               	addfsr 1,1
  7062  04C4  0878               	movf	??_Button_Reading_Update+1,w
  7063  04C5  3D81               	addwfc	1,f
  7064  04C6  317F               	addfsr 1,-1
  7065  04C7  0008               	return
  7066  04C8                     __end_ofPL36:	
  7067                           
  7068                           	psect	text49
  7069  028A                     __ptext49:	
  7070 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  7071 ;; Defined at:
  7072 ;;		line 393 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;  name            1    wreg     enum E5394
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;  name            1    6[COMMON] enum E5394
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  2    3[COMMON] unsigned int 
  7079 ;; Registers used:
  7080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 1F/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7086 ;;      Params:         3       0       0       0
  7087 ;;      Locals:         1       0       0       0
  7088 ;;      Temps:          0       0       0       0
  7089 ;;      Totals:         4       0       0       0
  7090 ;;Total ram usage:        4 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    1
  7093 ;; This function calls:
  7094 ;;		___bmul
  7095 ;; This function is called by:
  7096 ;;		_Button_Reading_Update
  7097 ;;		_Button_Baseline_Initialize
  7098 ;;		_main
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           
  7103                           ;psect for function _MTOUCH_Sensor_RawSample_Get
  7104  028A                     _MTOUCH_Sensor_RawSample_Get:	
  7105                           
  7106                           ;incstack = 0
  7107                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7108                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
  7109  028A  00F6               	movwf	MTOUCH_Sensor_RawSample_Get@name
  7110                           
  7111                           ;mtouch_sensor.c: 395: if (name < 1)
  7112  028B  0876               	movf	MTOUCH_Sensor_RawSample_Get@name,w
  7113  028C  1D03               	btfss	3,2
  7114  028D  2A9A               	goto	l1892
  7115                           
  7116                           ;mtouch_sensor.c: 396: {
  7117                           ;mtouch_sensor.c: 397: return mtouch_sensor[name].rawSample;
  7118  028E  3009               	movlw	9
  7119  028F  00F0               	movwf	___bmul@multiplicand
  7120  0290  0876               	movf	MTOUCH_Sensor_RawSample_Get@name,w
  7121  0291  21F8               	fcall	___bmul
  7122  0292  3E67               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
  7123  0293  0086               	movwf	6
  7124  0294  0187               	clrf	7
  7125  0295  3F40               	moviw [0]fsr1
  7126  0296  00F3               	movwf	?_MTOUCH_Sensor_RawSample_Get
  7127  0297  3F41               	moviw [1]fsr1
  7128  0298  00F4               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
  7129  0299  0008               	return
  7130  029A                     l1892:	
  7131                           
  7132                           ;mtouch_sensor.c: 399: else
  7133                           ;mtouch_sensor.c: 400: return (mtouch_sensor_sample_t)0;
  7134  029A  01F3               	clrf	?_MTOUCH_Sensor_RawSample_Get
  7135  029B  01F4               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
  7136  029C  0008               	return
  7137  029D                     __end_of_MTOUCH_Sensor_RawSample_Get:	
  7138                           
  7139                           	psect	text50
  7140  01F8                     __ptext50:	
  7141 ;; *************** function ___bmul *****************
  7142 ;; Defined at:
  7143 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul8.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  multiplier      1    wreg     unsigned char 
  7146 ;;  multiplicand    1    0[COMMON] unsigned char 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  multiplier      1    2[COMMON] unsigned char 
  7149 ;;  product         1    1[COMMON] unsigned char 
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  1    wreg      unsigned char 
  7152 ;; Registers used:
  7153 ;;		wreg, status,2, status,0
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/1
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7159 ;;      Params:         1       0       0       0
  7160 ;;      Locals:         2       0       0       0
  7161 ;;      Temps:          0       0       0       0
  7162 ;;      Totals:         3       0       0       0
  7163 ;;Total ram usage:        3 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; This function calls:
  7166 ;;		Nothing
  7167 ;; This function is called by:
  7168 ;;		_MTOUCH_Sensor_Initialize
  7169 ;;		_Sensor_Service
  7170 ;;		_Sensor_Acq_ExecuteScan
  7171 ;;		_MTOUCH_Sensor_RawSample_Get
  7172 ;;		_MTOUCH_Sensor_Enable
  7173 ;;		_MTOUCH_Sensor_wasSampled
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           
  7178                           ;psect for function ___bmul
  7179  01F8                     ___bmul:	
  7180                           
  7181                           ;incstack = 0
  7182                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7183                           ;___bmul@multiplier stored from wreg
  7184  01F8  00F2               	movwf	___bmul@multiplier
  7185  01F9  01F1               	clrf	___bmul@product
  7186  01FA                     l1866:	
  7187  01FA  0870               	movf	___bmul@multiplicand,w
  7188  01FB  1872               	btfsc	___bmul@multiplier,0
  7189  01FC  07F1               	addwf	___bmul@product,f
  7190  01FD  35F0               	lslf	___bmul@multiplicand,f
  7191  01FE  36F2               	lsrf	___bmul@multiplier,f
  7192  01FF  0872               	movf	___bmul@multiplier,w
  7193  0200  1D03               	btfss	3,2
  7194  0201  29FA               	goto	l1866
  7195  0202  0871               	movf	___bmul@product,w
  7196  0203  0008               	return
  7197  0204                     __end_of___bmul:	
  7198                           
  7199                           	psect	text51
  7200  06E9                     __ptext51:	
  7201 ;; *************** function _Button_Deviation_Update *****************
  7202 ;; Defined at:
  7203 ;;		line 345 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  button          1    wreg     PTR struct .
  7206 ;;		 -> mtouch_button(16), 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  button          1    4[BANK0 ] PTR struct .
  7209 ;;		 -> mtouch_button(16), 
  7210 ;;  deviation       4    0[BANK0 ] long 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      void 
  7213 ;; Registers used:
  7214 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7215 ;; Tracked objects:
  7216 ;;		On entry : 1F/0
  7217 ;;		On exit  : 1F/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7220 ;;      Params:         0       0       0       0
  7221 ;;      Locals:         0       5       0       0
  7222 ;;      Temps:         10       0       0       0
  7223 ;;      Totals:        10       5       0       0
  7224 ;;Total ram usage:       15 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; This function calls:
  7227 ;;		Nothing
  7228 ;; This function is called by:
  7229 ;;		_Button_Service
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           
  7234                           ;psect for function _Button_Deviation_Update
  7235  06E9                     _Button_Deviation_Update:	
  7236                           
  7237                           ;incstack = 0
  7238                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  7239                           ;Button_Deviation_Update@button stored from wreg
  7240  06E9  00A4               	movwf	Button_Deviation_Update@button
  7241                           
  7242                           ;mtouch_button.c: 347: int32_t deviation;
  7243                           ;mtouch_button.c: 349: deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4)));
  7244  06EA  3E05               	addlw	5
  7245  06EB  0086               	movwf	6
  7246  06EC  0187               	clrf	7
  7247  06ED  3F40               	moviw [0]fsr1
  7248  06EE  00F0               	movwf	??_Button_Deviation_Update
  7249  06EF  3F41               	moviw [1]fsr1
  7250  06F0  00F1               	movwf	??_Button_Deviation_Update+1
  7251  06F1  3F42               	moviw [2]fsr1
  7252  06F2  00F2               	movwf	??_Button_Deviation_Update+2
  7253  06F3  3F43               	moviw [3]fsr1
  7254  06F4  00F3               	movwf	??_Button_Deviation_Update+3
  7255  06F5  3004               	movlw	4
  7256  06F6                     u1035:	
  7257  06F6  36F3               	lsrf	??_Button_Deviation_Update+3,f
  7258  06F7  0CF2               	rrf	??_Button_Deviation_Update+2,f
  7259  06F8  0CF1               	rrf	??_Button_Deviation_Update+1,f
  7260  06F9  0CF0               	rrf	??_Button_Deviation_Update,f
  7261  06FA  0B89               	decfsz	9,f
  7262  06FB  2EF6               	goto	u1035
  7263  06FC  0824               	movf	Button_Deviation_Update@button,w
  7264  06FD  3E03               	addlw	3
  7265  06FE  0086               	movwf	6
  7266  06FF  0187               	clrf	7
  7267  0700  3F40               	moviw [0]fsr1
  7268  0701  00F4               	movwf	??_Button_Deviation_Update+4
  7269  0702  3F41               	moviw [1]fsr1
  7270  0703  00F5               	movwf	??_Button_Deviation_Update+5
  7271  0704  0874               	movf	??_Button_Deviation_Update+4,w
  7272  0705  00F6               	movwf	??_Button_Deviation_Update+6
  7273  0706  0875               	movf	??_Button_Deviation_Update+5,w
  7274  0707  00F7               	movwf	??_Button_Deviation_Update+7
  7275  0708  01F8               	clrf	??_Button_Deviation_Update+8
  7276  0709  01F9               	clrf	??_Button_Deviation_Update+9
  7277  070A  0870               	movf	??_Button_Deviation_Update,w
  7278  070B  02F6               	subwf	??_Button_Deviation_Update+6,f
  7279  070C  0871               	movf	??_Button_Deviation_Update+1,w
  7280  070D  3BF7               	subwfb	??_Button_Deviation_Update+7,f
  7281  070E  0872               	movf	??_Button_Deviation_Update+2,w
  7282  070F  3BF8               	subwfb	??_Button_Deviation_Update+8,f
  7283  0710  0873               	movf	??_Button_Deviation_Update+3,w
  7284  0711  3BF9               	subwfb	??_Button_Deviation_Update+9,f
  7285  0712  0879               	movf	??_Button_Deviation_Update+9,w
  7286  0713  00A3               	movwf	Button_Deviation_Update@deviation+3
  7287  0714  0878               	movf	??_Button_Deviation_Update+8,w
  7288  0715  00A2               	movwf	Button_Deviation_Update@deviation+2
  7289  0716  0877               	movf	??_Button_Deviation_Update+7,w
  7290  0717  00A1               	movwf	Button_Deviation_Update@deviation+1
  7291  0718  0876               	movf	??_Button_Deviation_Update+6,w
  7292  0719  00A0               	movwf	Button_Deviation_Update@deviation
  7293                           
  7294                           ;mtouch_button.c: 352: deviation = deviation >> (button->scaling);
  7295  071A  0824               	movf	Button_Deviation_Update@button,w
  7296  071B  3E0F               	addlw	15
  7297  071C  0086               	movwf	6
  7298  071D  0A01               	incf	1,w
  7299  071E  2F23               	goto	u1040
  7300  071F                     u1045:	
  7301  071F  37A3               	asrf	Button_Deviation_Update@deviation+3,f
  7302  0720  0CA2               	rrf	Button_Deviation_Update@deviation+2,f
  7303  0721  0CA1               	rrf	Button_Deviation_Update@deviation+1,f
  7304  0722  0CA0               	rrf	Button_Deviation_Update@deviation,f
  7305  0723                     u1040:	
  7306  0723  0B89               	decfsz	9,f
  7307  0724  2F1F               	goto	u1045
  7308                           
  7309                           ;mtouch_button.c: 355: if (deviation > ((127)))
  7310  0725  1BA3               	btfsc	Button_Deviation_Update@deviation+3,7
  7311  0726  2F39               	goto	l2094
  7312  0727  0823               	movf	Button_Deviation_Update@deviation+3,w
  7313  0728  1D03               	btfss	3,2
  7314  0729  2F34               	goto	l2092
  7315  072A  0822               	movf	Button_Deviation_Update@deviation+2,w
  7316  072B  1D03               	btfss	3,2
  7317  072C  2F34               	goto	l2092
  7318  072D  0821               	movf	Button_Deviation_Update@deviation+1,w
  7319  072E  1D03               	btfss	3,2
  7320  072F  2F34               	goto	l2092
  7321  0730  3080               	movlw	128
  7322  0731  0220               	subwf	Button_Deviation_Update@deviation,w
  7323  0732  1C03               	btfss	3,0
  7324  0733  2F39               	goto	l2094
  7325  0734                     l2092:	
  7326                           
  7327                           ;mtouch_button.c: 356: {
  7328                           ;mtouch_button.c: 357: deviation = ((127));
  7329  0734  307F               	movlw	127
  7330  0735  00A0               	movwf	Button_Deviation_Update@deviation
  7331  0736  01A1               	clrf	Button_Deviation_Update@deviation+1
  7332  0737  01A2               	clrf	Button_Deviation_Update@deviation+2
  7333  0738  01A3               	clrf	Button_Deviation_Update@deviation+3
  7334  0739                     l2094:	
  7335                           
  7336                           ;mtouch_button.c: 358: }
  7337                           ;mtouch_button.c: 359: if (deviation < ((-128)))
  7338  0739  1FA3               	btfss	Button_Deviation_Update@deviation+3,7
  7339  073A  2F4B               	goto	l2098
  7340  073B  3080               	movlw	128
  7341  073C  0220               	subwf	Button_Deviation_Update@deviation,w
  7342  073D  30FF               	movlw	255
  7343  073E  3B21               	subwfb	Button_Deviation_Update@deviation+1,w
  7344  073F  30FF               	movlw	255
  7345  0740  3B22               	subwfb	Button_Deviation_Update@deviation+2,w
  7346  0741  30FF               	movlw	255
  7347  0742  3B23               	subwfb	Button_Deviation_Update@deviation+3,w
  7348  0743  1803               	btfsc	3,0
  7349  0744  2F4B               	goto	l2098
  7350                           
  7351                           ;mtouch_button.c: 360: {
  7352                           ;mtouch_button.c: 361: deviation = ((-128));
  7353  0745  30FF               	movlw	255
  7354  0746  00A3               	movwf	Button_Deviation_Update@deviation+3
  7355  0747  00A2               	movwf	Button_Deviation_Update@deviation+2
  7356  0748  00A1               	movwf	Button_Deviation_Update@deviation+1
  7357  0749  3080               	movlw	128
  7358  074A  00A0               	movwf	Button_Deviation_Update@deviation
  7359  074B                     l2098:	
  7360                           
  7361                           ;mtouch_button.c: 362: }
  7362                           ;mtouch_button.c: 364: button->deviation = (mtouch_button_deviation_t)deviation;
  7363  074B  0824               	movf	Button_Deviation_Update@button,w
  7364  074C  3E09               	addlw	9
  7365  074D  0086               	movwf	6
  7366  074E  0187               	clrf	7
  7367  074F  0820               	movf	Button_Deviation_Update@deviation,w
  7368  0750  0081               	movwf	1
  7369  0751  0008               	return
  7370  0752                     __end_of_Button_Deviation_Update:	
  7371                           
  7372                           	psect	text52
  7373  022A                     __ptext52:	
  7374 ;; *************** function _MTOUCH_Button_isPressed *****************
  7375 ;; Defined at:
  7376 ;;		line 321 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  name            1    wreg     enum E5405
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  name            1    0[COMMON] enum E5405
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  1    wreg      unsigned char 
  7383 ;; Registers used:
  7384 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7385 ;; Tracked objects:
  7386 ;;		On entry : 1F/0
  7387 ;;		On exit  : 1F/0
  7388 ;;		Unchanged: 1F/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7390 ;;      Params:         0       0       0       0
  7391 ;;      Locals:         1       0       0       0
  7392 ;;      Temps:          0       0       0       0
  7393 ;;      Totals:         1       0       0       0
  7394 ;;Total ram usage:        1 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; This function calls:
  7397 ;;		Nothing
  7398 ;; This function is called by:
  7399 ;;		_main
  7400 ;; This function uses a non-reentrant model
  7401 ;;
  7402                           
  7403                           
  7404                           ;psect for function _MTOUCH_Button_isPressed
  7405  022A                     _MTOUCH_Button_isPressed:	
  7406                           
  7407                           ;incstack = 0
  7408                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
  7409                           ;MTOUCH_Button_isPressed@name stored from wreg
  7410  022A  00F0               	movwf	MTOUCH_Button_isPressed@name
  7411                           
  7412                           ;mtouch_button.c: 323: if(name < 1)
  7413  022B  0870               	movf	MTOUCH_Button_isPressed@name,w
  7414  022C  1D03               	btfss	3,2
  7415  022D  3400               	retlw	0
  7416                           
  7417                           ;mtouch_button.c: 324: return (mtouch_button[name].state == MTOUCH_BUTTON_STATE_pressed)
      +                           ? 1 : 0;
  7418  022E  0E70               	swapf	MTOUCH_Button_isPressed@name,w
  7419  022F  39F0               	andlw	240
  7420  0230  3E4D               	addlw	(low ((_mtouch_button| 0+2)))& (0+255)
  7421  0231  0086               	movwf	6
  7422  0232  3002               	movlw	2
  7423  0233  0187               	clrf	7
  7424  0234  0601               	xorwf	1,w
  7425  0235  1903               	btfsc	3,2
  7426  0236  3401               	retlw	1
  7427  0237  3400               	retlw	0
  7428  0238                     __end_of_MTOUCH_Button_isPressed:	
  7429                           ;mtouch_button.c: 325: else
  7430                           ;mtouch_button.c: 326: return 0;
  7431                           
  7432                           
  7433                           	psect	text53
  7434  02E4                     __ptext53:	
  7435 ;; *************** function _DisplayVal *****************
  7436 ;; Defined at:
  7437 ;;		line 54 in file "main.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  val             2   12[COMMON] int 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  valStr         10   15[BANK0 ] unsigned char [10]
  7442 ;;  str             1   25[BANK0 ] PTR unsigned char 
  7443 ;;		 -> DisplayVal@valStr(10), 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  1    wreg      void 
  7446 ;; Registers used:
  7447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7448 ;; Tracked objects:
  7449 ;;		On entry : 1F/0
  7450 ;;		On exit  : 1F/3
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7453 ;;      Params:         2       0       0       0
  7454 ;;      Locals:         0      11       0       0
  7455 ;;      Temps:          0       0       0       0
  7456 ;;      Totals:         2      11       0       0
  7457 ;;Total ram usage:       13 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:    2
  7460 ;; This function calls:
  7461 ;;		_EUSART_Write
  7462 ;;		_sprintf
  7463 ;; This function is called by:
  7464 ;;		_main
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           
  7469                           ;psect for function _DisplayVal
  7470  02E4                     _DisplayVal:	
  7471                           
  7472                           ;main.c: 55: char valStr[10];
  7473                           ;main.c: 56: char *str;
  7474                           ;main.c: 58: sprintf(valStr, "%d", val);
  7475                           
  7476                           ;incstack = 0
  7477                           ; Regs used in _DisplayVal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7478  02E4  30AD               	movlw	low (STR_1| (0+32768))
  7479  02E5  00A0               	movwf	sprintf@f
  7480  02E6  3082               	movlw	high (STR_1| (0+32768))
  7481  02E7  00A1               	movwf	sprintf@f+1
  7482  02E8  087D               	movf	DisplayVal@val+1,w
  7483  02E9  00A3               	movwf	?_sprintf+3
  7484  02EA  087C               	movf	DisplayVal@val,w
  7485  02EB  00A2               	movwf	?_sprintf+2
  7486  02EC  302F               	movlw	(low (DisplayVal@valStr| 0))& (0+255)
  7487  02ED  2752               	fcall	_sprintf
  7488                           
  7489                           ;main.c: 59: str = valStr;
  7490  02EE  302F               	movlw	(low (DisplayVal@valStr| 0))& (0+255)
  7491  02EF  00B9               	movwf	DisplayVal@str
  7492  02F0                     l2484:	
  7493                           ;main.c: 61: while (*str)
  7494                           
  7495  02F0  0839               	movf	DisplayVal@str,w
  7496  02F1  0086               	movwf	6
  7497  02F2  0187               	clrf	7
  7498  02F3  0801               	movf	1,w
  7499  02F4  1903               	btfsc	3,2
  7500  02F5  2AFD               	goto	l2486
  7501                           
  7502                           ;main.c: 62: EUSART_Write(*str++);
  7503  02F6  0839               	movf	DisplayVal@str,w
  7504  02F7  0086               	movwf	6
  7505  02F8  0801               	movf	1,w
  7506  02F9  21A7               	fcall	_EUSART_Write
  7507  02FA  0020               	movlb	0	; select bank0
  7508  02FB  0AB9               	incf	DisplayVal@str,f
  7509  02FC  2AF0               	goto	l2484
  7510  02FD                     l2486:	
  7511                           
  7512                           ;main.c: 64: EUSART_Write(',');
  7513  02FD  302C               	movlw	44
  7514  02FE  21A7               	fcall	_EUSART_Write
  7515                           
  7516                           ;main.c: 65: EUSART_Write(13);
  7517  02FF  300D               	movlw	13
  7518  0300  21A7               	fcall	_EUSART_Write
  7519                           
  7520                           ;main.c: 66: EUSART_Write(10);
  7521  0301  300A               	movlw	10
  7522  0302  29A7               	ljmp	_EUSART_Write
  7523  0303                     __end_of_DisplayVal:	
  7524                           
  7525                           	psect	text54
  7526  0752                     __ptext54:	
  7527 ;; *************** function _sprintf *****************
  7528 ;; Defined at:
  7529 ;;		line 492 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;  sp              1    wreg     PTR unsigned char 
  7532 ;;		 -> DisplayVal@valStr(10), 
  7533 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  7534 ;;		 -> STR_1(3), 
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  7537 ;;		 -> DisplayVal@valStr(10), 
  7538 ;;  tmpval          4    0        struct .
  7539 ;;  val             2   11[BANK0 ] unsigned int 
  7540 ;;  cp              2    0        PTR const unsigned char 
  7541 ;;  len             2    0        unsigned int 
  7542 ;;  c               1   14[BANK0 ] char 
  7543 ;;  prec            1   10[BANK0 ] char 
  7544 ;;  flag            1    9[BANK0 ] unsigned char 
  7545 ;;  ap              1    8[BANK0 ] PTR void [1]
  7546 ;;		 -> ?_sprintf(2), 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  2    0[BANK0 ] int 
  7549 ;; Registers used:
  7550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7551 ;; Tracked objects:
  7552 ;;		On entry : 1F/0
  7553 ;;		On exit  : 1F/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7556 ;;      Params:         0       4       0       0
  7557 ;;      Locals:         0       7       0       0
  7558 ;;      Temps:          0       4       0       0
  7559 ;;      Totals:         0      15       0       0
  7560 ;;Total ram usage:       15 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:    1
  7563 ;; This function calls:
  7564 ;;		___lwdiv
  7565 ;;		___lwmod
  7566 ;; This function is called by:
  7567 ;;		_DisplayVal
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           
  7572                           ;psect for function _sprintf
  7573  0752                     _sprintf:	
  7574                           
  7575                           ;incstack = 0
  7576                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7577                           ;sprintf@sp stored from wreg
  7578  0752  00AD               	movwf	sprintf@sp
  7579                           
  7580                           ;doprnt.c: 494: va_list ap;
  7581                           ;doprnt.c: 499: signed char c;
  7582                           ;doprnt.c: 506: signed char prec;
  7583                           ;doprnt.c: 508: unsigned char flag;
  7584                           ;doprnt.c: 523: union {
  7585                           ;doprnt.c: 524: unsigned long vd;
  7586                           ;doprnt.c: 525: double integ;
  7587                           ;doprnt.c: 526: } tmpval;
  7588                           ;doprnt.c: 528: unsigned int val;
  7589                           ;doprnt.c: 529: unsigned len;
  7590                           ;doprnt.c: 530: const char * cp;
  7591                           ;doprnt.c: 533: *ap = __va_start();
  7592  0753  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7593  0754  00A8               	movwf	sprintf@ap
  7594  0755                     l2430:	
  7595                           ;doprnt.c: 536: while(c = *f++) {
  7596                           
  7597  0755  27BC               	fcall	PL38	;call to abstracted procedure
  7598  0756  082E               	movf	sprintf@c,w
  7599  0757  1903               	btfsc	3,2
  7600  0758  2FB7               	goto	l2432
  7601                           
  7602                           ;doprnt.c: 538: if(c != '%')
  7603  0759  3025               	movlw	37
  7604  075A  062E               	xorwf	sprintf@c,w
  7605  075B  1903               	btfsc	3,2
  7606  075C  2F5F               	goto	l2384
  7607                           
  7608                           ;doprnt.c: 540: {
  7609                           ;doprnt.c: 541: ((*sp++ = (c)));
  7610  075D  27D5               	fcall	PL48	;call to abstracted procedure
  7611                           
  7612                           ;doprnt.c: 542: continue;
  7613  075E  2F55               	goto	l2430
  7614  075F                     l2384:	
  7615                           
  7616                           ;doprnt.c: 543: }
  7617                           ;doprnt.c: 548: flag = 0;
  7618  075F  01A9               	clrf	sprintf@flag
  7619                           
  7620                           ;doprnt.c: 635: switch(c = *f++) {
  7621  0760  27BC               	fcall	PL38	;call to abstracted procedure
  7622                           
  7623                           ; Switch size 1, requested type "space"
  7624                           ; Number of cases is 3, Range of values is 0 to 105
  7625                           ; switch strategies available:
  7626                           ; Name         Instructions Cycles
  7627                           ; simple_byte           10     6 (average)
  7628                           ; direct_byte          218     6 (fixed)
  7629                           ; jumptable            260     6 (fixed)
  7630                           ;	Chosen strategy is simple_byte
  7631  0761  3A00               	xorlw	0	; case 0
  7632  0762  1903               	skipnz
  7633  0763  2FB7               	goto	l2432
  7634  0764  3A64               	xorlw	100	; case 100
  7635  0765  1903               	skipnz
  7636  0766  2F6B               	goto	l2390
  7637  0767  3A0D               	xorlw	13	; case 105
  7638  0768  1903               	skipnz
  7639  0769  2F6B               	goto	l2390
  7640  076A  2F55               	goto	l2430
  7641  076B                     l2390:	
  7642                           
  7643                           ;doprnt.c: 1253: {
  7644                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7645  076B  0828               	movf	sprintf@ap,w
  7646  076C  0086               	movwf	6
  7647  076D  0187               	clrf	7
  7648  076E  3F40               	moviw [0]fsr1
  7649  076F  00AB               	movwf	sprintf@val
  7650  0770  3F41               	moviw [1]fsr1
  7651  0771  00AC               	movwf	sprintf@val+1
  7652  0772  0AA8               	incf	sprintf@ap,f
  7653  0773  0AA8               	incf	sprintf@ap,f
  7654                           
  7655                           ;doprnt.c: 1261: if((int)val < 0) {
  7656  0774  1FAC               	btfss	sprintf@val+1,7
  7657  0775  2F7D               	goto	l2400
  7658                           
  7659                           ;doprnt.c: 1262: flag |= 0x03;
  7660  0776  3003               	movlw	3
  7661  0777  04A9               	iorwf	sprintf@flag,f
  7662                           
  7663                           ;doprnt.c: 1263: val = -val;
  7664  0778  09AB               	comf	sprintf@val,f
  7665  0779  09AC               	comf	sprintf@val+1,f
  7666  077A  0AAB               	incf	sprintf@val,f
  7667  077B  1903               	skipnz
  7668  077C  0AAC               	incf	sprintf@val+1,f
  7669  077D                     l2400:	
  7670                           
  7671                           ;doprnt.c: 1264: }
  7672                           ;doprnt.c: 1266: }
  7673                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7674  077D  01AE               	clrf	sprintf@c
  7675  077E  0AAE               	incf	sprintf@c,f
  7676  077F                     l2406:	
  7677                           
  7678                           ;doprnt.c: 1306: if(val < dpowers[c])
  7679  077F  082E               	movf	sprintf@c,w
  7680  0780  27C9               	fcall	PL40	;call to abstracted procedure
  7681  0781  00A6               	movwf	??_sprintf+2
  7682  0782  3F01               	moviw [1]fsr0
  7683  0783  00A7               	movwf	??_sprintf+3
  7684  0784  022C               	subwf	sprintf@val+1,w
  7685  0785  1D03               	skipz
  7686  0786  2F89               	goto	u1455
  7687  0787  0826               	movf	??_sprintf+2,w
  7688  0788  022B               	subwf	sprintf@val,w
  7689  0789                     u1455:	
  7690  0789  1C03               	btfss	3,0
  7691  078A  2F90               	goto	l2414
  7692  078B  3005               	movlw	5
  7693  078C  0AAE               	incf	sprintf@c,f
  7694  078D  062E               	xorwf	sprintf@c,w
  7695  078E  1D03               	btfss	3,2
  7696  078F  2F7F               	goto	l2406
  7697  0790                     l2414:	
  7698                           
  7699                           ;doprnt.c: 1422: {
  7700                           ;doprnt.c: 1438: if(flag & 0x03)
  7701  0790  0829               	movf	sprintf@flag,w
  7702  0791  3903               	andlw	3
  7703  0792  1903               	btfsc	3,2
  7704  0793  2F9A               	goto	l2420
  7705                           
  7706                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7707  0794  082D               	movf	sprintf@sp,w
  7708  0795  0086               	movwf	6
  7709  0796  302D               	movlw	45
  7710  0797  0187               	clrf	7
  7711  0798  0081               	movwf	1
  7712  0799  0AAD               	incf	sprintf@sp,f
  7713  079A                     l2420:	
  7714                           
  7715                           ;doprnt.c: 1469: }
  7716                           ;doprnt.c: 1472: prec = c;
  7717  079A  082E               	movf	sprintf@c,w
  7718  079B  00AA               	movwf	sprintf@prec
  7719                           
  7720                           ;doprnt.c: 1474: while(prec--) {
  7721  079C  2FB3               	goto	l2428
  7722  079D                     l2422:	
  7723                           
  7724                           ;doprnt.c: 1478: {
  7725                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7726  079D  300A               	movlw	10
  7727  079E  00F7               	movwf	___lwmod@divisor
  7728  079F  01F8               	clrf	___lwmod@divisor+1
  7729  07A0  082A               	movf	sprintf@prec,w
  7730  07A1  27C9               	fcall	PL40	;call to abstracted procedure
  7731  07A2  00F0               	movwf	___lwdiv@divisor
  7732  07A3  3F01               	moviw [1]fsr0
  7733  07A4  00F1               	movwf	___lwdiv@divisor+1
  7734  07A5  082C               	movf	sprintf@val+1,w
  7735  07A6  00F3               	movwf	___lwdiv@dividend+1
  7736  07A7  082B               	movf	sprintf@val,w
  7737  07A8  00F2               	movwf	___lwdiv@dividend
  7738  07A9  2364               	fcall	___lwdiv
  7739  07AA  0871               	movf	?___lwdiv+1,w
  7740  07AB  00FA               	movwf	___lwmod@dividend+1
  7741  07AC  0870               	movf	?___lwdiv,w
  7742  07AD  00F9               	movwf	___lwmod@dividend
  7743  07AE  2322               	fcall	___lwmod
  7744  07AF  0877               	movf	?___lwmod,w
  7745  07B0  3E30               	addlw	48
  7746  07B1  00AE               	movwf	sprintf@c
  7747                           
  7748                           ;doprnt.c: 1523: }
  7749                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7750  07B2  27D5               	fcall	PL48	;call to abstracted procedure
  7751  07B3                     l2428:	
  7752  07B3  03AA               	decf	sprintf@prec,f
  7753  07B4  0F2A               	incfsz	sprintf@prec,w
  7754  07B5  2F9D               	goto	l2422
  7755  07B6  2F55               	goto	l2430
  7756  07B7                     l2432:	
  7757                           
  7758                           ;doprnt.c: 1538: *sp = 0;
  7759  07B7  082D               	movf	sprintf@sp,w
  7760  07B8  0086               	movwf	6
  7761  07B9  0187               	clrf	7
  7762  07BA  0181               	clrf	1
  7763  07BB  0008               	return
  7764  07BC                     __end_of_sprintf:	
  7765  07BC                     PL38:	
  7766  07BC  0821               	movf	sprintf@f+1,w
  7767  07BD  00A5               	movwf	??_sprintf+1
  7768  07BE  0820               	movf	sprintf@f,w
  7769  07BF  00A4               	movwf	??_sprintf
  7770  07C0  0AA0               	incf	sprintf@f,f
  7771  07C1  1903               	skipnz
  7772  07C2  0AA1               	incf	sprintf@f+1,f
  7773  07C3  0084               	movwf	4
  7774  07C4  0825               	movf	??_sprintf+1,w
  7775  07C5  0085               	movwf	5
  7776  07C6  0800               	movf	0,w	;code access
  7777  07C7  00AE               	movwf	sprintf@c
  7778  07C8  0008               	return
  7779  07C9                     __end_ofPL38:	
  7780  07C9                     PL40:	
  7781  07C9  00A4               	movwf	??_sprintf
  7782  07CA  30E3               	movlw	low (_dpowers| (0+32768))
  7783  07CB  01A5               	clrf	??_sprintf+1
  7784  07CC  35A4               	lslf	??_sprintf,f
  7785  07CD  0DA5               	rlf	??_sprintf+1,f
  7786  07CE  0724               	addwf	??_sprintf,w
  7787  07CF  0084               	movwf	4
  7788  07D0  3081               	movlw	high (_dpowers| (0+32768))
  7789  07D1  3D25               	addwfc	??_sprintf+1,w
  7790  07D2  0085               	movwf	5
  7791  07D3  3F00               	moviw [0]fsr0
  7792  07D4  0008               	return
  7793  07D5                     __end_ofPL40:	
  7794  07D5                     PL48:	
  7795  07D5  082D               	movf	sprintf@sp,w
  7796  07D6  0086               	movwf	6
  7797  07D7  0187               	clrf	7
  7798  07D8  082E               	movf	sprintf@c,w
  7799  07D9  0081               	movwf	1
  7800  07DA  0AAD               	incf	sprintf@sp,f
  7801  07DB  0008               	return
  7802  07DC                     __end_ofPL48:	
  7803                           
  7804                           	psect	text55
  7805  0322                     __ptext55:	
  7806 ;; *************** function ___lwmod *****************
  7807 ;; Defined at:
  7808 ;;		line 6 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;  divisor         2    7[COMMON] unsigned int 
  7811 ;;  dividend        2    9[COMMON] unsigned int 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  counter         1   11[COMMON] unsigned char 
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  2    7[COMMON] unsigned int 
  7816 ;; Registers used:
  7817 ;;		wreg, status,2, status,0
  7818 ;; Tracked objects:
  7819 ;;		On entry : 1F/0
  7820 ;;		On exit  : 1F/0
  7821 ;;		Unchanged: 1F/0
  7822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7823 ;;      Params:         4       0       0       0
  7824 ;;      Locals:         1       0       0       0
  7825 ;;      Temps:          0       0       0       0
  7826 ;;      Totals:         5       0       0       0
  7827 ;;Total ram usage:        5 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_sprintf
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           
  7837                           ;psect for function ___lwmod
  7838  0322                     ___lwmod:	
  7839                           
  7840                           ;incstack = 0
  7841                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7842  0322  0877               	movf	___lwmod@divisor,w
  7843  0323  0478               	iorwf	___lwmod@divisor+1,w
  7844  0324  1903               	btfsc	3,2
  7845  0325  2B3D               	goto	l2306
  7846  0326  01FB               	clrf	___lwmod@counter
  7847  0327                     L8:	
  7848  0327  0AFB               	incf	___lwmod@counter,f
  7849  0328  1BF8               	btfsc	___lwmod@divisor+1,7
  7850  0329  2B2D               	goto	l2298
  7851  032A  35F7               	lslf	___lwmod@divisor,f
  7852  032B  0DF8               	rlf	___lwmod@divisor+1,f
  7853  032C  2B27               	goto	L8
  7854  032D                     l2298:	
  7855  032D  0878               	movf	___lwmod@divisor+1,w
  7856  032E  027A               	subwf	___lwmod@dividend+1,w
  7857  032F  1D03               	skipz
  7858  0330  2B33               	goto	u1375
  7859  0331  0877               	movf	___lwmod@divisor,w
  7860  0332  0279               	subwf	___lwmod@dividend,w
  7861  0333                     u1375:	
  7862  0333  1C03               	skipc
  7863  0334  2B39               	goto	l2302
  7864  0335  0877               	movf	___lwmod@divisor,w
  7865  0336  02F9               	subwf	___lwmod@dividend,f
  7866  0337  0878               	movf	___lwmod@divisor+1,w
  7867  0338  3BFA               	subwfb	___lwmod@dividend+1,f
  7868  0339                     l2302:	
  7869  0339  36F8               	lsrf	___lwmod@divisor+1,f
  7870  033A  0CF7               	rrf	___lwmod@divisor,f
  7871  033B  0BFB               	decfsz	___lwmod@counter,f
  7872  033C  2B2D               	goto	l2298
  7873  033D                     l2306:	
  7874  033D  087A               	movf	___lwmod@dividend+1,w
  7875  033E  00F8               	movwf	?___lwmod+1
  7876  033F  0879               	movf	___lwmod@dividend,w
  7877  0340  00F7               	movwf	?___lwmod
  7878  0341  0008               	return
  7879  0342                     __end_of___lwmod:	
  7880                           
  7881                           	psect	text56
  7882  0364                     __ptext56:	
  7883 ;; *************** function ___lwdiv *****************
  7884 ;; Defined at:
  7885 ;;		line 6 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  divisor         2    0[COMMON] unsigned int 
  7888 ;;  dividend        2    2[COMMON] unsigned int 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  quotient        2    4[COMMON] unsigned int 
  7891 ;;  counter         1    6[COMMON] unsigned char 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  2    0[COMMON] unsigned int 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0
  7896 ;; Tracked objects:
  7897 ;;		On entry : 1F/0
  7898 ;;		On exit  : 1F/0
  7899 ;;		Unchanged: 1F/0
  7900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7901 ;;      Params:         4       0       0       0
  7902 ;;      Locals:         3       0       0       0
  7903 ;;      Temps:          0       0       0       0
  7904 ;;      Totals:         7       0       0       0
  7905 ;;Total ram usage:        7 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; This function calls:
  7908 ;;		Nothing
  7909 ;; This function is called by:
  7910 ;;		_sprintf
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           
  7915                           ;psect for function ___lwdiv
  7916  0364                     ___lwdiv:	
  7917                           
  7918                           ;incstack = 0
  7919                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7920  0364  01F4               	clrf	___lwdiv@quotient
  7921  0365  01F5               	clrf	___lwdiv@quotient+1
  7922  0366  0870               	movf	___lwdiv@divisor,w
  7923  0367  0471               	iorwf	___lwdiv@divisor+1,w
  7924  0368  1903               	btfsc	3,2
  7925  0369  2B84               	goto	l2286
  7926  036A  01F6               	clrf	___lwdiv@counter
  7927  036B                     L9:	
  7928  036B  0AF6               	incf	___lwdiv@counter,f
  7929  036C  1BF1               	btfsc	___lwdiv@divisor+1,7
  7930  036D  2B71               	goto	l2274
  7931  036E  35F0               	lslf	___lwdiv@divisor,f
  7932  036F  0DF1               	rlf	___lwdiv@divisor+1,f
  7933  0370  2B6B               	goto	L9
  7934  0371                     l2274:	
  7935  0371  35F4               	lslf	___lwdiv@quotient,f
  7936  0372  0DF5               	rlf	___lwdiv@quotient+1,f
  7937  0373  0871               	movf	___lwdiv@divisor+1,w
  7938  0374  0273               	subwf	___lwdiv@dividend+1,w
  7939  0375  1D03               	skipz
  7940  0376  2B79               	goto	u1335
  7941  0377  0870               	movf	___lwdiv@divisor,w
  7942  0378  0272               	subwf	___lwdiv@dividend,w
  7943  0379                     u1335:	
  7944  0379  1C03               	skipc
  7945  037A  2B80               	goto	l2282
  7946  037B  0870               	movf	___lwdiv@divisor,w
  7947  037C  02F2               	subwf	___lwdiv@dividend,f
  7948  037D  0871               	movf	___lwdiv@divisor+1,w
  7949  037E  3BF3               	subwfb	___lwdiv@dividend+1,f
  7950  037F  1474               	bsf	___lwdiv@quotient,0
  7951  0380                     l2282:	
  7952  0380  36F1               	lsrf	___lwdiv@divisor+1,f
  7953  0381  0CF0               	rrf	___lwdiv@divisor,f
  7954  0382  0BF6               	decfsz	___lwdiv@counter,f
  7955  0383  2B71               	goto	l2274
  7956  0384                     l2286:	
  7957  0384  0875               	movf	___lwdiv@quotient+1,w
  7958  0385  00F1               	movwf	?___lwdiv+1
  7959  0386  0874               	movf	___lwdiv@quotient,w
  7960  0387  00F0               	movwf	?___lwdiv
  7961  0388  0008               	return
  7962  0389                     __end_of___lwdiv:	
  7963                           
  7964                           	psect	text57
  7965  01A7                     __ptext57:	
  7966 ;; *************** function _EUSART_Write *****************
  7967 ;; Defined at:
  7968 ;;		line 112 in file "mcc_generated_files/eusart.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  txData          1    wreg     unsigned char 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  txData          1    0[COMMON] unsigned char 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      void 
  7975 ;; Registers used:
  7976 ;;		wreg
  7977 ;; Tracked objects:
  7978 ;;		On entry : 1C/0
  7979 ;;		On exit  : 1F/3
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7982 ;;      Params:         0       0       0       0
  7983 ;;      Locals:         1       0       0       0
  7984 ;;      Temps:          0       0       0       0
  7985 ;;      Totals:         1       0       0       0
  7986 ;;Total ram usage:        1 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; This function calls:
  7989 ;;		Nothing
  7990 ;; This function is called by:
  7991 ;;		_DisplayVal
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           
  7996                           ;psect for function _EUSART_Write
  7997  01A7                     _EUSART_Write:	
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in _EUSART_Write: [wreg]
  8001                           ;EUSART_Write@txData stored from wreg
  8002  01A7  00F0               	movwf	EUSART_Write@txData
  8003  01A8                     l44:	
  8004                           ;eusart.c: 115: {
  8005                           
  8006  01A8  0020               	movlb	0	; select bank0
  8007  01A9  1E11               	btfss	17,4	;volatile
  8008  01AA  29A8               	goto	l44
  8009                           
  8010                           ;eusart.c: 116: }
  8011                           ;eusart.c: 118: TX1REG = txData;
  8012  01AB  0870               	movf	EUSART_Write@txData,w
  8013  01AC  0023               	movlb	3	; select bank3
  8014  01AD  009A               	movwf	26	;volatile
  8015  01AE  0008               	return
  8016  01AF                     __end_of_EUSART_Write:	
  8017  007E                     btemp	set	126	;btemp
  8018  007E                     wtemp0	set	126


Data Sizes:
    Strings     3
    Constant    26
    Data        15
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     31      74
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    Button_Service$1585$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_Service$1585	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> DisplayVal@valStr(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    DisplayVal@str	PTR unsigned char  size(1) Largest target is 10
		 -> DisplayVal@valStr(BANK0[10]), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Service@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    S539$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    S539$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E5394,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_Service@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK0[16]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E5405,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E5405,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 


Critical Paths under _main in COMMON

    _main->_DisplayVal
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_Acq_ExecuteScan
    _Sensor_Acq_ExecuteScan->___bmul
    _Button_Service->_Button_State_Initializing
    _Button_Service->_Button_State_NotPressed
    _Button_Service->_Button_State_Pressed
    _MTOUCH_Sensor_wasSampled->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_DisplayVal
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_Deviation_Update
    _DisplayVal->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    9512
                                             26 BANK0      5     5      0
                         _DisplayVal
            _MTOUCH_Button_isPressed
        _MTOUCH_Sensor_RawSample_Get
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1251
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    1251
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0     894
                                              5 COMMON     1     1      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             1     1      0     826
                                              4 COMMON     1     1      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 1     1      0     358
                                              3 COMMON     1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0     201
                                              2 COMMON     2     2      0
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0    6195
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     121
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   0     0      0     121
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              1     1      0    1961
                                             13 COMMON     1     1      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       3     3      0    1893
                                              6 BANK0      3     3      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                  _Sensor_setSampled
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              1     1      0      77
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1      53
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   6     6      0    1238
                                              0 BANK0      6     6      0
           _Sensor_Acq_ExecutePacket
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     164
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     1     1      0      77
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Acq_ExecutePacket                             6     6      0     698
                                              7 COMMON     6     6      0
                       _MTOUCH_Delay
                      _MTOUCH_Random
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_Acq_ExecuteScan
             _Sensor_setScanFunction
 ---------------------------------------------------------------------------------
 (6) _Sensor_setScanFunction                               1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecuteScan                               4     4      0     382
                                              3 COMMON     4     4      0
                 _MTOUCH_CVD_ScanA_0
                 _MTOUCH_CVD_ScanB_0
                             ___bmul
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_CVD_ScanB_0                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_CVD_ScanA_0                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Random                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Delay                                         1     1      0      46
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    3957
                                             13 COMMON     1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       2     2      0    3858
                                              5 BANK0      2     2      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             1     1      0     358
                                              3 COMMON     1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1     521
                                             12 COMMON     1     0      1
                                              0 BANK0      2     2      0
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1     882
                                             12 COMMON     1     0      1
                                              0 BANK0      2     2      0
             _Button_Baseline_Update
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             2     2      0     133
                                              0 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1     924
                                             12 COMMON     1     0      1
                                              0 BANK0      4     4      0
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     466
                                              7 COMMON     5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                3     3      0     567
                                              7 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     1      3     358
                                              3 COMMON     4     1      3
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               3     2      1     314
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     191
                                              0 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DisplayVal                                          13    11      2    1531
                                             12 COMMON     2     0      2
                                             15 BANK0     11    11      0
                       _EUSART_Write
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    19      4    1311
                                              0 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     414
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DisplayVal
     _EUSART_Write
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _MTOUCH_Button_isPressed
   _MTOUCH_Sensor_RawSample_Get
     ___bmul
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _MTOUCH_Sensor_RawSample_Get
             ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Delay
             _MTOUCH_Random
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_Acq_ExecuteScan
               _MTOUCH_CVD_ScanA_0
               _MTOUCH_CVD_ScanB_0
               ___bmul
             _Sensor_setScanFunction
           _Sensor_isEnabled
           _Sensor_setActive
           _Sensor_setInactive
           _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
         _Sensor_setSampled
         ___bmul
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
   _SYSTEM_Initialize
     _EUSART_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _WDT_Initialize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      58       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1F      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      58      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr  6 20:14:00 2018

           ?_MTOUCH_Sensor_RawSample_Get 0073                                        pc 0002  
                         ___bmul@product 0071                              __CFG_CP$OFF 0000  
                 _Sensor_setScanFunction 0181                                       l44 01A8  
        __size_of_Sensor_Acq_ExecuteScan 004C               __end_of_Sensor_setInactive 0000  
                                    PL40 07C9                                      PL32 0554  
                                    PL50 031C                                      PL42 067A  
                                    PL34 049C                                      PL60 0451  
                                    PL52 05CD                                      PL44 025E  
                                    PL36 04B5                                      LATA 010C  
                                    PL62 0489                                      PL54 035E  
                                    PL46 0680                                      PL38 07BC  
                            __CFG_LVP$ON 0000                                      PL56 05D3  
                                    PL48 07D5                                      PL58 05D9  
                                    l201 0666                                      l310 01DD  
                                    l433 04F2                                      l522 0006  
                                    l509 017F                                      l189 0479  
                                    l437 0504                                      l525 0006  
                                    l454 0623                                      l391 02E3  
                                    l299 017E                                      l388 02CA  
                                    l590 06BF                                      l582 0687  
                                    l496 0006                                      l594 06D2  
                                    l499 0006                                      _GIE 005F  
                           __CFG_CPD$OFF 0000                                      u915 03EF  
                                    u935 0560                                      _abs 0246  
                __size_of_PMD_Initialize 0008                                      wreg 0009  
       ??_MTOUCH_Sensor_Sampled_ResetAll 0071          ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
       __size_of_MTOUCH_Sensor_SampleAll 0009        __size_of_MTOUCH_Sensor_Initialize 001C  
                                   S2740 0002                                     S2738 0004  
              ?_MTOUCH_Sensor_Initialize 0070                                     INDF0 0000  
                                   INDF1 0001                                     FSR0H 0005  
                                   FSR1H 0007                                     FSR0L 0004  
                                   FSR1L 0006                       _MTOUCH_CVD_ScanA_0 0389  
                     _MTOUCH_CVD_ScanB_0 03AE                                     ?_abs 0070  
                                   l2032 04EA                                     l2106 059E  
                                   l2212 02C0                                     l2204 01B8  
                                   l2302 0339                                     l2054 0001  
                                   l2400 077D                                     l2056 0001  
                                   l2152 02D1                                     l2306 033D  
                                   l2234 0184                                     l2218 02C1  
                                   l2154 02D6                                     l2420 079A  
                                   l2092 0734                                     l2084 0497  
                                   l2260 0420                                     l2252 0405  
                                   l2422 079D                                     l2414 0790  
                                   l2406 077F                                     l2430 0755  
                                   l2094 0739                                     l2166 050F  
                                   l2174 0512                                     l2432 07B7  
                                   l2336 0186                                     l2282 0380  
                                   l2274 0371                                     l2098 074B  
                                   l2610 01B0                                     l2194 025B  
                                   l2258 0412                                     l2428 07B3  
                                   l2196 0001                                     l2348 01C8  
                                   l2286 0384                                     l2390 076B  
                                   l1902 01E0                                     l2384 075F  
                                   l2298 032D                                     l1930 061F  
                                   l1922 05EF                                     l2650 06A2  
                                   l2484 02F0                                     l1924 0607  
                                   l1916 05EB                                     l1932 0625  
                                   l2486 02FD                                     l1918 05ED  
                                   l2670 06D4                                     l2646 069F  
                                   l2736 05FD                                     l2656 06B7  
                                   l2648 06A1                                     l1866 01FA  
                                   l2666 06C2                                     l1892 029A  
                                   l1956 01A2                                     l1878 018E  
                                   l1994 0001                                     l1988 0551  
                                   TRISA 008C                                     STR_1 02AD  
                                   u1040 0723                                     u1035 06F6  
                                   u1045 071F                                     u1215 0539  
                                   _LATA 010C                                     u1335 0379  
                                   u1095 05B7                                     u1375 0333  
                                   u1455 0789                                     u1725 06B1  
                                   u1745 06CD                                     u1755 06E0  
                                   u1767 03B4                                     u1777 038F  
                                   _PMD0 0911                                     _PMD1 0912  
                                   _PMD2 0913                                     _PMD3 0914  
                                   _PMD4 0915                                     _PMD5 0916  
             Button_State_Pressed@button 007C                                     _WPUA 020C  
      __size_of_Sensor_Acq_ExecutePacket 003E                ?_Sensor_Acq_ExecutePacket 0070  
                           __CFG_WRT$OFF 0000                            __CFG_FCMEN$ON 0000  
                                   abs@a 0070                                     _main 0686  
   __size_of_MTOUCH_Button_InitializeAll 0018                         DisplayVal@valStr 002F  
                                   fsr0h 0005                                     fsr1h 0007  
                                   indf0 0000                                     fsr0l 0004  
                                   indf1 0001                                     fsr1l 0006  
                                   btemp 007E     __size_of_MTOUCH_Sensor_InitializeAll 0008  
                    ?_MTOUCH_CVD_ScanA_0 0070                      ?_MTOUCH_CVD_ScanB_0 0070  
                          __CFG_BOREN$ON 0000                            __CFG_BORV$LOW 0000  
                                   start 0001                            __CFG_CSWEN$ON 0000  
                      ___bmul@multiplier 0072                            __CFG_MCLRE$ON 0000  
                                  ADCON0 009D                 ?_MTOUCH_Service_Mainloop 0070  
       __size_of_MTOUCH_Button_isPressed 000E            __size_of_Button_State_Pressed 002F  
                                  ??_abs 0072              ?_Button_Baseline_Initialize 0070  
          ??_MTOUCH_Sensor_RawSample_Get 0076            Sensor_RawSample_Update@sensor 0070  
              __size_of_Sensor_isEnabled 000B                            ?_EUSART_Write 0070  
         __size_of_OSCILLATOR_Initialize 0009            __end_of_OSCILLATOR_Initialize 01D9  
                                  _ADACT 009F                                    ?_main 0070  
                                  _ADRES 009B                            __CFG_WDTE$OFF 0000  
                   ??_MTOUCH_CVD_ScanA_0 0070                     ??_MTOUCH_CVD_ScanB_0 0070  
                         __CFG_DEBUG$OFF 0000                  __size_of_Button_Service 0032  
                        __end_of___lwdiv 0389                          __end_of___lwmod 0342  
                                  u124m0 02BC                                    _OSCEN 091D  
                                  _TRISA 008C          __size_of_Button_DefaultCallback 0001  
                             _DisplayVal 02E4          __size_of_Sensor_DefaultCallback 0001  
                        __end_of_dpowers 01ED                  __size_of_Sensor_Service 0028  
  __end_of_MTOUCH_Sensor_Scan_Initialize 0194   __size_of_MTOUCH_Sensor_Scan_Initialize 0006  
          _MTOUCH_Sensor_Scan_Initialize 018E                           _WDT_Initialize 018A  
                Sensor_setSampled@sensor 0070                   _Sensor_Acq_ExecuteScan 05DF  
                                  main@i 003D         __size_of_Button_State_NotPressed 004F  
                                  pclath 000A                     _Sensor_Sampled_Reset 0000  
                                  status 0003                                    wtemp0 007E  
                        __end_of_sprintf 07BC                __size_of_Sensor_setActive 0000  
                 Sensor_isEnabled@sensor 0070                          __initialization 07DC  
                           __end_of_main 06E9                    __end_of_MTOUCH_Random 01E3  
                         ??_EUSART_Write 0070         __end_of_MTOUCH_Button_Initialize 031C  
                                 ??_main 003A                  _MTOUCH_Sensor_Calibrate 017F  
                ??_Button_Reading_Update 0077     MTOUCH_Sensor_Sampled_ResetAll@sensor 0072  
               ?_Button_Deviation_Update 0070                   __end_of_WDT_Initialize 018E  
                           ?_MTOUCH_Tick 0070             Button_Baseline_Update@button 0076  
                                 _ADCON0 009D                                   _ADCON1 009E  
   __size_of_MTOUCH_Sensor_RawSample_Get 0013                                   _ANSELA 018C  
                     __CFG_RSTOSC$HFINT1 0000                                   _RC1STA 019D  
                                 _ODCONA 028C                    ?_Sensor_Sampled_Reset 0070  
                                 _OSCFRQ 091F                                   _TX1REG 019A  
                                 _WDTCON 0097                                   _TX1STA 019E  
      MTOUCH_Button_InitializeAll@button 0073                   _Button_DefaultCallback 017E  
        __end_of_MTOUCH_Service_Mainloop 021D                           __CFG_PWRTE$OFF 0000  
                 _Sensor_DefaultCallback 0182                            _packet_sample 0041  
                                 ___bmul 01F8             Sensor_DefaultCallback@sensor 0070  
                         __CFG_STVREN$ON 0000                                ??___lwdiv 0074  
                              ??___lwmod 007B                                   _bright 003F  
       __end_of_MTOUCH_Button_ServiceAll 01B7                           _PMD_Initialize 01BF  
                _MTOUCH_Sensor_SampleAll 01C7             Button_DefaultCallback@button 0070  
                        ?_WDT_Initialize 0070                 ?_Sensor_RawSample_Update 0070  
                            ?_DisplayVal 007C               __end_of_Sensor_Acquisition 054A  
                ?_Button_Baseline_Update 0070                                ??_sprintf 0024  
        MTOUCH_Sensor_RawSample_Get@name 0076                        _SYSTEM_Initialize 0194  
                __end_of__initialization 07FE      __size_of_Button_Baseline_Initialize 0027  
         ?_MTOUCH_Sensor_Scan_Initialize 0070                       ?_SYSTEM_Initialize 0070  
                    _Button_StateMachine 005B               __end_of_Button_Tick_helper 035E  
          MTOUCH_Sensor_Calibrate@sensor 0070                      ___bmul@multiplicand 0070  
                ?_Sensor_setScanFunction 0070                           __pcstackCOMMON 0070  
                _MTOUCH_Button_isPressed 022A                             __pidataBANK0 0000  
                    ??_SYSTEM_Initialize 0076               __end_of_MTOUCH_Button_Tick 0186  
       __end_of_MTOUCH_Sensor_Initialize 02E4                ??_MTOUCH_Sensor_Calibrate 0070  
                       _Sensor_isEnabled 01ED          __end_of_Button_Deviation_Update 0752  
                 __end_of_PMD_Initialize 01C7                 Sensor_setInactive@sensor 0070  
                         _Button_Service 0457         __end_of_Sensor_Acq_ExecutePacket 0506  
             ?_Button_State_Initializing 007C                     Button_Service@button 0026  
         __end_of_Button_Baseline_Update 0554                     Sensor_Service@sensor 0028  
               _MTOUCH_Button_Initialize 0303                           _Sensor_Service 03FA  
                _Button_State_NotPressed 062B            __size_of_MTOUCH_Sensor_Enable 000D  
                     _Sensor_setInactive 0000                __end_of_SYSTEM_Initialize 019A  
       MTOUCH_Sensor_isCalibrated@sensor 0070                   ??_Sensor_Sampled_Reset 0070  
                             __pbssBANK0 003F                     __end_of_EUSART_Write 01AF  
                    ?_Sensor_setInactive 0070                         _Sensor_setActive 0000  
                     Sensor_Service@name 0026               __end_of_mtouch_button_init 02AD  
         __end_of_Sensor_setScanFunction 0182                               __pmaintext 0686  
                          ?_MTOUCH_Delay 0070                                  ?___bmul 0070  
                    __size_of_DisplayVal 001F                          __CFG_PPS1WAY$ON 0000  
         MTOUCH_Sensor_wasSampled@sensor 0073                   __end_of_Button_Service 0489  
    __end_of_MTOUCH_Button_InitializeAll 02C8              _MTOUCH_Button_InitializeAll 02B0  
    __end_of_MTOUCH_Sensor_InitializeAll 01BF              _MTOUCH_Sensor_InitializeAll 01B7  
              ??_MTOUCH_Sensor_SampleAll 007D                          ?_PMD_Initialize 0070  
        __end_of_Sensor_RawSample_Update 025E                     ??_Sensor_setInactive 0070  
      __size_of_MTOUCH_Sensor_wasSampled 000E                ?_MTOUCH_Sensor_wasSampled 0070  
      __end_of_Button_State_Initializing 05CD                   __end_of_Sensor_Service 0422  
                                _SP1BRGH 019C                                  _SP1BRGL 019B  
               _MTOUCH_Button_ServiceAll 01AF                  ?_Sensor_Acq_ExecuteScan 0070  
                                _OSCCON1 0919                                  _OSCCON3 091B  
          MTOUCH_Sensor_SampleAll@sensor 007D                                  _OSCTUNE 091E  
       __size_of_MTOUCH_Service_Mainloop 000D             __end_of_Button_State_Pressed 0451  
       Button_Baseline_Initialize@button 007B                     __size_of_MTOUCH_Tick 0001  
              ??_MTOUCH_Button_isPressed 0070                           ??_MTOUCH_Delay 0070  
                         _packet_counter 0046                  Sensor_Acquisition@retry 0024  
                        __size_of___bmul 000C           MTOUCH_Button_Initialize@button 0071  
                                ___lwdiv 0364                                  ___lwmod 0322  
                        ?_Button_Service 0070                                  __ptext1 0194  
                                __ptext2 018A                                  __ptext3 01BF  
                                __ptext4 0278                                  __ptext5 01D0  
                                __ptext6 0186                                  __ptext7 01B7  
                                __ptext8 02C8                                  __ptext9 021D  
            Button_Reading_Update@button 0079              __size_of_MTOUCH_CVD_ScanA_0 0025  
            __size_of_MTOUCH_CVD_ScanB_0 0025                 _MTOUCH_Sensor_Initialize 02C8  
                                _dpowers 01E3           __end_of_Sensor_Acq_ExecuteScan 062B  
                  _OSCILLATOR_Initialize 01D0                             __size_of_abs 000E  
              ??_Button_State_NotPressed 0020                          ?_Sensor_Service 0070  
               ??_PIN_MANAGER_Initialize 0070           __size_of_Button_Reading_Update 000E  
          __end_of_Button_Reading_Update 049C        MTOUCH_Sensor_InitializeAll@sensor 0075  
               _Sensor_Acq_ExecutePacket 04C8               __size_of_SYSTEM_Initialize 0006  
                                _sprintf 0752                                  clrloop0 019B  
         MTOUCH_Sensor_Initialize@sensor 0074                     end_of_initialization 07FE  
                ?_Button_DefaultCallback 0070                  ?_Sensor_DefaultCallback 0070  
       __size_of_Button_Deviation_Update 0069                        _EUSART_Initialize 0204  
           ??_MTOUCH_Sensor_isCalibrated 0070                       ?_EUSART_Initialize 0070  
    __end_of_MTOUCH_Sensor_RawSample_Get 029D              _MTOUCH_Sensor_RawSample_Get 028A  
                          MTOUCH_Delay@i 0070                      ??_EUSART_Initialize 0070  
                       ??_WDT_Initialize 0070                                _PORTAbits 000C  
                 Sensor_setActive@sensor 0070            Button_Deviation_Update@button 0024  
                              _TRISAbits 008C                             ??_DisplayVal 007E  
                  __size_of_EUSART_Write 0008               MTOUCH_Sensor_Enable@sensor 0073  
                       __CFG_FEXTOSC$OFF 0000      __size_of_MTOUCH_Sensor_isCalibrated 0001  
         __end_of_Button_DefaultCallback 017F                       _sensor_globalFlags 0048  
                 __size_of_MTOUCH_Random 000A                 __end_of_Sensor_isEnabled 01F8  
         __end_of_Sensor_DefaultCallback 0183                __end_of_EUSART_Initialize 0210  
           Sensor_Acq_ExecuteScan@result 0075         __size_of_Sensor_RawSample_Update 000A  
                     _Sensor_Acquisition 0506                       __end_of_DisplayVal 0303  
                   _Button_State_Pressed 0422                           __end_of___bmul 0204  
                    ?_Sensor_Acquisition 0070               ??_MTOUCH_Button_Initialize 0070  
        ??_MTOUCH_Sensor_Scan_Initialize 0070                             _EUSART_Write 01A7  
          Sensor_Acq_ExecutePacket@error 007B                       _Button_Tick_helper 0342  
                 ?_OSCILLATOR_Initialize 0070                 __end_of_Sensor_setActive 0000  
            ??_Button_State_Initializing 0020                              __end_ofPL40 07D5  
                            __end_ofPL32 0593                              __end_ofPL50 0322  
                            __end_ofPL42 0680                              __end_ofPL34 04B5  
                            __end_ofPL60 0457                              __end_ofPL52 05D3  
                            __end_ofPL44 0266                              __end_ofPL36 04C8  
                            __end_ofPL62 048E                              __end_ofPL54 0364  
                            __end_ofPL46 0686                              __end_ofPL38 07C9  
                            __end_ofPL56 05D9                              __end_ofPL48 07DC  
                            __end_ofPL58 05DF                      start_initialization 07DC  
                _MTOUCH_Service_Mainloop 0210          __size_of_PIN_MANAGER_Initialize 0012  
                   __end_of_MTOUCH_Delay 01A7                       _MTOUCH_Button_Tick 0184  
                    ?_Button_Tick_helper 0070                              __end_of_abs 0254  
                   ??_Sensor_Acquisition 0020                      ?_MTOUCH_Button_Tick 0070  
        Button_State_Initializing@button 007C         __end_of_MTOUCH_Sensor_wasSampled 0246  
                       __CFG_LPBOREN$OFF 0000                     ??_Button_Tick_helper 0070  
           __end_of_MTOUCH_Sensor_Enable 022A                                 ??___bmul 0071  
                       ??_PMD_Initialize 0070                    ?_Button_State_Pressed 007C  
             ??_MTOUCH_Button_ServiceAll 007D                              __pdataBANK0 005B  
                          _MTOUCH_Random 01D9             ??_Button_Baseline_Initialize 0077  
                   ??_MTOUCH_Button_Tick 0073                       _mtouch_button_init 029D  
             Sensor_Sampled_Reset@sensor 0070       Sensor_Acq_ExecutePacket@ADACT_temp 0079  
                              ___latbits 0000                            __pcstackBANK0 0020  
         MTOUCH_Button_ServiceAll@button 007D                      Sensor_Service@error 0027  
          __size_of_Sensor_Sampled_Reset 0000               __size_of_EUSART_Initialize 000C  
                            sprintf@flag 0029                  _Button_Deviation_Update 06E9  
                            sprintf@prec 002A                _Button_State_Initializing 0593  
     __end_of_MTOUCH_Sensor_isCalibrated 0181               _MTOUCH_Sensor_isCalibrated 0180  
                      _Sensor_setSampled 0000                         ___lwdiv@dividend 0072  
                 _PIN_MANAGER_Initialize 0278                         ??_Button_Service 007D  
               ?_MTOUCH_Sensor_Calibrate 0070                       ?_Sensor_setSampled 0070  
             ??_MTOUCH_Sensor_Initialize 0074                           ?_MTOUCH_Random 0070  
                               ?___lwdiv 0070                                 ?___lwmod 0077  
                       ??_Sensor_Service 007D               ??_Sensor_Acq_ExecutePacket 0077  
                    ??_Sensor_setSampled 0070                                __pswtext1 0004  
                              __pswtext2 0002                ??_MTOUCH_Service_Mainloop 007E  
            __size_of_Sensor_setInactive 0000                                 _BAUD1CON 019F  
         Sensor_Acq_ExecutePacket@sensor 007C                            ??_MTOUCH_Tick 0073  
                       ___lwdiv@quotient 0074                                 ?_sprintf 0020  
              __end_of_Sensor_setSampled 0000                       _currentScannSensor 0047  
                _Sensor_RawSample_Update 0254                                clear_ram0 019A  
                               _PIR1bits 0011                   ??_Button_State_Pressed 0020  
 __end_of_MTOUCH_Sensor_Sampled_ResetAll 0278  __size_of_MTOUCH_Sensor_Sampled_ResetAll 0012  
         _MTOUCH_Sensor_Sampled_ResetAll 0266                 ?_MTOUCH_Sensor_SampleAll 0070  
               _MTOUCH_Sensor_wasSampled 0238                       _mtouch_time_toScan 004A  
                              _toggleLED 0044               __end_of_MTOUCH_CVD_ScanA_0 03AE  
             __end_of_MTOUCH_CVD_ScanB_0 03D3                 ??_Button_Baseline_Update 0070  
                             _ADCON0bits 009D                    __size_of_MTOUCH_Delay 0007  
                               _WPUAbits 020C                     _MTOUCH_Sensor_Enable 021D  
               Button_Tick_helper@button 0072                ??_Button_Deviation_Update 0070  
                  _Button_Reading_Update 048E                 ??_Sensor_setScanFunction 0070  
               ?_MTOUCH_Button_isPressed 0070                        ?_Sensor_isEnabled 0070  
                    __end_of_MTOUCH_Tick 0184                        _MTOUCH_Initialize 0186  
        __end_of_MTOUCH_Sensor_Calibrate 0180                       ??_Sensor_isEnabled 0070  
                     ?_MTOUCH_Initialize 0070                          ??_MTOUCH_Random 0070  
                           _MTOUCH_Delay 01A0                             _sample_delay 0045  
                ??_OSCILLATOR_Initialize 0070       __end_of_Button_Baseline_Initialize 03FA  
             _Button_Baseline_Initialize 03D3                 Sensor_Acquisition@sensor 0025  
                    ??_MTOUCH_Initialize 0076                         __size_of___lwdiv 0025  
                       __size_of___lwmod 0020                 ?_Button_State_NotPressed 007C  
                             _ANSELAbits 018C                       Button_Service@name 0025  
                      ?_Sensor_setActive 0070                               sprintf@val 002B  
                        ___lwdiv@divisor 0070                       ??_Sensor_setActive 0070  
                        ___lwdiv@counter 0076                    ?_MTOUCH_Sensor_Enable 0070  
                               __ptext10 02B0                                 __ptext11 0204  
                               __ptext20 0000                                 __ptext12 0210  
                               __ptext21 0254                                 __ptext13 0183  
                               __ptext30 05DF                                 __ptext22 0182  
                               __ptext14 0184                                 __ptext31 03AE  
                               __ptext23 0506                                 __ptext15 0342  
                               __ptext40 062B                                 __ptext32 0389  
                               __ptext24 0246                                 __ptext16 0266  
                               __ptext41 0593                                 __ptext33 018E  
                               __ptext25 0000                                 __ptext17 0000  
                               __ptext50 01F8                                 __ptext42 0422  
                               __ptext34 01D9                                 __ptext26 0000  
                               __ptext18 01C7                                 __ptext51 06E9  
                               __ptext43 0303                                 __ptext35 01A0  
                               __ptext27 01ED                                 __ptext19 03FA  
                               __ptext52 022A                                 __ptext44 017F  
                               __ptext36 01AF                                 __ptext28 04C8  
                               __ptext53 02E4                                 __ptext45 017E  
                               __ptext37 0457                                 __ptext29 0181  
                               __ptext54 0752                                 __ptext46 054A  
                               __ptext38 0238                                 __ptext55 0322  
                               __ptext47 03D3                                 __ptext39 0180  
                               __ptext56 0364                                 __ptext48 048E  
                               __ptext57 01A7                                 __ptext49 028A  
                       __size_of_sprintf 006A                __end_of_MTOUCH_Initialize 018A  
              ??_Sensor_RawSample_Update 0070      Sensor_Acq_ExecutePacket@ADCON0_temp 0077  
    Sensor_Acq_ExecutePacket@ADCON1_temp 0078               __size_of_Sensor_setSampled 0000  
                          __size_of_main 0063          __end_of_MTOUCH_Sensor_SampleAll 01D0  
                               _myStatus 0043                               _RA4PPSbits 0E94  
           Sensor_setScanFunction@sensor 0070                 ??_Sensor_Acq_ExecuteScan 0073  
     __size_of_Button_State_Initializing 003A                                 main@data 003B  
      Sensor_Acq_ExecutePacket@GIE_state 007A                            DisplayVal@val 007C  
                          DisplayVal@str 0039          __size_of_Button_Baseline_Update 000A  
           ?_MTOUCH_Button_InitializeAll 0070             ?_MTOUCH_Sensor_InitializeAll 0070  
                          _mtouch_button 004B                               _INTCONbits 000B  
                          _mtouch_sensor 0061          __end_of_MTOUCH_Button_isPressed 0238  
                            _MTOUCH_Tick 0183                   ?_Button_Reading_Update 0070  
       Button_Deviation_Update@deviation 0020                  __size_of_WDT_Initialize 0004  
           MTOUCH_Button_Initialize@name 0070        __size_of_MTOUCH_Button_Initialize 0019  
              ?_MTOUCH_Button_Initialize 0070              __size_of_Sensor_Acquisition 0044  
                              sprintf@ap 0028                                sprintf@sp 002D  
        __size_of_Sensor_setScanFunction 0001                         ___lwmod@dividend 0079  
                ?_PIN_MANAGER_Initialize 0070                        __CFG_CLKOUTEN$OFF 0000  
            ?_MTOUCH_Sensor_isCalibrated 0070                        MTOUCH_Random@seed 0049  
            __size_of_Button_Tick_helper 001C          __end_of_Button_State_NotPressed 067A  
           __end_of_Sensor_Sampled_Reset 0000              __size_of_MTOUCH_Button_Tick 0002  
                          __pstringtext1 01E3                            __pstringtext2 029D  
                          __pstringtext3 0000                                 sprintf@c 002E  
                               sprintf@f 0020            ??_MTOUCH_Button_InitializeAll 0072  
               ??_Button_DefaultCallback 0071                          ___lwmod@divisor 0077  
          ??_MTOUCH_Sensor_InitializeAll 0075         __size_of_MTOUCH_Sensor_Calibrate 0001  
                        ___lwmod@counter 007B                   ??_MTOUCH_Sensor_Enable 0073  
               ??_Sensor_DefaultCallback 0071        __size_of_MTOUCH_Button_ServiceAll 0008  
              ?_MTOUCH_Button_ServiceAll 0070            Button_State_NotPressed@button 007C  
                     EUSART_Write@txData 0070               __size_of_MTOUCH_Initialize 0004  
         __end_of_PIN_MANAGER_Initialize 028A                   _Button_Baseline_Update 054A  
            MTOUCH_Button_isPressed@name 0070               ??_MTOUCH_Sensor_wasSampled 0073  
